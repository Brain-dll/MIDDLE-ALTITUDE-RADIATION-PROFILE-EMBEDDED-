
PAYLOADV3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800cf40  0800cf40  0001cf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8d0  0800d8d0  00020210  2**0
                  CONTENTS
  4 .ARM          00000000  0800d8d0  0800d8d0  00020210  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d8d0  0800d8d0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8d0  0800d8d0  0001d8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8d4  0800d8d4  0001d8d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800d8d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  20000210  0800dae8  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013d0  0800dae8  000213d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f97  00000000  00000000  00020239  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e56  00000000  00000000  000361d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014c8  00000000  00000000  00039028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a08e  00000000  00000000  0003b898  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001194f  00000000  00000000  00055926  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009105f  00000000  00000000  00067275  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f82d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d0  00000000  00000000  000f8350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000210 	.word	0x20000210
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cf28 	.word	0x0800cf28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000214 	.word	0x20000214
 800014c:	0800cf28 	.word	0x0800cf28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2lz>:
 8001110:	b510      	push	{r4, lr}
 8001112:	2100      	movs	r1, #0
 8001114:	4604      	mov	r4, r0
 8001116:	f7ff ffd3 	bl	80010c0 <__aeabi_fcmplt>
 800111a:	b920      	cbnz	r0, 8001126 <__aeabi_f2lz+0x16>
 800111c:	4620      	mov	r0, r4
 800111e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001122:	f000 b809 	b.w	8001138 <__aeabi_f2ulz>
 8001126:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 800112a:	f000 f805 	bl	8001138 <__aeabi_f2ulz>
 800112e:	4240      	negs	r0, r0
 8001130:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001134:	bd10      	pop	{r4, pc}
 8001136:	bf00      	nop

08001138 <__aeabi_f2ulz>:
 8001138:	b5d0      	push	{r4, r6, r7, lr}
 800113a:	f7ff f975 	bl	8000428 <__aeabi_f2d>
 800113e:	2200      	movs	r2, #0
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <__aeabi_f2ulz+0x40>)
 8001142:	4606      	mov	r6, r0
 8001144:	460f      	mov	r7, r1
 8001146:	f7ff f9c7 	bl	80004d8 <__aeabi_dmul>
 800114a:	f7ff fc9d 	bl	8000a88 <__aeabi_d2uiz>
 800114e:	4604      	mov	r4, r0
 8001150:	f7ff f948 	bl	80003e4 <__aeabi_ui2d>
 8001154:	2200      	movs	r2, #0
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <__aeabi_f2ulz+0x44>)
 8001158:	f7ff f9be 	bl	80004d8 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4630      	mov	r0, r6
 8001162:	4639      	mov	r1, r7
 8001164:	f7ff f800 	bl	8000168 <__aeabi_dsub>
 8001168:	f7ff fc8e 	bl	8000a88 <__aeabi_d2uiz>
 800116c:	2200      	movs	r2, #0
 800116e:	4623      	mov	r3, r4
 8001170:	4310      	orrs	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	bdd0      	pop	{r4, r6, r7, pc}
 8001176:	bf00      	nop
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <MS5611_Init>:
float P0 = 1013.25;		// sea level air pressure
//float P0 = 1012.0;	// ADANA air pressure
float T = 0;
float* pte = &T;

void MS5611_Init(void) {
 8001180:	b590      	push	{r4, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af02      	add	r7, sp, #8

	if (HAL_I2C_IsDeviceReady(&hi2c1, MS5611_WRITE_ADRESS, 1, 100) != HAL_OK) {
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	2201      	movs	r2, #1
 800118a:	21ee      	movs	r1, #238	; 0xee
 800118c:	4871      	ldr	r0, [pc, #452]	; (8001354 <MS5611_Init+0x1d4>)
 800118e:	f002 ff0f 	bl	8003fb0 <HAL_I2C_IsDeviceReady>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d010      	beq.n	80011ba <MS5611_Init+0x3a>
		for (uint8_t i = 0; i < 6; i++) {
 8001198:	2300      	movs	r3, #0
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	e00a      	b.n	80011b4 <MS5611_Init+0x34>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
 800119e:	2108      	movs	r1, #8
 80011a0:	486d      	ldr	r0, [pc, #436]	; (8001358 <MS5611_Init+0x1d8>)
 80011a2:	f002 fa5b 	bl	800365c <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80011a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011aa:	f001 ff05 	bl	8002fb8 <HAL_Delay>
		for (uint8_t i = 0; i < 6; i++) {
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	3301      	adds	r3, #1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d9f1      	bls.n	800119e <MS5611_Init+0x1e>
		}
	}

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMFAB, 1,
 80011ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	4a66      	ldr	r2, [pc, #408]	; (800135c <MS5611_Init+0x1dc>)
 80011c4:	21ee      	movs	r1, #238	; 0xee
 80011c6:	4863      	ldr	r0, [pc, #396]	; (8001354 <MS5611_Init+0x1d4>)
 80011c8:	f002 fb9a 	bl	8003900 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[0], 2, 1000);
 80011cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2302      	movs	r3, #2
 80011d4:	4a62      	ldr	r2, [pc, #392]	; (8001360 <MS5611_Init+0x1e0>)
 80011d6:	21ef      	movs	r1, #239	; 0xef
 80011d8:	485e      	ldr	r0, [pc, #376]	; (8001354 <MS5611_Init+0x1d4>)
 80011da:	f002 fc8f 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC1, 1, 1000);
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <MS5611_Init+0x1e4>)
 80011e8:	21ee      	movs	r1, #238	; 0xee
 80011ea:	485a      	ldr	r0, [pc, #360]	; (8001354 <MS5611_Init+0x1d4>)
 80011ec:	f002 fb88 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[2], 2, 1000);
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	2302      	movs	r3, #2
 80011f8:	4a5b      	ldr	r2, [pc, #364]	; (8001368 <MS5611_Init+0x1e8>)
 80011fa:	21ef      	movs	r1, #239	; 0xef
 80011fc:	4855      	ldr	r0, [pc, #340]	; (8001354 <MS5611_Init+0x1d4>)
 80011fe:	f002 fc7d 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC2, 1, 1000);
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	4a58      	ldr	r2, [pc, #352]	; (800136c <MS5611_Init+0x1ec>)
 800120c:	21ee      	movs	r1, #238	; 0xee
 800120e:	4851      	ldr	r0, [pc, #324]	; (8001354 <MS5611_Init+0x1d4>)
 8001210:	f002 fb76 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[4], 2, 1000);
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2302      	movs	r3, #2
 800121c:	4a54      	ldr	r2, [pc, #336]	; (8001370 <MS5611_Init+0x1f0>)
 800121e:	21ef      	movs	r1, #239	; 0xef
 8001220:	484c      	ldr	r0, [pc, #304]	; (8001354 <MS5611_Init+0x1d4>)
 8001222:	f002 fc6b 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC3, 1, 1000);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	4a51      	ldr	r2, [pc, #324]	; (8001374 <MS5611_Init+0x1f4>)
 8001230:	21ee      	movs	r1, #238	; 0xee
 8001232:	4848      	ldr	r0, [pc, #288]	; (8001354 <MS5611_Init+0x1d4>)
 8001234:	f002 fb64 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[6], 2, 1000);
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <MS5611_Init+0x1f8>)
 8001242:	21ef      	movs	r1, #239	; 0xef
 8001244:	4843      	ldr	r0, [pc, #268]	; (8001354 <MS5611_Init+0x1d4>)
 8001246:	f002 fc59 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC4, 1, 1000);
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2301      	movs	r3, #1
 8001252:	4a4a      	ldr	r2, [pc, #296]	; (800137c <MS5611_Init+0x1fc>)
 8001254:	21ee      	movs	r1, #238	; 0xee
 8001256:	483f      	ldr	r0, [pc, #252]	; (8001354 <MS5611_Init+0x1d4>)
 8001258:	f002 fb52 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[8], 2, 1000);
 800125c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2302      	movs	r3, #2
 8001264:	4a46      	ldr	r2, [pc, #280]	; (8001380 <MS5611_Init+0x200>)
 8001266:	21ef      	movs	r1, #239	; 0xef
 8001268:	483a      	ldr	r0, [pc, #232]	; (8001354 <MS5611_Init+0x1d4>)
 800126a:	f002 fc47 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC5, 1, 1000);
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	4a43      	ldr	r2, [pc, #268]	; (8001384 <MS5611_Init+0x204>)
 8001278:	21ee      	movs	r1, #238	; 0xee
 800127a:	4836      	ldr	r0, [pc, #216]	; (8001354 <MS5611_Init+0x1d4>)
 800127c:	f002 fb40 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[10], 2, 1000);
 8001280:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2302      	movs	r3, #2
 8001288:	4a3f      	ldr	r2, [pc, #252]	; (8001388 <MS5611_Init+0x208>)
 800128a:	21ef      	movs	r1, #239	; 0xef
 800128c:	4831      	ldr	r0, [pc, #196]	; (8001354 <MS5611_Init+0x1d4>)
 800128e:	f002 fc35 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMC6, 1, 1000);
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2301      	movs	r3, #1
 800129a:	4a3c      	ldr	r2, [pc, #240]	; (800138c <MS5611_Init+0x20c>)
 800129c:	21ee      	movs	r1, #238	; 0xee
 800129e:	482d      	ldr	r0, [pc, #180]	; (8001354 <MS5611_Init+0x1d4>)
 80012a0:	f002 fb2e 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[12], 2, 1000);
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2302      	movs	r3, #2
 80012ac:	4a38      	ldr	r2, [pc, #224]	; (8001390 <MS5611_Init+0x210>)
 80012ae:	21ef      	movs	r1, #239	; 0xef
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <MS5611_Init+0x1d4>)
 80012b2:	f002 fc23 	bl	8003afc <HAL_I2C_Master_Receive>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_PROMCRC, 1,
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	4a35      	ldr	r2, [pc, #212]	; (8001394 <MS5611_Init+0x214>)
 80012c0:	21ee      	movs	r1, #238	; 0xee
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <MS5611_Init+0x1d4>)
 80012c4:	f002 fb1c 	bl	8003900 <HAL_I2C_Master_Transmit>
			1000);
	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &fab_data[14], 2, 1000);
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2302      	movs	r3, #2
 80012d0:	4a31      	ldr	r2, [pc, #196]	; (8001398 <MS5611_Init+0x218>)
 80012d2:	21ef      	movs	r1, #239	; 0xef
 80012d4:	481f      	ldr	r0, [pc, #124]	; (8001354 <MS5611_Init+0x1d4>)
 80012d6:	f002 fc11 	bl	8003afc <HAL_I2C_Master_Receive>

	for (uint8_t x = 2; x < 14; x += 2) {
 80012da:	2302      	movs	r3, #2
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	e016      	b.n	800130e <MS5611_Init+0x18e>
		C[(x / 2) - 1] = fab_data[x] << 8 | fab_data[x + 1];
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <MS5611_Init+0x1e0>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	79bb      	ldrb	r3, [r7, #6]
 80012ec:	3301      	adds	r3, #1
 80012ee:	491c      	ldr	r1, [pc, #112]	; (8001360 <MS5611_Init+0x1e0>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4313      	orrs	r3, r2
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	085b      	lsrs	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3b01      	subs	r3, #1
 8001300:	b291      	uxth	r1, r2
 8001302:	4a26      	ldr	r2, [pc, #152]	; (800139c <MS5611_Init+0x21c>)
 8001304:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t x = 2; x < 14; x += 2) {
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	3302      	adds	r3, #2
 800130c:	71bb      	strb	r3, [r7, #6]
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	2b0d      	cmp	r3, #13
 8001312:	d9e5      	bls.n	80012e0 <MS5611_Init+0x160>
	}

	BASE = 0;
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <MS5611_Init+0x220>)
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 800131c:	2300      	movs	r3, #0
 800131e:	717b      	strb	r3, [r7, #5]
 8001320:	e009      	b.n	8001336 <MS5611_Init+0x1b6>
	{
		BASE_P[i] = MS5611_ReadMedian_Altitude();
 8001322:	797c      	ldrb	r4, [r7, #5]
 8001324:	f000 fa70 	bl	8001808 <MS5611_ReadMedian_Altitude>
 8001328:	4602      	mov	r2, r0
 800132a:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <MS5611_Init+0x224>)
 800132c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t i = 0 ; i < sizeof(BASE_P) / sizeof(BASE_P[0]) ; i++)
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	3301      	adds	r3, #1
 8001334:	717b      	strb	r3, [r7, #5]
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d9f2      	bls.n	8001322 <MS5611_Init+0x1a2>
	}
	BASE = Array_sort_MS(BASE_P, sizeof(BASE_P) / sizeof(BASE_P[0]));
 800133c:	2103      	movs	r1, #3
 800133e:	4819      	ldr	r0, [pc, #100]	; (80013a4 <MS5611_Init+0x224>)
 8001340:	f000 fa89 	bl	8001856 <Array_sort_MS>
 8001344:	4602      	mov	r2, r0
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <MS5611_Init+0x220>)
 8001348:	601a      	str	r2, [r3, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	200007f8 	.word	0x200007f8
 8001358:	40010800 	.word	0x40010800
 800135c:	20000002 	.word	0x20000002
 8001360:	2000023c 	.word	0x2000023c
 8001364:	20000003 	.word	0x20000003
 8001368:	2000023e 	.word	0x2000023e
 800136c:	20000004 	.word	0x20000004
 8001370:	20000240 	.word	0x20000240
 8001374:	20000005 	.word	0x20000005
 8001378:	20000242 	.word	0x20000242
 800137c:	20000006 	.word	0x20000006
 8001380:	20000244 	.word	0x20000244
 8001384:	20000007 	.word	0x20000007
 8001388:	20000246 	.word	0x20000246
 800138c:	20000008 	.word	0x20000008
 8001390:	20000248 	.word	0x20000248
 8001394:	20000009 	.word	0x20000009
 8001398:	2000024a 	.word	0x2000024a
 800139c:	20000254 	.word	0x20000254
 80013a0:	20000238 	.word	0x20000238
 80013a4:	2000022c 	.word	0x2000022c

080013a8 <MS5611_ReadTemperature>:

float MS5611_ReadTemperature(void)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D2_4096, 1, 1000);
 80013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2301      	movs	r3, #1
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <MS5611_ReadTemperature+0xfc>)
 80013b8:	21ee      	movs	r1, #238	; 0xee
 80013ba:	483b      	ldr	r0, [pc, #236]	; (80014a8 <MS5611_ReadTemperature+0x100>)
 80013bc:	f002 faa0 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 80013c0:	2009      	movs	r0, #9
 80013c2:	f001 fdf9 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <MS5611_ReadTemperature+0x104>)
 80013d0:	21ee      	movs	r1, #238	; 0xee
 80013d2:	4835      	ldr	r0, [pc, #212]	; (80014a8 <MS5611_ReadTemperature+0x100>)
 80013d4:	f002 fa94 	bl	8003900 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, ADC, 3, 1000);
 80013d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2303      	movs	r3, #3
 80013e0:	4a33      	ldr	r2, [pc, #204]	; (80014b0 <MS5611_ReadTemperature+0x108>)
 80013e2:	21ef      	movs	r1, #239	; 0xef
 80013e4:	4830      	ldr	r0, [pc, #192]	; (80014a8 <MS5611_ReadTemperature+0x100>)
 80013e6:	f002 fb89 	bl	8003afc <HAL_I2C_Master_Receive>
	D2 = ADC[0] << 16 | ADC[1] << 8 | ADC[2];
 80013ea:	4b31      	ldr	r3, [pc, #196]	; (80014b0 <MS5611_ReadTemperature+0x108>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <MS5611_ReadTemperature+0x108>)
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	4313      	orrs	r3, r2
 80013f8:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <MS5611_ReadTemperature+0x108>)
 80013fa:	7892      	ldrb	r2, [r2, #2]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	461a      	mov	r2, r3
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <MS5611_ReadTemperature+0x10c>)
 8001402:	601a      	str	r2, [r3, #0]

	dT = D2 - C[4] * pow(2, 8);
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <MS5611_ReadTemperature+0x10c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7fe ffeb 	bl	80003e4 <__aeabi_ui2d>
 800140e:	4604      	mov	r4, r0
 8001410:	460d      	mov	r5, r1
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MS5611_ReadTemperature+0x110>)
 8001414:	891b      	ldrh	r3, [r3, #8]
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fff4 	bl	8000404 <__aeabi_i2d>
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MS5611_ReadTemperature+0x114>)
 8001422:	f7ff f859 	bl	80004d8 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4620      	mov	r0, r4
 800142c:	4629      	mov	r1, r5
 800142e:	f7fe fe9b 	bl	8000168 <__aeabi_dsub>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fafd 	bl	8000a38 <__aeabi_d2iz>
 800143e:	4602      	mov	r2, r0
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MS5611_ReadTemperature+0x118>)
 8001442:	601a      	str	r2, [r3, #0]
	TEMP = (2000 + dT * C[5] / pow(2, 23)) / 100.0;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MS5611_ReadTemperature+0x110>)
 8001446:	895b      	ldrh	r3, [r3, #10]
 8001448:	461a      	mov	r2, r3
 800144a:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MS5611_ReadTemperature+0x118>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fb03 f302 	mul.w	r3, r3, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f7fe ffd6 	bl	8000404 <__aeabi_i2d>
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MS5611_ReadTemperature+0x11c>)
 800145e:	f7ff f965 	bl	800072c <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	4618      	mov	r0, r3
 8001468:	4621      	mov	r1, r4
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MS5611_ReadTemperature+0x120>)
 8001470:	f7fe fe7c 	bl	800016c <__adddf3>
 8001474:	4603      	mov	r3, r0
 8001476:	460c      	mov	r4, r1
 8001478:	4618      	mov	r0, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MS5611_ReadTemperature+0x124>)
 8001482:	f7ff f953 	bl	800072c <__aeabi_ddiv>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	4618      	mov	r0, r3
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff fb1b 	bl	8000ac8 <__aeabi_d2f>
 8001492:	4602      	mov	r2, r0
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MS5611_ReadTemperature+0x128>)
 8001496:	601a      	str	r2, [r3, #0]
	return TEMP;
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <MS5611_ReadTemperature+0x128>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bdb0      	pop	{r4, r5, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000001 	.word	0x20000001
 80014a8:	200007f8 	.word	0x200007f8
 80014ac:	20000268 	.word	0x20000268
 80014b0:	2000024c 	.word	0x2000024c
 80014b4:	20000264 	.word	0x20000264
 80014b8:	20000254 	.word	0x20000254
 80014bc:	40700000 	.word	0x40700000
 80014c0:	2000026c 	.word	0x2000026c
 80014c4:	41600000 	.word	0x41600000
 80014c8:	409f4000 	.word	0x409f4000
 80014cc:	40590000 	.word	0x40590000
 80014d0:	20000298 	.word	0x20000298

080014d4 <MS5611_ReadPressure>:

float MS5611_ReadPressure(void) {
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af02      	add	r7, sp, #8

	 dT = D2 - ((int32_t) C[4] << 8);
	 float T = (2000 + ((int32_t) (dT * C[5]) >> 23)) / 100.0;
	 */

	T = MS5611_ReadTemperature();
 80014da:	f7ff ff65 	bl	80013a8 <MS5611_ReadTemperature>
 80014de:	4602      	mov	r2, r0
 80014e0:	4b86      	ldr	r3, [pc, #536]	; (80016fc <MS5611_ReadPressure+0x228>)
 80014e2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &D1_4096, 1, 1000);
 80014e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	4a84      	ldr	r2, [pc, #528]	; (8001700 <MS5611_ReadPressure+0x22c>)
 80014ee:	21ee      	movs	r1, #238	; 0xee
 80014f0:	4884      	ldr	r0, [pc, #528]	; (8001704 <MS5611_ReadPressure+0x230>)
 80014f2:	f002 fa05 	bl	8003900 <HAL_I2C_Master_Transmit>
	HAL_Delay(9);
 80014f6:	2009      	movs	r0, #9
 80014f8:	f001 fd5e 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Transmit(&hi2c1, MS5611_WRITE_ADRESS, &Read_ADC, 1, 1000);
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	4a80      	ldr	r2, [pc, #512]	; (8001708 <MS5611_ReadPressure+0x234>)
 8001506:	21ee      	movs	r1, #238	; 0xee
 8001508:	487e      	ldr	r0, [pc, #504]	; (8001704 <MS5611_ReadPressure+0x230>)
 800150a:	f002 f9f9 	bl	8003900 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, MS5611_READ_ADRESS, &ADC[3], 3, 1000);
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2303      	movs	r3, #3
 8001516:	4a7d      	ldr	r2, [pc, #500]	; (800170c <MS5611_ReadPressure+0x238>)
 8001518:	21ef      	movs	r1, #239	; 0xef
 800151a:	487a      	ldr	r0, [pc, #488]	; (8001704 <MS5611_ReadPressure+0x230>)
 800151c:	f002 faee 	bl	8003afc <HAL_I2C_Master_Receive>
	D1 = ADC[3] << 16 | ADC[4] << 8 | ADC[5];
 8001520:	4b7b      	ldr	r3, [pc, #492]	; (8001710 <MS5611_ReadPressure+0x23c>)
 8001522:	78db      	ldrb	r3, [r3, #3]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <MS5611_ReadPressure+0x23c>)
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	4313      	orrs	r3, r2
 800152e:	4a78      	ldr	r2, [pc, #480]	; (8001710 <MS5611_ReadPressure+0x23c>)
 8001530:	7952      	ldrb	r2, [r2, #5]
 8001532:	4313      	orrs	r3, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4b77      	ldr	r3, [pc, #476]	; (8001714 <MS5611_ReadPressure+0x240>)
 8001538:	601a      	str	r2, [r3, #0]

	if (T < 20 && T > -15) {
 800153a:	4b70      	ldr	r3, [pc, #448]	; (80016fc <MS5611_ReadPressure+0x228>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4976      	ldr	r1, [pc, #472]	; (8001718 <MS5611_ReadPressure+0x244>)
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fdbd 	bl	80010c0 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d05f      	beq.n	800160c <MS5611_ReadPressure+0x138>
 800154c:	4b6b      	ldr	r3, [pc, #428]	; (80016fc <MS5611_ReadPressure+0x228>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4972      	ldr	r1, [pc, #456]	; (800171c <MS5611_ReadPressure+0x248>)
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fdd2 	bl	80010fc <__aeabi_fcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d056      	beq.n	800160c <MS5611_ReadPressure+0x138>
		dT2 = (dT * dT) >> 31;
 800155e:	4b70      	ldr	r3, [pc, #448]	; (8001720 <MS5611_ReadPressure+0x24c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6f      	ldr	r2, [pc, #444]	; (8001720 <MS5611_ReadPressure+0x24c>)
 8001564:	6812      	ldr	r2, [r2, #0]
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	4a6d      	ldr	r2, [pc, #436]	; (8001724 <MS5611_ReadPressure+0x250>)
 800156e:	6013      	str	r3, [r2, #0]
		OFF2 = 5 * (T - 2000) * (T - 2000) / 2;
 8001570:	4b62      	ldr	r3, [pc, #392]	; (80016fc <MS5611_ReadPressure+0x228>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	496c      	ldr	r1, [pc, #432]	; (8001728 <MS5611_ReadPressure+0x254>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fafa 	bl	8000b70 <__aeabi_fsub>
 800157c:	4603      	mov	r3, r0
 800157e:	496b      	ldr	r1, [pc, #428]	; (800172c <MS5611_ReadPressure+0x258>)
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fbff 	bl	8000d84 <__aeabi_fmul>
 8001586:	4603      	mov	r3, r0
 8001588:	461e      	mov	r6, r3
 800158a:	4b5c      	ldr	r3, [pc, #368]	; (80016fc <MS5611_ReadPressure+0x228>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4966      	ldr	r1, [pc, #408]	; (8001728 <MS5611_ReadPressure+0x254>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff faed 	bl	8000b70 <__aeabi_fsub>
 8001596:	4603      	mov	r3, r0
 8001598:	4619      	mov	r1, r3
 800159a:	4630      	mov	r0, r6
 800159c:	f7ff fbf2 	bl	8000d84 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fca0 	bl	8000eec <__aeabi_fdiv>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fdae 	bl	8001110 <__aeabi_f2lz>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	495d      	ldr	r1, [pc, #372]	; (8001730 <MS5611_ReadPressure+0x25c>)
 80015ba:	e9c1 2300 	strd	r2, r3, [r1]
		SENS2 = 5 * (T - 2000) * (T - 2000) / 4;
 80015be:	4b4f      	ldr	r3, [pc, #316]	; (80016fc <MS5611_ReadPressure+0x228>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4959      	ldr	r1, [pc, #356]	; (8001728 <MS5611_ReadPressure+0x254>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fad3 	bl	8000b70 <__aeabi_fsub>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4957      	ldr	r1, [pc, #348]	; (800172c <MS5611_ReadPressure+0x258>)
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fbd8 	bl	8000d84 <__aeabi_fmul>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461e      	mov	r6, r3
 80015d8:	4b48      	ldr	r3, [pc, #288]	; (80016fc <MS5611_ReadPressure+0x228>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4952      	ldr	r1, [pc, #328]	; (8001728 <MS5611_ReadPressure+0x254>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fac6 	bl	8000b70 <__aeabi_fsub>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff fbcb 	bl	8000d84 <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fc79 	bl	8000eec <__aeabi_fdiv>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd87 	bl	8001110 <__aeabi_f2lz>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	494b      	ldr	r1, [pc, #300]	; (8001734 <MS5611_ReadPressure+0x260>)
 8001608:	e9c1 2300 	strd	r2, r3, [r1]
	}
	OFF = (((int64_t) (C[1])) << 16) + ((C[3] * dT) >> 7);
 800160c:	4b4a      	ldr	r3, [pc, #296]	; (8001738 <MS5611_ReadPressure+0x264>)
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	b29a      	uxth	r2, r3
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	0c15      	lsrs	r5, r2, #16
 8001618:	0414      	lsls	r4, r2, #16
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <MS5611_ReadPressure+0x264>)
 800161c:	88db      	ldrh	r3, [r3, #6]
 800161e:	461a      	mov	r2, r3
 8001620:	4b3f      	ldr	r3, [pc, #252]	; (8001720 <MS5611_ReadPressure+0x24c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	fb03 f302 	mul.w	r3, r3, r2
 8001628:	11db      	asrs	r3, r3, #7
 800162a:	461a      	mov	r2, r3
 800162c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001630:	18a0      	adds	r0, r4, r2
 8001632:	eb45 0103 	adc.w	r1, r5, r3
 8001636:	4603      	mov	r3, r0
 8001638:	460c      	mov	r4, r1
 800163a:	4a40      	ldr	r2, [pc, #256]	; (800173c <MS5611_ReadPressure+0x268>)
 800163c:	e9c2 3400 	strd	r3, r4, [r2]
	SENS = (((int64_t) (C[0])) << 15) + ((C[2] * dT) >> 8);
 8001640:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <MS5611_ReadPressure+0x264>)
 8001642:	881b      	ldrh	r3, [r3, #0]
 8001644:	b299      	uxth	r1, r3
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0500 	mov.w	r5, #0
 800164e:	f04f 0600 	mov.w	r6, #0
 8001652:	03d6      	lsls	r6, r2, #15
 8001654:	ea46 4651 	orr.w	r6, r6, r1, lsr #17
 8001658:	03cd      	lsls	r5, r1, #15
 800165a:	4a37      	ldr	r2, [pc, #220]	; (8001738 <MS5611_ReadPressure+0x264>)
 800165c:	8892      	ldrh	r2, [r2, #4]
 800165e:	4611      	mov	r1, r2
 8001660:	4a2f      	ldr	r2, [pc, #188]	; (8001720 <MS5611_ReadPressure+0x24c>)
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	fb02 f201 	mul.w	r2, r2, r1
 8001668:	1212      	asrs	r2, r2, #8
 800166a:	4611      	mov	r1, r2
 800166c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001670:	186b      	adds	r3, r5, r1
 8001672:	eb46 0402 	adc.w	r4, r6, r2
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <MS5611_ReadPressure+0x26c>)
 8001678:	e9c2 3400 	strd	r3, r4, [r2]
	PRESS = ((((D1 * SENS) >> 21) - OFF) >> 15) / 100.0;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <MS5611_ReadPressure+0x240>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <MS5611_ReadPressure+0x26c>)
 8001688:	cb18      	ldmia	r3, {r3, r4}
 800168a:	fb03 f502 	mul.w	r5, r3, r2
 800168e:	fb01 f004 	mul.w	r0, r1, r4
 8001692:	4428      	add	r0, r5
 8001694:	fba1 1203 	umull	r1, r2, r1, r3
 8001698:	1883      	adds	r3, r0, r2
 800169a:	461a      	mov	r2, r3
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	0d4b      	lsrs	r3, r1, #21
 80016a6:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
 80016aa:	1554      	asrs	r4, r2, #21
 80016ac:	4a23      	ldr	r2, [pc, #140]	; (800173c <MS5611_ReadPressure+0x268>)
 80016ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	eb64 0402 	sbc.w	r4, r4, r2
 80016b8:	461d      	mov	r5, r3
 80016ba:	4626      	mov	r6, r4
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f04f 0400 	mov.w	r4, #0
 80016c4:	0beb      	lsrs	r3, r5, #15
 80016c6:	ea43 4346 	orr.w	r3, r3, r6, lsl #17
 80016ca:	13f4      	asrs	r4, r6, #15
 80016cc:	4618      	mov	r0, r3
 80016ce:	4621      	mov	r1, r4
 80016d0:	f7fe fed4 	bl	800047c <__aeabi_l2d>
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MS5611_ReadPressure+0x270>)
 80016da:	f7ff f827 	bl	800072c <__aeabi_ddiv>
 80016de:	4603      	mov	r3, r0
 80016e0:	460c      	mov	r4, r1
 80016e2:	4618      	mov	r0, r3
 80016e4:	4621      	mov	r1, r4
 80016e6:	f7ff f9ef 	bl	8000ac8 <__aeabi_d2f>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <MS5611_ReadPressure+0x274>)
 80016ee:	601a      	str	r2, [r3, #0]
	 SENS = SENS - SENS2;


	 PRESS = ((D1 * SENS / pow(2, 21) - OFF) / pow(2, 15)) / 100.0;
	 */
	return PRESS;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MS5611_ReadPressure+0x274>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3704      	adds	r7, #4
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	200002a4 	.word	0x200002a4
 8001700:	20000000 	.word	0x20000000
 8001704:	200007f8 	.word	0x200007f8
 8001708:	20000268 	.word	0x20000268
 800170c:	2000024f 	.word	0x2000024f
 8001710:	2000024c 	.word	0x2000024c
 8001714:	20000260 	.word	0x20000260
 8001718:	41a00000 	.word	0x41a00000
 800171c:	c1700000 	.word	0xc1700000
 8001720:	2000026c 	.word	0x2000026c
 8001724:	20000270 	.word	0x20000270
 8001728:	44fa0000 	.word	0x44fa0000
 800172c:	40a00000 	.word	0x40a00000
 8001730:	20000288 	.word	0x20000288
 8001734:	20000290 	.word	0x20000290
 8001738:	20000254 	.word	0x20000254
 800173c:	20000278 	.word	0x20000278
 8001740:	20000280 	.word	0x20000280
 8001744:	40590000 	.word	0x40590000
 8001748:	2000029c 	.word	0x2000029c
 800174c:	00000000 	.word	0x00000000

08001750 <MS5611_ReadAltitude>:

float MS5611_ReadAltitude(void)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	float P = MS5611_ReadPressure();
 8001756:	f7ff febd 	bl	80014d4 <MS5611_ReadPressure>
 800175a:	6078      	str	r0, [r7, #4]
	//float T0 = MS5611_ReadTemperature();
	//ALT = (float) (44330.0 * (1 - pow((PRESS / P0), (1 / 5.255))));
	ALT = ((pow((P0/P), (1/5.257))-1) * (*pte + 273.15)) / 0.0065;  // Altitude with temperature and pressure
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <MS5611_ReadAltitude+0xa8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fbc2 	bl	8000eec <__aeabi_fdiv>
 8001768:	4603      	mov	r3, r0
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe fe5c 	bl	8000428 <__aeabi_f2d>
 8001770:	a31b      	add	r3, pc, #108	; (adr r3, 80017e0 <MS5611_ReadAltitude+0x90>)
 8001772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001776:	f00a fbad 	bl	800bed4 <pow>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <MS5611_ReadAltitude+0xac>)
 8001780:	f7fe fcf2 	bl	8000168 <__aeabi_dsub>
 8001784:	4603      	mov	r3, r0
 8001786:	460c      	mov	r4, r1
 8001788:	4625      	mov	r5, r4
 800178a:	461c      	mov	r4, r3
 800178c:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MS5611_ReadAltitude+0xb0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fe48 	bl	8000428 <__aeabi_f2d>
 8001798:	a313      	add	r3, pc, #76	; (adr r3, 80017e8 <MS5611_ReadAltitude+0x98>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fce5 	bl	800016c <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe fe95 	bl	80004d8 <__aeabi_dmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	a30e      	add	r3, pc, #56	; (adr r3, 80017f0 <MS5611_ReadAltitude+0xa0>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7fe ffb6 	bl	800072c <__aeabi_ddiv>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	4618      	mov	r0, r3
 80017c6:	4621      	mov	r1, r4
 80017c8:	f7ff f97e 	bl	8000ac8 <__aeabi_d2f>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <MS5611_ReadAltitude+0xb4>)
 80017d0:	601a      	str	r2, [r3, #0]
	//ALT = (pow(10,log(PRESS/P0)/5.2558797)-1) / (-6.8755856 * pow(10,-6));
	return (ALT /*- BASE*/);  // Offset kullanımı aktif edildi
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MS5611_ReadAltitude+0xb4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	bf00      	nop
 80017e0:	7dee2d4a 	.word	0x7dee2d4a
 80017e4:	3fc85936 	.word	0x3fc85936
 80017e8:	66666666 	.word	0x66666666
 80017ec:	40711266 	.word	0x40711266
 80017f0:	76c8b439 	.word	0x76c8b439
 80017f4:	3f7a9fbe 	.word	0x3f7a9fbe
 80017f8:	2000000c 	.word	0x2000000c
 80017fc:	3ff00000 	.word	0x3ff00000
 8001800:	20000010 	.word	0x20000010
 8001804:	200002a0 	.word	0x200002a0

08001808 <MS5611_ReadMedian_Altitude>:

float MS5611_ReadMedian_Altitude(void)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
	float H[5] = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
	for (uint8_t i = 0 ; i < 5 ; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	75fb      	strb	r3, [r7, #23]
 8001820:	e00c      	b.n	800183c <MS5611_ReadMedian_Altitude+0x34>
		H[i] = MS5611_ReadAltitude();
 8001822:	7dfc      	ldrb	r4, [r7, #23]
 8001824:	f7ff ff94 	bl	8001750 <MS5611_ReadAltitude>
 8001828:	4602      	mov	r2, r0
 800182a:	00a3      	lsls	r3, r4, #2
 800182c:	f107 0118 	add.w	r1, r7, #24
 8001830:	440b      	add	r3, r1
 8001832:	f843 2c18 	str.w	r2, [r3, #-24]
	for (uint8_t i = 0 ; i < 5 ; i++)
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	3301      	adds	r3, #1
 800183a:	75fb      	strb	r3, [r7, #23]
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b04      	cmp	r3, #4
 8001840:	d9ef      	bls.n	8001822 <MS5611_ReadMedian_Altitude+0x1a>
	return Array_sort_MS(H,5);
 8001842:	463b      	mov	r3, r7
 8001844:	2105      	movs	r1, #5
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f805 	bl	8001856 <Array_sort_MS>
 800184c:	4603      	mov	r3, r0
}
 800184e:	4618      	mov	r0, r3
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd90      	pop	{r4, r7, pc}

08001856 <Array_sort_MS>:

float Array_sort_MS(float *array, int n) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]
	int i = 0, j = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
	float temp = 0.0;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < n; i++) {
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e036      	b.n	80018e2 <Array_sort_MS+0x8c>
		for (j = 0; j < n - 1; j++) {
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	e02b      	b.n	80018d2 <Array_sort_MS+0x7c>
			if (array[j] > array[j + 1]) {
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	3301      	adds	r3, #1
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fc33 	bl	80010fc <__aeabi_fcmpgt>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d017      	beq.n	80018cc <Array_sort_MS+0x76>
				temp = array[j];
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	60fb      	str	r3, [r7, #12]
				array[j] = array[j + 1];
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	3301      	adds	r3, #1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	441a      	add	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	440b      	add	r3, r1
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	601a      	str	r2, [r3, #0]
				array[j + 1] = temp;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3301      	adds	r3, #1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	68fa      	ldr	r2, [r7, #12]
 80018ca:	601a      	str	r2, [r3, #0]
		for (j = 0; j < n - 1; j++) {
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	3301      	adds	r3, #1
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbce      	blt.n	800187a <Array_sort_MS+0x24>
	for (i = 0; i < n; i++) {
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbc4      	blt.n	8001874 <Array_sort_MS+0x1e>
			}
		}
	}
	//return array[2];
	return array[n / 2];
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	0fda      	lsrs	r2, r3, #31
 80018ee:	4413      	add	r3, r2
 80018f0:	105b      	asrs	r3, r3, #1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	681b      	ldr	r3, [r3, #0]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190e:	4802      	ldr	r0, [pc, #8]	; (8001918 <SELECT+0x14>)
 8001910:	f001 fe8c 	bl	800362c <HAL_GPIO_WritePin>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40010800 	.word	0x40010800

0800191c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001926:	4802      	ldr	r0, [pc, #8]	; (8001930 <DESELECT+0x14>)
 8001928:	f001 fe80 	bl	800362c <HAL_GPIO_WritePin>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40010800 	.word	0x40010800

08001934 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 800193e:	bf00      	nop
 8001940:	4808      	ldr	r0, [pc, #32]	; (8001964 <SPI_TxByte+0x30>)
 8001942:	f003 ff0d 	bl	8005760 <HAL_SPI_GetState>
 8001946:	4603      	mov	r3, r0
 8001948:	2b01      	cmp	r3, #1
 800194a:	d1f9      	bne.n	8001940 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 800194c:	1df9      	adds	r1, r7, #7
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	2201      	movs	r2, #1
 8001954:	4803      	ldr	r0, [pc, #12]	; (8001964 <SPI_TxByte+0x30>)
 8001956:	f003 fc25 	bl	80051a4 <HAL_SPI_Transmit>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000570 	.word	0x20000570

08001968 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800196e:	23ff      	movs	r3, #255	; 0xff
 8001970:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8001976:	bf00      	nop
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <SPI_RxByte+0x38>)
 800197a:	f003 fef1 	bl	8005760 <HAL_SPI_GetState>
 800197e:	4603      	mov	r3, r0
 8001980:	2b01      	cmp	r3, #1
 8001982:	d1f9      	bne.n	8001978 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8001984:	1dba      	adds	r2, r7, #6
 8001986:	1df9      	adds	r1, r7, #7
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2301      	movs	r3, #1
 8001990:	4803      	ldr	r0, [pc, #12]	; (80019a0 <SPI_RxByte+0x38>)
 8001992:	f003 fd43 	bl	800541c <HAL_SPI_TransmitReceive>
  
  return data;
 8001996:	79bb      	ldrb	r3, [r7, #6]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000570 	.word	0x20000570

080019a4 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80019ac:	f7ff ffdc 	bl	8001968 <SPI_RxByte>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	701a      	strb	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void) 
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms 카운터 준비 */
  Timer2 = 50;
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <SD_ReadyWait+0x34>)
 80019c8:	2232      	movs	r2, #50	; 0x32
 80019ca:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 80019cc:	f7ff ffcc 	bl	8001968 <SPI_RxByte>
  
  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 80019d0:	f7ff ffca 	bl	8001968 <SPI_RxByte>
 80019d4:	4603      	mov	r3, r0
 80019d6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d004      	beq.n	80019e8 <SD_ReadyWait+0x28>
 80019de:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SD_ReadyWait+0x34>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f3      	bne.n	80019d0 <SD_ReadyWait+0x10>
  
  return res;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000f60 	.word	0x20000f60

080019f8 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80019fe:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001a02:	617b      	str	r3, [r7, #20]
  
  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8001a04:	f7ff ff8a 	bl	800191c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e005      	b.n	8001a1a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001a0e:	20ff      	movs	r0, #255	; 0xff
 8001a10:	f7ff ff90 	bl	8001934 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	3301      	adds	r3, #1
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b09      	cmp	r3, #9
 8001a1e:	ddf6      	ble.n	8001a0e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8001a20:	f7ff ff70 	bl	8001904 <SELECT>
  
  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8001a24:	2340      	movs	r3, #64	; 0x40
 8001a26:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001a38:	2395      	movs	r3, #149	; 0x95
 8001a3a:	727b      	strb	r3, [r7, #9]
  
  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e009      	b.n	8001a56 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8001a42:	1d3a      	adds	r2, r7, #4
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff ff72 	bl	8001934 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	3301      	adds	r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	ddf2      	ble.n	8001a42 <SD_PowerOn+0x4a>
  }
  
  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8001a5c:	e002      	b.n	8001a64 <SD_PowerOn+0x6c>
  {
    Count--;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001a64:	f7ff ff80 	bl	8001968 <SPI_RxByte>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d002      	beq.n	8001a74 <SD_PowerOn+0x7c>
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f4      	bne.n	8001a5e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001a74:	f7ff ff52 	bl	800191c <DESELECT>
  SPI_TxByte(0XFF);
 8001a78:	20ff      	movs	r0, #255	; 0xff
 8001a7a:	f7ff ff5b 	bl	8001934 <SPI_TxByte>
  
  PowerFlag = 1;
 8001a7e:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <SD_PowerOn+0x94>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
}
 8001a84:	bf00      	nop
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200002a9 	.word	0x200002a9

08001a90 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001a94:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <SD_PowerOff+0x14>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200002a9 	.word	0x200002a9

08001aa8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001aac:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <SD_CheckPower+0x10>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	200002a9 	.word	0x200002a9

08001abc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <SD_RxDataBlock+0x68>)
 8001ac8:	220a      	movs	r2, #10
 8001aca:	701a      	strb	r2, [r3, #0]
  
  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8001acc:	f7ff ff4c 	bl	8001968 <SPI_RxByte>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d104      	bne.n	8001ae4 <SD_RxDataBlock+0x28>
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <SD_RxDataBlock+0x68>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f3      	bne.n	8001acc <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001ae4:	7bfb      	ldrb	r3, [r7, #15]
 8001ae6:	2bfe      	cmp	r3, #254	; 0xfe
 8001ae8:	d001      	beq.n	8001aee <SD_RxDataBlock+0x32>
    return FALSE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e016      	b.n	8001b1c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff55 	bl	80019a4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff4f 	bl	80019a4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3b02      	subs	r3, #2
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1ed      	bne.n	8001aee <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8001b12:	f7ff ff29 	bl	8001968 <SPI_RxByte>
  SPI_RxByte();
 8001b16:	f7ff ff27 	bl	8001968 <SPI_RxByte>
  
  return TRUE;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000f61 	.word	0x20000f61

08001b28 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001b38:	f7ff ff42 	bl	80019c0 <SD_ReadyWait>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2bff      	cmp	r3, #255	; 0xff
 8001b40:	d001      	beq.n	8001b46 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e040      	b.n	8001bc8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fef3 	bl	8001934 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8001b4e:	78fb      	ldrb	r3, [r7, #3]
 8001b50:	2bfd      	cmp	r3, #253	; 0xfd
 8001b52:	d031      	beq.n	8001bb8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fee7 	bl	8001934 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fee0 	bl	8001934 <SPI_TxByte>
    } while (--wc);
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	73bb      	strb	r3, [r7, #14]
 8001b7a:	7bbb      	ldrb	r3, [r7, #14]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1eb      	bne.n	8001b58 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001b80:	f7ff fef2 	bl	8001968 <SPI_RxByte>
    SPI_RxByte();
 8001b84:	f7ff fef0 	bl	8001968 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001b88:	e00b      	b.n	8001ba2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8001b8a:	f7ff feed 	bl	8001968 <SPI_RxByte>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001b92:	7bfb      	ldrb	r3, [r7, #15]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d006      	beq.n	8001baa <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8001b9c:	7b7b      	ldrb	r3, [r7, #13]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001ba2:	7b7b      	ldrb	r3, [r7, #13]
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d9f0      	bls.n	8001b8a <SD_TxDataBlock+0x62>
 8001ba8:	e000      	b.n	8001bac <SD_TxDataBlock+0x84>
        break;
 8001baa:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8001bac:	bf00      	nop
 8001bae:	f7ff fedb 	bl	8001968 <SPI_RxByte>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0fa      	beq.n	8001bae <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d101      	bne.n	8001bc6 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001bdc:	f7ff fef0 	bl	80019c0 <SD_ReadyWait>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d001      	beq.n	8001bea <SD_SendCmd+0x1a>
    return 0xFF;
 8001be6:	23ff      	movs	r3, #255	; 0xff
 8001be8:	e040      	b.n	8001c6c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fea1 	bl	8001934 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	0e1b      	lsrs	r3, r3, #24
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe9b 	bl	8001934 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	0c1b      	lsrs	r3, r3, #16
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fe95 	bl	8001934 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fe8f 	bl	8001934 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fe8a 	bl	8001934 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b40      	cmp	r3, #64	; 0x40
 8001c28:	d101      	bne.n	8001c2e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001c2a:	2395      	movs	r3, #149	; 0x95
 8001c2c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2b48      	cmp	r3, #72	; 0x48
 8001c32:	d101      	bne.n	8001c38 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001c34:	2387      	movs	r3, #135	; 0x87
 8001c36:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fe7a 	bl	8001934 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b4c      	cmp	r3, #76	; 0x4c
 8001c44:	d101      	bne.n	8001c4a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001c46:	f7ff fe8f 	bl	8001968 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001c4e:	f7ff fe8b 	bl	8001968 <SPI_RxByte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001c56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da05      	bge.n	8001c6a <SD_SendCmd+0x9a>
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	3b01      	subs	r3, #1
 8001c62:	73bb      	strb	r3, [r7, #14]
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f1      	bne.n	8001c4e <SD_SendCmd+0x7e>
  
  return res;
 8001c6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d5      	b.n	8001e34 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <SD_disk_initialize+0x1c8>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <SD_disk_initialize+0x2a>
    return Stat;        
 8001c96:	4b69      	ldr	r3, [pc, #420]	; (8001e3c <SD_disk_initialize+0x1c8>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	e0ca      	b.n	8001e34 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001c9e:	f7ff feab 	bl	80019f8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001ca2:	f7ff fe2f 	bl	8001904 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001caa:	2100      	movs	r1, #0
 8001cac:	2040      	movs	r0, #64	; 0x40
 8001cae:	f7ff ff8f 	bl	8001bd0 <SD_SendCmd>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 80a5 	bne.w	8001e04 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001cba:	4b61      	ldr	r3, [pc, #388]	; (8001e40 <SD_disk_initialize+0x1cc>)
 8001cbc:	2264      	movs	r2, #100	; 0x64
 8001cbe:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001cc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001cc4:	2048      	movs	r0, #72	; 0x48
 8001cc6:	f7ff ff83 	bl	8001bd0 <SD_SendCmd>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d158      	bne.n	8001d82 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e00c      	b.n	8001cf0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001cd6:	7bfc      	ldrb	r4, [r7, #15]
 8001cd8:	f7ff fe46 	bl	8001968 <SPI_RxByte>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4423      	add	r3, r4
 8001ce6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d9ef      	bls.n	8001cd6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001cf6:	7abb      	ldrb	r3, [r7, #10]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	f040 8083 	bne.w	8001e04 <SD_disk_initialize+0x190>
 8001cfe:	7afb      	ldrb	r3, [r7, #11]
 8001d00:	2baa      	cmp	r3, #170	; 0xaa
 8001d02:	d17f      	bne.n	8001e04 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001d04:	2100      	movs	r1, #0
 8001d06:	2077      	movs	r0, #119	; 0x77
 8001d08:	f7ff ff62 	bl	8001bd0 <SD_SendCmd>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d807      	bhi.n	8001d22 <SD_disk_initialize+0xae>
 8001d12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d16:	2069      	movs	r0, #105	; 0x69
 8001d18:	f7ff ff5a 	bl	8001bd0 <SD_SendCmd>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001d22:	4b47      	ldr	r3, [pc, #284]	; (8001e40 <SD_disk_initialize+0x1cc>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1eb      	bne.n	8001d04 <SD_disk_initialize+0x90>
 8001d2c:	e000      	b.n	8001d30 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001d2e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001d30:	4b43      	ldr	r3, [pc, #268]	; (8001e40 <SD_disk_initialize+0x1cc>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d064      	beq.n	8001e04 <SD_disk_initialize+0x190>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	207a      	movs	r0, #122	; 0x7a
 8001d3e:	f7ff ff47 	bl	8001bd0 <SD_SendCmd>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d15d      	bne.n	8001e04 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e00c      	b.n	8001d68 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001d4e:	7bfc      	ldrb	r4, [r7, #15]
 8001d50:	f7ff fe0a 	bl	8001968 <SPI_RxByte>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	f107 0310 	add.w	r3, r7, #16
 8001d5c:	4423      	add	r3, r4
 8001d5e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	3301      	adds	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d9ef      	bls.n	8001d4e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001d6e:	7a3b      	ldrb	r3, [r7, #8]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SD_disk_initialize+0x108>
 8001d78:	2306      	movs	r3, #6
 8001d7a:	e000      	b.n	8001d7e <SD_disk_initialize+0x10a>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	73bb      	strb	r3, [r7, #14]
 8001d80:	e040      	b.n	8001e04 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001d82:	2100      	movs	r1, #0
 8001d84:	2077      	movs	r0, #119	; 0x77
 8001d86:	f7ff ff23 	bl	8001bd0 <SD_SendCmd>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d808      	bhi.n	8001da2 <SD_disk_initialize+0x12e>
 8001d90:	2100      	movs	r1, #0
 8001d92:	2069      	movs	r0, #105	; 0x69
 8001d94:	f7ff ff1c 	bl	8001bd0 <SD_SendCmd>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d801      	bhi.n	8001da2 <SD_disk_initialize+0x12e>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e000      	b.n	8001da4 <SD_disk_initialize+0x130>
 8001da2:	2301      	movs	r3, #1
 8001da4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001da6:	7bbb      	ldrb	r3, [r7, #14]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d10e      	bne.n	8001dca <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001dac:	2100      	movs	r1, #0
 8001dae:	2077      	movs	r0, #119	; 0x77
 8001db0:	f7ff ff0e 	bl	8001bd0 <SD_SendCmd>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d80e      	bhi.n	8001dd8 <SD_disk_initialize+0x164>
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2069      	movs	r0, #105	; 0x69
 8001dbe:	f7ff ff07 	bl	8001bd0 <SD_SendCmd>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001dc8:	e00d      	b.n	8001de6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001dca:	2100      	movs	r1, #0
 8001dcc:	2041      	movs	r0, #65	; 0x41
 8001dce:	f7ff feff 	bl	8001bd0 <SD_SendCmd>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <SD_disk_initialize+0x1cc>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e1      	bne.n	8001da6 <SD_disk_initialize+0x132>
 8001de2:	e000      	b.n	8001de6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001de4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <SD_disk_initialize+0x1cc>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <SD_disk_initialize+0x18c>
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	2050      	movs	r0, #80	; 0x50
 8001df6:	f7ff feeb 	bl	8001bd0 <SD_SendCmd>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001e04:	4a0f      	ldr	r2, [pc, #60]	; (8001e44 <SD_disk_initialize+0x1d0>)
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001e0a:	f7ff fd87 	bl	800191c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001e0e:	f7ff fdab 	bl	8001968 <SPI_RxByte>
  
  if (type) 
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001e18:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <SD_disk_initialize+0x1c8>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SD_disk_initialize+0x1c8>)
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e001      	b.n	8001e2e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001e2a:	f7ff fe31 	bl	8001a90 <SD_PowerOff>
  }
  
  return Stat;
 8001e2e:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <SD_disk_initialize+0x1c8>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	b2db      	uxtb	r3, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	20000f61 	.word	0x20000f61
 8001e44:	200002a8 	.word	0x200002a8

08001e48 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e002      	b.n	8001e62 <SD_disk_status+0x1a>
  
  return Stat;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <SD_disk_status+0x24>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	b2db      	uxtb	r3, r3
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	20000014 	.word	0x20000014

08001e70 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <SD_disk_read+0x1c>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <SD_disk_read+0x20>
    return RES_PARERR;
 8001e8c:	2304      	movs	r3, #4
 8001e8e:	e051      	b.n	8001f34 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001e90:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <SD_disk_read+0xcc>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e048      	b.n	8001f34 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001ea2:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <SD_disk_read+0xd0>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001eb4:	f7ff fd26 	bl	8001904 <SELECT>
  
  if (count == 1) 
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d111      	bne.n	8001ee2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	2051      	movs	r0, #81	; 0x51
 8001ec2:	f7ff fe85 	bl	8001bd0 <SD_SendCmd>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d129      	bne.n	8001f20 <SD_disk_read+0xb0>
 8001ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ed0:	68b8      	ldr	r0, [r7, #8]
 8001ed2:	f7ff fdf3 	bl	8001abc <SD_RxDataBlock>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d021      	beq.n	8001f20 <SD_disk_read+0xb0>
      count = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	e01e      	b.n	8001f20 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	2052      	movs	r0, #82	; 0x52
 8001ee6:	f7ff fe73 	bl	8001bd0 <SD_SendCmd>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d117      	bne.n	8001f20 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ef0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef4:	68b8      	ldr	r0, [r7, #8]
 8001ef6:	f7ff fde1 	bl	8001abc <SD_RxDataBlock>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f06:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1ed      	bne.n	8001ef0 <SD_disk_read+0x80>
 8001f14:	e000      	b.n	8001f18 <SD_disk_read+0xa8>
          break;
 8001f16:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001f18:	2100      	movs	r1, #0
 8001f1a:	204c      	movs	r0, #76	; 0x4c
 8001f1c:	f7ff fe58 	bl	8001bd0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001f20:	f7ff fcfc 	bl	800191c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001f24:	f7ff fd20 	bl	8001968 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf14      	ite	ne
 8001f2e:	2301      	movne	r3, #1
 8001f30:	2300      	moveq	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000014 	.word	0x20000014
 8001f40:	200002a8 	.word	0x200002a8

08001f44 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	4603      	mov	r3, r0
 8001f52:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <SD_disk_write+0x1c>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <SD_disk_write+0x20>
    return RES_PARERR;
 8001f60:	2304      	movs	r3, #4
 8001f62:	e06b      	b.n	800203c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001f64:	4b37      	ldr	r3, [pc, #220]	; (8002044 <SD_disk_write+0x100>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e062      	b.n	800203c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001f76:	4b33      	ldr	r3, [pc, #204]	; (8002044 <SD_disk_write+0x100>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001f84:	2302      	movs	r3, #2
 8001f86:	e059      	b.n	800203c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <SD_disk_write+0x104>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	025b      	lsls	r3, r3, #9
 8001f98:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001f9a:	f7ff fcb3 	bl	8001904 <SELECT>
  
  if (count == 1) 
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d110      	bne.n	8001fc6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001fa4:	6879      	ldr	r1, [r7, #4]
 8001fa6:	2058      	movs	r0, #88	; 0x58
 8001fa8:	f7ff fe12 	bl	8001bd0 <SD_SendCmd>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d13a      	bne.n	8002028 <SD_disk_write+0xe4>
 8001fb2:	21fe      	movs	r1, #254	; 0xfe
 8001fb4:	68b8      	ldr	r0, [r7, #8]
 8001fb6:	f7ff fdb7 	bl	8001b28 <SD_TxDataBlock>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d033      	beq.n	8002028 <SD_disk_write+0xe4>
      count = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	e030      	b.n	8002028 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <SD_disk_write+0x104>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	2077      	movs	r0, #119	; 0x77
 8001fd6:	f7ff fdfb 	bl	8001bd0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	2057      	movs	r0, #87	; 0x57
 8001fde:	f7ff fdf7 	bl	8001bd0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	2059      	movs	r0, #89	; 0x59
 8001fe6:	f7ff fdf3 	bl	8001bd0 <SD_SendCmd>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d11b      	bne.n	8002028 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001ff0:	21fc      	movs	r1, #252	; 0xfc
 8001ff2:	68b8      	ldr	r0, [r7, #8]
 8001ff4:	f7ff fd98 	bl	8001b28 <SD_TxDataBlock>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002004:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	3b01      	subs	r3, #1
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ee      	bne.n	8001ff0 <SD_disk_write+0xac>
 8002012:	e000      	b.n	8002016 <SD_disk_write+0xd2>
          break;
 8002014:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002016:	21fd      	movs	r1, #253	; 0xfd
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fd85 	bl	8001b28 <SD_TxDataBlock>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002028:	f7ff fc78 	bl	800191c <DESELECT>
  SPI_RxByte();
 800202c:	f7ff fc9c 	bl	8001968 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000014 	.word	0x20000014
 8002048:	200002a8 	.word	0x200002a8

0800204c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	603a      	str	r2, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
 8002058:	460b      	mov	r3, r1
 800205a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002066:	2304      	movs	r3, #4
 8002068:	e117      	b.n	800229a <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002070:	79bb      	ldrb	r3, [r7, #6]
 8002072:	2b05      	cmp	r3, #5
 8002074:	d126      	bne.n	80020c4 <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d00e      	beq.n	800209c <SD_disk_ioctl+0x50>
 800207e:	2b02      	cmp	r3, #2
 8002080:	d012      	beq.n	80020a8 <SD_disk_ioctl+0x5c>
 8002082:	2b00      	cmp	r3, #0
 8002084:	d11a      	bne.n	80020bc <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8002086:	f7ff fd0f 	bl	8001aa8 <SD_CheckPower>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8002090:	f7ff fcfe 	bl	8001a90 <SD_PowerOff>
      res = RES_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800209a:	e0fc      	b.n	8002296 <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 800209c:	f7ff fcac 	bl	80019f8 <SD_PowerOn>
      res = RES_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020a6:	e0f6      	b.n	8002296 <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	1c5c      	adds	r4, r3, #1
 80020ac:	f7ff fcfc 	bl	8001aa8 <SD_CheckPower>
 80020b0:	4603      	mov	r3, r0
 80020b2:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80020b4:	2300      	movs	r3, #0
 80020b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80020ba:	e0ec      	b.n	8002296 <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80020bc:	2304      	movs	r3, #4
 80020be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020c2:	e0e8      	b.n	8002296 <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80020c4:	4b77      	ldr	r3, [pc, #476]	; (80022a4 <SD_disk_ioctl+0x258>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0e1      	b.n	800229a <SD_disk_ioctl+0x24e>
    
    SELECT();
 80020d6:	f7ff fc15 	bl	8001904 <SELECT>
    
    switch (ctrl) 
 80020da:	79bb      	ldrb	r3, [r7, #6]
 80020dc:	2b0d      	cmp	r3, #13
 80020de:	f200 80cb 	bhi.w	8002278 <SD_disk_ioctl+0x22c>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <SD_disk_ioctl+0x9c>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	080021e3 	.word	0x080021e3
 80020ec:	08002121 	.word	0x08002121
 80020f0:	080021d3 	.word	0x080021d3
 80020f4:	08002279 	.word	0x08002279
 80020f8:	08002279 	.word	0x08002279
 80020fc:	08002279 	.word	0x08002279
 8002100:	08002279 	.word	0x08002279
 8002104:	08002279 	.word	0x08002279
 8002108:	08002279 	.word	0x08002279
 800210c:	08002279 	.word	0x08002279
 8002110:	08002279 	.word	0x08002279
 8002114:	080021f5 	.word	0x080021f5
 8002118:	08002219 	.word	0x08002219
 800211c:	0800223d 	.word	0x0800223d
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002120:	2100      	movs	r1, #0
 8002122:	2049      	movs	r0, #73	; 0x49
 8002124:	f7ff fd54 	bl	8001bd0 <SD_SendCmd>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 80a8 	bne.w	8002280 <SD_disk_ioctl+0x234>
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2110      	movs	r1, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fcc0 	bl	8001abc <SD_RxDataBlock>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 809e 	beq.w	8002280 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8002144:	7b3b      	ldrb	r3, [r7, #12]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10e      	bne.n	800216c <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800214e:	7d7b      	ldrb	r3, [r7, #21]
 8002150:	b29a      	uxth	r2, r3
 8002152:	7d3b      	ldrb	r3, [r7, #20]
 8002154:	b29b      	uxth	r3, r3
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	b29b      	uxth	r3, r3
 800215a:	4413      	add	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	3301      	adds	r3, #1
 8002160:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002162:	8bfb      	ldrh	r3, [r7, #30]
 8002164:	029a      	lsls	r2, r3, #10
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	e02e      	b.n	80021ca <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800216c:	7c7b      	ldrb	r3, [r7, #17]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	b2da      	uxtb	r2, r3
 8002174:	7dbb      	ldrb	r3, [r7, #22]
 8002176:	09db      	lsrs	r3, r3, #7
 8002178:	b2db      	uxtb	r3, r3
 800217a:	4413      	add	r3, r2
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7d7b      	ldrb	r3, [r7, #21]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 0306 	and.w	r3, r3, #6
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4413      	add	r3, r2
 800218c:	b2db      	uxtb	r3, r3
 800218e:	3302      	adds	r3, #2
 8002190:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002194:	7d3b      	ldrb	r3, [r7, #20]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	b2db      	uxtb	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	7cbb      	ldrb	r3, [r7, #18]
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4413      	add	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3301      	adds	r3, #1
 80021ba:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80021bc:	8bfa      	ldrh	r2, [r7, #30]
 80021be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021c2:	3b09      	subs	r3, #9
 80021c4:	409a      	lsls	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80021d0:	e056      	b.n	8002280 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021d8:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021e0:	e055      	b.n	800228e <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80021e2:	f7ff fbed 	bl	80019c0 <SD_ReadyWait>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2bff      	cmp	r3, #255	; 0xff
 80021ea:	d14b      	bne.n	8002284 <SD_disk_ioctl+0x238>
        res = RES_OK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80021f2:	e047      	b.n	8002284 <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80021f4:	2100      	movs	r1, #0
 80021f6:	2049      	movs	r0, #73	; 0x49
 80021f8:	f7ff fcea 	bl	8001bd0 <SD_SendCmd>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d142      	bne.n	8002288 <SD_disk_ioctl+0x23c>
 8002202:	2110      	movs	r1, #16
 8002204:	6a38      	ldr	r0, [r7, #32]
 8002206:	f7ff fc59 	bl	8001abc <SD_RxDataBlock>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03b      	beq.n	8002288 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002216:	e037      	b.n	8002288 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002218:	2100      	movs	r1, #0
 800221a:	204a      	movs	r0, #74	; 0x4a
 800221c:	f7ff fcd8 	bl	8001bd0 <SD_SendCmd>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d132      	bne.n	800228c <SD_disk_ioctl+0x240>
 8002226:	2110      	movs	r1, #16
 8002228:	6a38      	ldr	r0, [r7, #32]
 800222a:	f7ff fc47 	bl	8001abc <SD_RxDataBlock>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d02b      	beq.n	800228c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800223a:	e027      	b.n	800228c <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 800223c:	2100      	movs	r1, #0
 800223e:	207a      	movs	r0, #122	; 0x7a
 8002240:	f7ff fcc6 	bl	8001bd0 <SD_SendCmd>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 800224a:	2300      	movs	r3, #0
 800224c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002250:	e00b      	b.n	800226a <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8002252:	6a3c      	ldr	r4, [r7, #32]
 8002254:	1c63      	adds	r3, r4, #1
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	f7ff fb86 	bl	8001968 <SPI_RxByte>
 800225c:	4603      	mov	r3, r0
 800225e:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002260:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002264:	3301      	adds	r3, #1
 8002266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800226a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800226e:	2b03      	cmp	r3, #3
 8002270:	d9ef      	bls.n	8002252 <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002278:	2304      	movs	r3, #4
 800227a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800227e:	e006      	b.n	800228e <SD_disk_ioctl+0x242>
      break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <SD_disk_ioctl+0x242>
      break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <SD_disk_ioctl+0x242>
      break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <SD_disk_ioctl+0x242>
      break;
 800228c:	bf00      	nop
    }
    
    DESELECT();
 800228e:	f7ff fb45 	bl	800191c <DESELECT>
    SPI_RxByte();
 8002292:	f7ff fb69 	bl	8001968 <SPI_RxByte>
  }
  
  return res;
 8002296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800229a:	4618      	mov	r0, r3
 800229c:	372c      	adds	r7, #44	; 0x2c
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000014 	.word	0x20000014

080022a8 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

/* to send the data to the uart */
void send_uart(char *string) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7fd ff4d 	bl	8000150 <strlen>
 80022b6:	4603      	mov	r3, r0
 80022b8:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000); // transmit in blocking mode
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <send_uart+0x2c>)
 80022c6:	f003 fef0 	bl	80060aa <HAL_UART_Transmit>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000cec 	.word	0x20000cec

080022d8 <bufclear>:
		i++;
	return i;
}

void bufclear(void)  // clear buffer
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 1024; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	e007      	b.n	80022f4 <bufclear+0x1c>
		buffer[i] = '\0';
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <bufclear+0x30>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 1024; i++)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3301      	adds	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022fa:	dbf3      	blt.n	80022e4 <bufclear+0xc>
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000898 	.word	0x20000898

0800230c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002312:	f000 fdef 	bl	8002ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002316:	f000 f99b 	bl	8002650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800231a:	f000 fae3 	bl	80028e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800231e:	f000 fa8d 	bl	800283c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002322:	f000 fab5 	bl	8002890 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002326:	f000 fa07 	bl	8002738 <MX_SPI2_Init>
  MX_FATFS_Init();
 800232a:	f004 fbb5 	bl	8006a98 <MX_FATFS_Init>
  MX_I2C1_Init();
 800232e:	f000 f9d5 	bl	80026dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8002332:	f000 fa37 	bl	80027a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  fresult = f_mount(&fs, "", 0);
 8002336:	2200      	movs	r2, #0
 8002338:	49a6      	ldr	r1, [pc, #664]	; (80025d4 <main+0x2c8>)
 800233a:	48a7      	ldr	r0, [pc, #668]	; (80025d8 <main+0x2cc>)
 800233c:	f006 fe6c 	bl	8009018 <f_mount>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	4ba5      	ldr	r3, [pc, #660]	; (80025dc <main+0x2d0>)
 8002346:	701a      	strb	r2, [r3, #0]
        	if (fresult != FR_OK)
 8002348:	4ba4      	ldr	r3, [pc, #656]	; (80025dc <main+0x2d0>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <main+0x4c>
        		send_uart("Error in mounting SD CARD...\n");
 8002350:	48a3      	ldr	r0, [pc, #652]	; (80025e0 <main+0x2d4>)
 8002352:	f7ff ffa9 	bl	80022a8 <send_uart>
 8002356:	e002      	b.n	800235e <main+0x52>
        	else
        		send_uart("SD CARD mounted successfully...\n");
 8002358:	48a2      	ldr	r0, [pc, #648]	; (80025e4 <main+0x2d8>)
 800235a:	f7ff ffa5 	bl	80022a8 <send_uart>

        	/**********CARD CAPACITY DETAILS**********/
        	/* Check free space */
        	f_getfree("", &fre_clust, &pfs);
 800235e:	4aa2      	ldr	r2, [pc, #648]	; (80025e8 <main+0x2dc>)
 8002360:	49a2      	ldr	r1, [pc, #648]	; (80025ec <main+0x2e0>)
 8002362:	489c      	ldr	r0, [pc, #624]	; (80025d4 <main+0x2c8>)
 8002364:	f007 fb41 	bl	80099ea <f_getfree>

        	total = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002368:	4b9f      	ldr	r3, [pc, #636]	; (80025e8 <main+0x2dc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002370:	3b02      	subs	r3, #2
 8002372:	4a9d      	ldr	r2, [pc, #628]	; (80025e8 <main+0x2dc>)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe f830 	bl	80003e4 <__aeabi_ui2d>
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	4b99      	ldr	r3, [pc, #612]	; (80025f0 <main+0x2e4>)
 800238a:	f7fe f8a5 	bl	80004d8 <__aeabi_dmul>
 800238e:	4603      	mov	r3, r0
 8002390:	460c      	mov	r4, r1
 8002392:	4618      	mov	r0, r3
 8002394:	4621      	mov	r1, r4
 8002396:	f7fe fb77 	bl	8000a88 <__aeabi_d2uiz>
 800239a:	4602      	mov	r2, r0
 800239c:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <main+0x2e8>)
 800239e:	601a      	str	r2, [r3, #0]
        	sprintf(buffer, "SD CARD Total Size : \t%lu\n", total);
 80023a0:	4b94      	ldr	r3, [pc, #592]	; (80025f4 <main+0x2e8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	461a      	mov	r2, r3
 80023a6:	4994      	ldr	r1, [pc, #592]	; (80025f8 <main+0x2ec>)
 80023a8:	4894      	ldr	r0, [pc, #592]	; (80025fc <main+0x2f0>)
 80023aa:	f008 f9a7 	bl	800a6fc <siprintf>
        	send_uart(buffer);
 80023ae:	4893      	ldr	r0, [pc, #588]	; (80025fc <main+0x2f0>)
 80023b0:	f7ff ff7a 	bl	80022a8 <send_uart>
        	bufclear();
 80023b4:	f7ff ff90 	bl	80022d8 <bufclear>
        	free_space = (uint32_t) (fre_clust * pfs->csize * 0.5);
 80023b8:	4b8b      	ldr	r3, [pc, #556]	; (80025e8 <main+0x2dc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80023c0:	461a      	mov	r2, r3
 80023c2:	4b8a      	ldr	r3, [pc, #552]	; (80025ec <main+0x2e0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	fb03 f302 	mul.w	r3, r3, r2
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f80a 	bl	80003e4 <__aeabi_ui2d>
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	4b86      	ldr	r3, [pc, #536]	; (80025f0 <main+0x2e4>)
 80023d6:	f7fe f87f 	bl	80004d8 <__aeabi_dmul>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	4618      	mov	r0, r3
 80023e0:	4621      	mov	r1, r4
 80023e2:	f7fe fb51 	bl	8000a88 <__aeabi_d2uiz>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b85      	ldr	r3, [pc, #532]	; (8002600 <main+0x2f4>)
 80023ea:	601a      	str	r2, [r3, #0]
        	sprintf(buffer, "SD CARD Free Space : \t%lu\n", free_space);
 80023ec:	4b84      	ldr	r3, [pc, #528]	; (8002600 <main+0x2f4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4984      	ldr	r1, [pc, #528]	; (8002604 <main+0x2f8>)
 80023f4:	4881      	ldr	r0, [pc, #516]	; (80025fc <main+0x2f0>)
 80023f6:	f008 f981 	bl	800a6fc <siprintf>
        	send_uart(buffer);
 80023fa:	4880      	ldr	r0, [pc, #512]	; (80025fc <main+0x2f0>)
 80023fc:	f7ff ff54 	bl	80022a8 <send_uart>


          /**********THE FOLLWING OPERATION IS USING PUTS AND GETS**********/
        	/* Open file to write/create a file if it doesn't exist */
        	fresult = f_open(&fil, "EPHEMERISH_PAYLOAD.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002400:	2213      	movs	r2, #19
 8002402:	4981      	ldr	r1, [pc, #516]	; (8002608 <main+0x2fc>)
 8002404:	4881      	ldr	r0, [pc, #516]	; (800260c <main+0x300>)
 8002406:	f006 fe4f 	bl	80090a8 <f_open>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	4b73      	ldr	r3, [pc, #460]	; (80025dc <main+0x2d0>)
 8002410:	701a      	strb	r2, [r3, #0]

        	/* Writing text */
        	fresult = f_puts("EPHEMERISH PAYLOAD MISSION : RADIATION PROFILE OF 10000 FT\n\n", &fil);
 8002412:	497e      	ldr	r1, [pc, #504]	; (800260c <main+0x300>)
 8002414:	487e      	ldr	r0, [pc, #504]	; (8002610 <main+0x304>)
 8002416:	f007 fbf2 	bl	8009bfe <f_puts>
 800241a:	4603      	mov	r3, r0
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b6f      	ldr	r3, [pc, #444]	; (80025dc <main+0x2d0>)
 8002420:	701a      	strb	r2, [r3, #0]

        	send_uart("File.txt is created and the data is written \n");
 8002422:	487c      	ldr	r0, [pc, #496]	; (8002614 <main+0x308>)
 8002424:	f7ff ff40 	bl	80022a8 <send_uart>
//        	/* Close file */
//        	f_close(&fil);
//
//        	bufclear();

	for (uint8_t i = 0; i < 12; i++) {
 8002428:	2300      	movs	r3, #0
 800242a:	71fb      	strb	r3, [r7, #7]
 800242c:	e00d      	b.n	800244a <main+0x13e>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800242e:	2101      	movs	r1, #1
 8002430:	4879      	ldr	r0, [pc, #484]	; (8002618 <main+0x30c>)
 8002432:	f001 f913 	bl	800365c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	4878      	ldr	r0, [pc, #480]	; (800261c <main+0x310>)
 800243a:	f001 f90f 	bl	800365c <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800243e:	2032      	movs	r0, #50	; 0x32
 8002440:	f000 fdba 	bl	8002fb8 <HAL_Delay>
	for (uint8_t i = 0; i < 12; i++) {
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	3301      	adds	r3, #1
 8002448:	71fb      	strb	r3, [r7, #7]
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	2b0b      	cmp	r3, #11
 800244e:	d9ee      	bls.n	800242e <main+0x122>
	}

	MS5611_Init();
 8002450:	f7fe fe96 	bl	8001180 <MS5611_Init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8002454:	4b72      	ldr	r3, [pc, #456]	; (8002620 <main+0x314>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	4b71      	ldr	r3, [pc, #452]	; (8002620 <main+0x314>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	60da      	str	r2, [r3, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*) RX2_BUF, strlen(RX2_BUF), 1000);
 8002464:	4b6f      	ldr	r3, [pc, #444]	; (8002624 <main+0x318>)
 8002466:	681c      	ldr	r4, [r3, #0]
 8002468:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <main+0x318>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd fe6f 	bl	8000150 <strlen>
 8002472:	4603      	mov	r3, r0
 8002474:	b29a      	uxth	r2, r3
 8002476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247a:	4621      	mov	r1, r4
 800247c:	4868      	ldr	r0, [pc, #416]	; (8002620 <main+0x314>)
 800247e:	f003 fe14 	bl	80060aa <HAL_UART_Transmit>

	BASE_ALT_T = MS5611_ReadMedian_Altitude();
 8002482:	f7ff f9c1 	bl	8001808 <MS5611_ReadMedian_Altitude>
 8002486:	4602      	mov	r2, r0
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <main+0x31c>)
 800248a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ALT_T = MS5611_ReadMedian_Altitude();
 800248c:	f7ff f9bc 	bl	8001808 <MS5611_ReadMedian_Altitude>
 8002490:	4602      	mov	r2, r0
 8002492:	4b66      	ldr	r3, [pc, #408]	; (800262c <main+0x320>)
 8002494:	601a      	str	r2, [r3, #0]
	  if(AS == 1 && ALT_T >  BASE_ALT_T + 20){
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <main+0x324>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d177      	bne.n	800258e <main+0x282>
 800249e:	4b62      	ldr	r3, [pc, #392]	; (8002628 <main+0x31c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4964      	ldr	r1, [pc, #400]	; (8002634 <main+0x328>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fb65 	bl	8000b74 <__addsf3>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b5f      	ldr	r3, [pc, #380]	; (800262c <main+0x320>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4610      	mov	r0, r2
 80024b6:	f7fe fe03 	bl	80010c0 <__aeabi_fcmplt>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d066      	beq.n	800258e <main+0x282>
		  for(uint8_t i = 0 ; i < sizeof(RX1_BUFF) ; i++){
 80024c0:	2300      	movs	r3, #0
 80024c2:	71bb      	strb	r3, [r7, #6]
 80024c4:	e00c      	b.n	80024e0 <main+0x1d4>
			  if(RX1_BUFF[i] == '\n'){
 80024c6:	79bb      	ldrb	r3, [r7, #6]
 80024c8:	4a5b      	ldr	r2, [pc, #364]	; (8002638 <main+0x32c>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	2b0a      	cmp	r3, #10
 80024ce:	d104      	bne.n	80024da <main+0x1ce>
				  RX1_BUFF[i] = '|';
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	4a59      	ldr	r2, [pc, #356]	; (8002638 <main+0x32c>)
 80024d4:	217c      	movs	r1, #124	; 0x7c
 80024d6:	54d1      	strb	r1, [r2, r3]
				  break;
 80024d8:	e005      	b.n	80024e6 <main+0x1da>
		  for(uint8_t i = 0 ; i < sizeof(RX1_BUFF) ; i++){
 80024da:	79bb      	ldrb	r3, [r7, #6]
 80024dc:	3301      	adds	r3, #1
 80024de:	71bb      	strb	r3, [r7, #6]
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	2bb3      	cmp	r3, #179	; 0xb3
 80024e4:	d9ef      	bls.n	80024c6 <main+0x1ba>
			  }
		  }
		  sprintf(RX1_BUFF, "%s  ALT : %.2f\n", RX1_BUFF, ALT_T);
 80024e6:	4b51      	ldr	r3, [pc, #324]	; (800262c <main+0x320>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd ff9c 	bl	8000428 <__aeabi_f2d>
 80024f0:	4603      	mov	r3, r0
 80024f2:	460c      	mov	r4, r1
 80024f4:	e9cd 3400 	strd	r3, r4, [sp]
 80024f8:	4a4f      	ldr	r2, [pc, #316]	; (8002638 <main+0x32c>)
 80024fa:	4950      	ldr	r1, [pc, #320]	; (800263c <main+0x330>)
 80024fc:	484e      	ldr	r0, [pc, #312]	; (8002638 <main+0x32c>)
 80024fe:	f008 f8fd 	bl	800a6fc <siprintf>
		  fresult = f_puts(RX1_BUFF, &fil);
 8002502:	4942      	ldr	r1, [pc, #264]	; (800260c <main+0x300>)
 8002504:	484c      	ldr	r0, [pc, #304]	; (8002638 <main+0x32c>)
 8002506:	f007 fb7a 	bl	8009bfe <f_puts>
 800250a:	4603      	mov	r3, r0
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b33      	ldr	r3, [pc, #204]	; (80025dc <main+0x2d0>)
 8002510:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2, (uint8_t *)RX1_BUFF, sizeof(RX1_BUFF), 1000);
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	22b4      	movs	r2, #180	; 0xb4
 8002518:	4947      	ldr	r1, [pc, #284]	; (8002638 <main+0x32c>)
 800251a:	4849      	ldr	r0, [pc, #292]	; (8002640 <main+0x334>)
 800251c:	f003 fdc5 	bl	80060aa <HAL_UART_Transmit>
		  for(uint8_t i = 0 ; i < sizeof(RX1_BUFF) ; i++)
 8002520:	2300      	movs	r3, #0
 8002522:	717b      	strb	r3, [r7, #5]
 8002524:	e006      	b.n	8002534 <main+0x228>
			  RX1_BUFF[i] = '\0';
 8002526:	797b      	ldrb	r3, [r7, #5]
 8002528:	4a43      	ldr	r2, [pc, #268]	; (8002638 <main+0x32c>)
 800252a:	2100      	movs	r1, #0
 800252c:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0 ; i < sizeof(RX1_BUFF) ; i++)
 800252e:	797b      	ldrb	r3, [r7, #5]
 8002530:	3301      	adds	r3, #1
 8002532:	717b      	strb	r3, [r7, #5]
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	2bb3      	cmp	r3, #179	; 0xb3
 8002538:	d9f5      	bls.n	8002526 <main+0x21a>
		  AS = 0;
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <main+0x324>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1, (uint8_t *)RX2_BUF, strlen(RX2_BUF), 1000);
 8002540:	4b38      	ldr	r3, [pc, #224]	; (8002624 <main+0x318>)
 8002542:	681c      	ldr	r4, [r3, #0]
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <main+0x318>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fe01 	bl	8000150 <strlen>
 800254e:	4603      	mov	r3, r0
 8002550:	b29a      	uxth	r2, r3
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	4621      	mov	r1, r4
 8002558:	4831      	ldr	r0, [pc, #196]	; (8002620 <main+0x314>)
 800255a:	f003 fda6 	bl	80060aa <HAL_UART_Transmit>
		  if(ALT_T >  BASE_ALT_T + 500){
 800255e:	4b32      	ldr	r3, [pc, #200]	; (8002628 <main+0x31c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4938      	ldr	r1, [pc, #224]	; (8002644 <main+0x338>)
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fb05 	bl	8000b74 <__addsf3>
 800256a:	4603      	mov	r3, r0
 800256c:	461a      	mov	r2, r3
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <main+0x320>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7fe fda3 	bl	80010c0 <__aeabi_fcmplt>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <main+0x282>
			  CLOSE_READY_SD = 1;
 8002580:	4b31      	ldr	r3, [pc, #196]	; (8002648 <main+0x33c>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8002586:	2101      	movs	r1, #1
 8002588:	4823      	ldr	r0, [pc, #140]	; (8002618 <main+0x30c>)
 800258a:	f001 f867 	bl	800365c <HAL_GPIO_TogglePin>
		  }

	  }
	  if((CLOSE_READY_SD == 1) && (ALT_T < BASE_ALT_T + 50)){
 800258e:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <main+0x33c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	f47f af7a 	bne.w	800248c <main+0x180>
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <main+0x31c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	492b      	ldr	r1, [pc, #172]	; (800264c <main+0x340>)
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fae8 	bl	8000b74 <__addsf3>
 80025a4:	4603      	mov	r3, r0
 80025a6:	461a      	mov	r2, r3
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <main+0x320>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe fda4 	bl	80010fc <__aeabi_fcmpgt>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <main+0x2c6>
		  fresult = f_close(&fil);
 80025ba:	4814      	ldr	r0, [pc, #80]	; (800260c <main+0x300>)
 80025bc:	f007 f9ed 	bl	800999a <f_close>
 80025c0:	4603      	mov	r3, r0
 80025c2:	461a      	mov	r2, r3
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <main+0x2d0>)
 80025c6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2180      	movs	r1, #128	; 0x80
 80025cc:	4813      	ldr	r0, [pc, #76]	; (800261c <main+0x310>)
 80025ce:	f001 f82d 	bl	800362c <HAL_GPIO_WritePin>
	  ALT_T = MS5611_ReadMedian_Altitude();
 80025d2:	e75b      	b.n	800248c <main+0x180>
 80025d4:	0800cf4c 	.word	0x0800cf4c
 80025d8:	200005c8 	.word	0x200005c8
 80025dc:	20000ca0 	.word	0x20000ca0
 80025e0:	0800cf50 	.word	0x0800cf50
 80025e4:	0800cf70 	.word	0x0800cf70
 80025e8:	20000c9c 	.word	0x20000c9c
 80025ec:	2000056c 	.word	0x2000056c
 80025f0:	3fe00000 	.word	0x3fe00000
 80025f4:	20000d30 	.word	0x20000d30
 80025f8:	0800cf94 	.word	0x0800cf94
 80025fc:	20000898 	.word	0x20000898
 8002600:	20000850 	.word	0x20000850
 8002604:	0800cfb0 	.word	0x0800cfb0
 8002608:	0800cfcc 	.word	0x0800cfcc
 800260c:	20000d34 	.word	0x20000d34
 8002610:	0800cfe4 	.word	0x0800cfe4
 8002614:	0800d024 	.word	0x0800d024
 8002618:	40010c00 	.word	0x40010c00
 800261c:	40010800 	.word	0x40010800
 8002620:	20000854 	.word	0x20000854
 8002624:	20000018 	.word	0x20000018
 8002628:	200002b0 	.word	0x200002b0
 800262c:	200002ac 	.word	0x200002ac
 8002630:	20000331 	.word	0x20000331
 8002634:	41a00000 	.word	0x41a00000
 8002638:	200002b8 	.word	0x200002b8
 800263c:	0800d054 	.word	0x0800d054
 8002640:	20000cec 	.word	0x20000cec
 8002644:	43fa0000 	.word	0x43fa0000
 8002648:	200002b4 	.word	0x200002b4
 800264c:	42480000 	.word	0x42480000

08002650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	; 0x40
 8002654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002656:	f107 0318 	add.w	r3, r7, #24
 800265a:	2228      	movs	r2, #40	; 0x28
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f007 fbf4 	bl	8009e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002672:	2301      	movs	r3, #1
 8002674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002676:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002680:	2301      	movs	r3, #1
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002684:	2302      	movs	r3, #2
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800268e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002692:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002694:	f107 0318 	add.w	r3, r7, #24
 8002698:	4618      	mov	r0, r3
 800269a:	f002 f8e3 	bl	8004864 <HAL_RCC_OscConfig>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80026a4:	f000 f97e 	bl	80029a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026a8:	230f      	movs	r3, #15
 80026aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026ac:	2302      	movs	r3, #2
 80026ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80026b4:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80026b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80026ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80026be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2102      	movs	r1, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 fb4d 	bl	8004d64 <HAL_RCC_ClockConfig>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026d0:	f000 f968 	bl	80029a4 <Error_Handler>
  }
}
 80026d4:	bf00      	nop
 80026d6:	3740      	adds	r7, #64	; 0x40
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <MX_I2C1_Init+0x50>)
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <MX_I2C1_Init+0x54>)
 80026e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026e6:	4b11      	ldr	r3, [pc, #68]	; (800272c <MX_I2C1_Init+0x50>)
 80026e8:	4a12      	ldr	r2, [pc, #72]	; (8002734 <MX_I2C1_Init+0x58>)
 80026ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	; (800272c <MX_I2C1_Init+0x50>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	; (800272c <MX_I2C1_Init+0x50>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <MX_I2C1_Init+0x50>)
 80026fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002700:	4b0a      	ldr	r3, [pc, #40]	; (800272c <MX_I2C1_Init+0x50>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002706:	4b09      	ldr	r3, [pc, #36]	; (800272c <MX_I2C1_Init+0x50>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <MX_I2C1_Init+0x50>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <MX_I2C1_Init+0x50>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_I2C1_Init+0x50>)
 800271a:	f000 ffb9 	bl	8003690 <HAL_I2C_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002724:	f000 f93e 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	200007f8 	.word	0x200007f8
 8002730:	40005400 	.word	0x40005400
 8002734:	000186a0 	.word	0x000186a0

08002738 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <MX_SPI2_Init+0x64>)
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <MX_SPI2_Init+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <MX_SPI2_Init+0x64>)
 8002744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002748:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <MX_SPI2_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_SPI2_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_SPI2_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_SPI2_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_SPI2_Init+0x64>)
 8002764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002768:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_SPI2_Init+0x64>)
 800276c:	2200      	movs	r2, #0
 800276e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MX_SPI2_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_SPI2_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <MX_SPI2_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_SPI2_Init+0x64>)
 8002784:	220a      	movs	r2, #10
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <MX_SPI2_Init+0x64>)
 800278a:	f002 fc87 	bl	800509c <HAL_SPI_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002794:	f000 f906 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000570 	.word	0x20000570
 80027a0:	40003800 	.word	0x40003800

080027a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b8:	463b      	mov	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <MX_TIM2_Init+0x94>)
 80027c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80027c8:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <MX_TIM2_Init+0x94>)
 80027ca:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80027ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b19      	ldr	r3, [pc, #100]	; (8002838 <MX_TIM2_Init+0x94>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80027d6:	4b18      	ldr	r3, [pc, #96]	; (8002838 <MX_TIM2_Init+0x94>)
 80027d8:	2263      	movs	r2, #99	; 0x63
 80027da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b16      	ldr	r3, [pc, #88]	; (8002838 <MX_TIM2_Init+0x94>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <MX_TIM2_Init+0x94>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e8:	4813      	ldr	r0, [pc, #76]	; (8002838 <MX_TIM2_Init+0x94>)
 80027ea:	f003 f86d 	bl	80058c8 <HAL_TIM_Base_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80027f4:	f000 f8d6 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027fe:	f107 0308 	add.w	r3, r7, #8
 8002802:	4619      	mov	r1, r3
 8002804:	480c      	ldr	r0, [pc, #48]	; (8002838 <MX_TIM2_Init+0x94>)
 8002806:	f003 f9b6 	bl	8005b76 <HAL_TIM_ConfigClockSource>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002810:	f000 f8c8 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002814:	2300      	movs	r3, #0
 8002816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002818:	2300      	movs	r3, #0
 800281a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800281c:	463b      	mov	r3, r7
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_TIM2_Init+0x94>)
 8002822:	f003 fb85 	bl	8005f30 <HAL_TIMEx_MasterConfigSynchronization>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800282c:	f000 f8ba 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20000ca4 	.word	0x20000ca4

0800283c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <MX_USART1_UART_Init+0x50>)
 8002844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800284c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002862:	220c      	movs	r2, #12
 8002864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_USART1_UART_Init+0x4c>)
 8002874:	f003 fbcc 	bl	8006010 <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800287e:	f000 f891 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000854 	.word	0x20000854
 800288c:	40013800 	.word	0x40013800

08002890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <MX_USART2_UART_Init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 800289c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_USART2_UART_Init+0x4c>)
 80028c8:	f003 fba2 	bl	8006010 <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028d2:	f000 f867 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000cec 	.word	0x20000cec
 80028e0:	40004400 	.word	0x40004400

080028e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f8:	4b27      	ldr	r3, [pc, #156]	; (8002998 <MX_GPIO_Init+0xb4>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <MX_GPIO_Init+0xb4>)
 80028fe:	f043 0320 	orr.w	r3, r3, #32
 8002902:	6193      	str	r3, [r2, #24]
 8002904:	4b24      	ldr	r3, [pc, #144]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6193      	str	r3, [r2, #24]
 800291c:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <MX_GPIO_Init+0xb4>)
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <MX_GPIO_Init+0xb4>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <MX_GPIO_Init+0xb4>)
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b18      	ldr	r3, [pc, #96]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|SD_CS_Pin, GPIO_PIN_RESET);
 8002940:	2200      	movs	r2, #0
 8002942:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002946:	4815      	ldr	r0, [pc, #84]	; (800299c <MX_GPIO_Init+0xb8>)
 8002948:	f000 fe70 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	4813      	ldr	r0, [pc, #76]	; (80029a0 <MX_GPIO_Init+0xbc>)
 8002952:	f000 fe6b 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin SD_CS_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SD_CS_Pin;
 8002956:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800295a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800295c:	2301      	movs	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2302      	movs	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	4619      	mov	r1, r3
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <MX_GPIO_Init+0xb8>)
 8002970:	f000 fd02 	bl	8003378 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002974:	2301      	movs	r3, #1
 8002976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2302      	movs	r3, #2
 8002982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 0310 	add.w	r3, r7, #16
 8002988:	4619      	mov	r1, r3
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <MX_GPIO_Init+0xbc>)
 800298c:	f000 fcf4 	bl	8003378 <HAL_GPIO_Init>

}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	40010800 	.word	0x40010800
 80029a0:	40010c00 	.word	0x40010c00

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	; (8002a0c <HAL_MspInit+0x5c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_MspInit+0x5c>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6193      	str	r3, [r2, #24]
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_MspInit+0x5c>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a0e      	ldr	r2, [pc, #56]	; (8002a0c <HAL_MspInit+0x5c>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_MspInit+0x5c>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_MspInit+0x60>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <HAL_MspInit+0x60>)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40010000 	.word	0x40010000

08002a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_I2C_MspInit+0x90>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d132      	bne.n	8002a9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a34:	4b1c      	ldr	r3, [pc, #112]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a3a:	f043 0308 	orr.w	r3, r3, #8
 8002a3e:	6193      	str	r3, [r2, #24]
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a52:	2312      	movs	r3, #18
 8002a54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a56:	2303      	movs	r3, #3
 8002a58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4812      	ldr	r0, [pc, #72]	; (8002aac <HAL_I2C_MspInit+0x98>)
 8002a62:	f000 fc89 	bl	8003378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <HAL_I2C_MspInit+0x9c>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7c:	4a0c      	ldr	r2, [pc, #48]	; (8002ab0 <HAL_I2C_MspInit+0x9c>)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a82:	4b09      	ldr	r3, [pc, #36]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a8c:	61d3      	str	r3, [r2, #28]
 8002a8e:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_I2C_MspInit+0x94>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a9a:	bf00      	nop
 8002a9c:	3728      	adds	r7, #40	; 0x28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40005400 	.word	0x40005400
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010c00 	.word	0x40010c00
 8002ab0:	40010000 	.word	0x40010000

08002ab4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a1c      	ldr	r2, [pc, #112]	; (8002b40 <HAL_SPI_MspInit+0x8c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d131      	bne.n	8002b38 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ad4:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ade:	61d3      	str	r3, [r2, #28]
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_SPI_MspInit+0x90>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002b04:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4619      	mov	r1, r3
 8002b18:	480b      	ldr	r0, [pc, #44]	; (8002b48 <HAL_SPI_MspInit+0x94>)
 8002b1a:	f000 fc2d 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4619      	mov	r1, r3
 8002b32:	4805      	ldr	r0, [pc, #20]	; (8002b48 <HAL_SPI_MspInit+0x94>)
 8002b34:	f000 fc20 	bl	8003378 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40003800 	.word	0x40003800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40010c00 	.word	0x40010c00

08002b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d113      	bne.n	8002b86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_TIM_Base_MspInit+0x44>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <HAL_TIM_Base_MspInit+0x44>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	61d3      	str	r3, [r2, #28]
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_TIM_Base_MspInit+0x44>)
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2102      	movs	r1, #2
 8002b7a:	201c      	movs	r0, #28
 8002b7c:	f000 fb15 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b80:	201c      	movs	r0, #28
 8002b82:	f000 fb2e 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000

08002b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 031c 	add.w	r3, r7, #28
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a45      	ldr	r2, [pc, #276]	; (8002cc4 <HAL_UART_MspInit+0x130>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d146      	bne.n	8002c42 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bb4:	4b44      	ldr	r3, [pc, #272]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	4a43      	ldr	r2, [pc, #268]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bbe:	6193      	str	r3, [r2, #24]
 8002bc0:	4b41      	ldr	r3, [pc, #260]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	4a3d      	ldr	r2, [pc, #244]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bd2:	f043 0308 	orr.w	r3, r3, #8
 8002bd6:	6193      	str	r3, [r2, #24]
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002be4:	2340      	movs	r3, #64	; 0x40
 8002be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4835      	ldr	r0, [pc, #212]	; (8002ccc <HAL_UART_MspInit+0x138>)
 8002bf8:	f000 fbbe 	bl	8003378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	2300      	movs	r3, #0
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	f107 031c 	add.w	r3, r7, #28
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	482f      	ldr	r0, [pc, #188]	; (8002ccc <HAL_UART_MspInit+0x138>)
 8002c10:	f000 fbb2 	bl	8003378 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002c14:	4b2e      	ldr	r3, [pc, #184]	; (8002cd0 <HAL_UART_MspInit+0x13c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c2a:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <HAL_UART_MspInit+0x13c>)
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	2025      	movs	r0, #37	; 0x25
 8002c36:	f000 fab8 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c3a:	2025      	movs	r0, #37	; 0x25
 8002c3c:	f000 fad1 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002c40:	e03c      	b.n	8002cbc <HAL_UART_MspInit+0x128>
  else if(huart->Instance==USART2)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <HAL_UART_MspInit+0x140>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d137      	bne.n	8002cbc <HAL_UART_MspInit+0x128>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	4a1d      	ldr	r2, [pc, #116]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c56:	61d3      	str	r3, [r2, #28]
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c64:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	4a17      	ldr	r2, [pc, #92]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c6a:	f043 0304 	orr.w	r3, r3, #4
 8002c6e:	6193      	str	r3, [r2, #24]
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_UART_MspInit+0x134>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0304 	and.w	r3, r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4812      	ldr	r0, [pc, #72]	; (8002cd8 <HAL_UART_MspInit+0x144>)
 8002c90:	f000 fb72 	bl	8003378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c94:	2308      	movs	r3, #8
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480c      	ldr	r0, [pc, #48]	; (8002cd8 <HAL_UART_MspInit+0x144>)
 8002ca8:	f000 fb66 	bl	8003378 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	2026      	movs	r0, #38	; 0x26
 8002cb2:	f000 fa7a 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cb6:	2026      	movs	r0, #38	; 0x26
 8002cb8:	f000 fa93 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8002cbc:	bf00      	nop
 8002cbe:	3730      	adds	r7, #48	; 0x30
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40013800 	.word	0x40013800
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40010c00 	.word	0x40010c00
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	40010800 	.word	0x40010800

08002cdc <SDTimer_Handler>:
/* USER CODE BEGIN PV */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <SDTimer_Handler+0x3c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d006      	beq.n	8002cf8 <SDTimer_Handler+0x1c>
		Timer1--;
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <SDTimer_Handler+0x3c>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <SDTimer_Handler+0x3c>)
 8002cf6:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0)
 8002cf8:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <SDTimer_Handler+0x40>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d006      	beq.n	8002d10 <SDTimer_Handler+0x34>
		Timer2--;
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <SDTimer_Handler+0x40>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <SDTimer_Handler+0x40>)
 8002d0e:	701a      	strb	r2, [r3, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr
 8002d18:	20000f61 	.word	0x20000f61
 8002d1c:	20000f60 	.word	0x20000f60

08002d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d30:	e7fe      	b.n	8002d30 <HardFault_Handler+0x4>

08002d32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d32:	b480      	push	{r7}
 8002d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d36:	e7fe      	b.n	8002d36 <MemManage_Handler+0x4>

08002d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3c:	e7fe      	b.n	8002d3c <BusFault_Handler+0x4>

08002d3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <UsageFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d60:	bf00      	nop
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002d6c:	4b0a      	ldr	r3, [pc, #40]	; (8002d98 <SysTick_Handler+0x30>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <SysTick_Handler+0x30>)
 8002d78:	701a      	strb	r2, [r3, #0]
	if (FatFsCnt >= 10) {
 8002d7a:	4b07      	ldr	r3, [pc, #28]	; (8002d98 <SysTick_Handler+0x30>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b09      	cmp	r3, #9
 8002d82:	d904      	bls.n	8002d8e <SysTick_Handler+0x26>
		FatFsCnt = 0;
 8002d84:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <SysTick_Handler+0x30>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002d8a:	f7ff ffa7 	bl	8002cdc <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d8e:	f000 f8f7 	bl	8002f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200002b5 	.word	0x200002b5

08002d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002da0:	4803      	ldr	r0, [pc, #12]	; (8002db0 <TIM2_IRQHandler+0x14>)
 8002da2:	f002 fde0 	bl	8005966 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  MS5611 = 1;
 8002da6:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <TIM2_IRQHandler+0x18>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000ca4 	.word	0x20000ca4
 8002db4:	20000332 	.word	0x20000332

08002db8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dbc:	4812      	ldr	r0, [pc, #72]	; (8002e08 <USART1_IRQHandler+0x50>)
 8002dbe:	f003 fa37 	bl	8006230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff, 1);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4911      	ldr	r1, [pc, #68]	; (8002e0c <USART1_IRQHandler+0x54>)
 8002dc6:	4810      	ldr	r0, [pc, #64]	; (8002e08 <USART1_IRQHandler+0x50>)
 8002dc8:	f003 fa01 	bl	80061ce <HAL_UART_Receive_IT>
	if (buff != '\0') {
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <USART1_IRQHandler+0x54>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d016      	beq.n	8002e02 <USART1_IRQHandler+0x4a>
		RX1_BUFF[k] = buff;
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <USART1_IRQHandler+0x58>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <USART1_IRQHandler+0x54>)
 8002ddc:	7819      	ldrb	r1, [r3, #0]
 8002dde:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <USART1_IRQHandler+0x5c>)
 8002de0:	5499      	strb	r1, [r3, r2]
		k++;
 8002de2:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <USART1_IRQHandler+0x58>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <USART1_IRQHandler+0x58>)
 8002dec:	701a      	strb	r2, [r3, #0]
		if (buff == '\n') {
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <USART1_IRQHandler+0x54>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d105      	bne.n	8002e02 <USART1_IRQHandler+0x4a>
			AS = 1;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <USART1_IRQHandler+0x60>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
			k = 0;
 8002dfc:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <USART1_IRQHandler+0x58>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000854 	.word	0x20000854
 8002e0c:	200002b6 	.word	0x200002b6
 8002e10:	20000330 	.word	0x20000330
 8002e14:	200002b8 	.word	0x200002b8
 8002e18:	20000331 	.word	0x20000331

08002e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <USART2_IRQHandler+0x10>)
 8002e22:	f003 fa05 	bl	8006230 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000cec 	.word	0x20000cec

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	; (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f006 ffca 	bl	8009df8 <__errno>
 8002e64:	4602      	mov	r2, r0
 8002e66:	230c      	movs	r3, #12
 8002e68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	; (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20005000 	.word	0x20005000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	20000334 	.word	0x20000334
 8002e98:	200013d0 	.word	0x200013d0

08002e9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eaa:	490d      	ldr	r1, [pc, #52]	; (8002ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eb0:	e002      	b.n	8002eb8 <LoopCopyDataInit>

08002eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb6:	3304      	adds	r3, #4

08002eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ebc:	d3f9      	bcc.n	8002eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec4:	e001      	b.n	8002eca <LoopFillZerobss>

08002ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec8:	3204      	adds	r2, #4

08002eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ecc:	d3fb      	bcc.n	8002ec6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ece:	f7ff ffe5 	bl	8002e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ed2:	f006 ff97 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ed6:	f7ff fa19 	bl	800230c <main>
  bx lr
 8002eda:	4770      	bx	lr
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002ee4:	0800d8d8 	.word	0x0800d8d8
  ldr r2, =_sbss
 8002ee8:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002eec:	200013d0 	.word	0x200013d0

08002ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC1_2_IRQHandler>
	...

08002ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <HAL_Init+0x28>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a07      	ldr	r2, [pc, #28]	; (8002f1c <HAL_Init+0x28>)
 8002efe:	f043 0310 	orr.w	r3, r3, #16
 8002f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f04:	2003      	movs	r0, #3
 8002f06:	f000 f945 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f000 f808 	bl	8002f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fd4e 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40022000 	.word	0x40022000

08002f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_InitTick+0x54>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <HAL_InitTick+0x58>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f95d 	bl	80031fe <HAL_SYSTICK_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00e      	b.n	8002f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b0f      	cmp	r3, #15
 8002f52:	d80a      	bhi.n	8002f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f54:	2200      	movs	r2, #0
 8002f56:	6879      	ldr	r1, [r7, #4]
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f000 f925 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <HAL_InitTick+0x5c>)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000001c 	.word	0x2000001c
 8002f78:	20000024 	.word	0x20000024
 8002f7c:	20000020 	.word	0x20000020

08002f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_IncTick+0x1c>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a03      	ldr	r2, [pc, #12]	; (8002fa0 <HAL_IncTick+0x20>)
 8002f92:	6013      	str	r3, [r2, #0]
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	20000024 	.word	0x20000024
 8002fa0:	20000f64 	.word	0x20000f64

08002fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa8:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <HAL_GetTick+0x10>)
 8002faa:	681b      	ldr	r3, [r3, #0]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr
 8002fb4:	20000f64 	.word	0x20000f64

08002fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff fff0 	bl	8002fa4 <HAL_GetTick>
 8002fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d005      	beq.n	8002fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd2:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_Delay+0x40>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fde:	bf00      	nop
 8002fe0:	f7ff ffe0 	bl	8002fa4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d8f7      	bhi.n	8002fe0 <HAL_Delay+0x28>
  {
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000024 	.word	0x20000024

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	; (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4906      	ldr	r1, [pc, #24]	; (8003094 <__NVIC_EnableIRQ+0x34>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	e000e100 	.word	0xe000e100

08003098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	6039      	str	r1, [r7, #0]
 80030a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	db0a      	blt.n	80030c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	490c      	ldr	r1, [pc, #48]	; (80030e4 <__NVIC_SetPriority+0x4c>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	0112      	lsls	r2, r2, #4
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	440b      	add	r3, r1
 80030bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c0:	e00a      	b.n	80030d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4908      	ldr	r1, [pc, #32]	; (80030e8 <__NVIC_SetPriority+0x50>)
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	3b04      	subs	r3, #4
 80030d0:	0112      	lsls	r2, r2, #4
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	440b      	add	r3, r1
 80030d6:	761a      	strb	r2, [r3, #24]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b089      	sub	sp, #36	; 0x24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f1c3 0307 	rsb	r3, r3, #7
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf28      	it	cs
 800310a:	2304      	movcs	r3, #4
 800310c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3304      	adds	r3, #4
 8003112:	2b06      	cmp	r3, #6
 8003114:	d902      	bls.n	800311c <NVIC_EncodePriority+0x30>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3b03      	subs	r3, #3
 800311a:	e000      	b.n	800311e <NVIC_EncodePriority+0x32>
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43da      	mvns	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	401a      	ands	r2, r3
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003134:	f04f 31ff 	mov.w	r1, #4294967295
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa01 f303 	lsl.w	r3, r1, r3
 800313e:	43d9      	mvns	r1, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003144:	4313      	orrs	r3, r2
         );
}
 8003146:	4618      	mov	r0, r3
 8003148:	3724      	adds	r7, #36	; 0x24
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff90 	bl	8003098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff2d 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff42 	bl	8003044 <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff90 	bl	80030ec <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5f 	bl	8003098 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff35 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e020      	b.n	8003280 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 020e 	bic.w	r2, r2, #14
 800324c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr
	...

0800328c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d005      	beq.n	80032ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2204      	movs	r2, #4
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
 80032ac:	e051      	b.n	8003352 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 020e 	bic.w	r2, r2, #14
 80032bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_DMA_Abort_IT+0xd0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d029      	beq.n	800332c <HAL_DMA_Abort_IT+0xa0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a20      	ldr	r2, [pc, #128]	; (8003360 <HAL_DMA_Abort_IT+0xd4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_DMA_Abort_IT+0x9c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1f      	ldr	r2, [pc, #124]	; (8003364 <HAL_DMA_Abort_IT+0xd8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01a      	beq.n	8003322 <HAL_DMA_Abort_IT+0x96>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <HAL_DMA_Abort_IT+0xdc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d012      	beq.n	800331c <HAL_DMA_Abort_IT+0x90>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <HAL_DMA_Abort_IT+0xe0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00a      	beq.n	8003316 <HAL_DMA_Abort_IT+0x8a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_DMA_Abort_IT+0xe4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d102      	bne.n	8003310 <HAL_DMA_Abort_IT+0x84>
 800330a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800330e:	e00e      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 8003310:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003314:	e00b      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 8003316:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800331a:	e008      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 800331c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003320:	e005      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 8003322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003326:	e002      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 8003328:	2310      	movs	r3, #16
 800332a:	e000      	b.n	800332e <HAL_DMA_Abort_IT+0xa2>
 800332c:	2301      	movs	r3, #1
 800332e:	4a11      	ldr	r2, [pc, #68]	; (8003374 <HAL_DMA_Abort_IT+0xe8>)
 8003330:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
    } 
  }
  return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40020008 	.word	0x40020008
 8003360:	4002001c 	.word	0x4002001c
 8003364:	40020030 	.word	0x40020030
 8003368:	40020044 	.word	0x40020044
 800336c:	40020058 	.word	0x40020058
 8003370:	4002006c 	.word	0x4002006c
 8003374:	40020000 	.word	0x40020000

08003378 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003378:	b480      	push	{r7}
 800337a:	b08b      	sub	sp, #44	; 0x2c
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338a:	e127      	b.n	80035dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800338c:	2201      	movs	r2, #1
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f040 8116 	bne.w	80035d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d034      	beq.n	800341c <HAL_GPIO_Init+0xa4>
 80033b2:	2b12      	cmp	r3, #18
 80033b4:	d80d      	bhi.n	80033d2 <HAL_GPIO_Init+0x5a>
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x9a>
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d804      	bhi.n	80033c8 <HAL_GPIO_Init+0x50>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d031      	beq.n	8003426 <HAL_GPIO_Init+0xae>
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d01c      	beq.n	8003400 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033c6:	e048      	b.n	800345a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d043      	beq.n	8003454 <HAL_GPIO_Init+0xdc>
 80033cc:	2b11      	cmp	r3, #17
 80033ce:	d01b      	beq.n	8003408 <HAL_GPIO_Init+0x90>
          break;
 80033d0:	e043      	b.n	800345a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033d2:	4a89      	ldr	r2, [pc, #548]	; (80035f8 <HAL_GPIO_Init+0x280>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d026      	beq.n	8003426 <HAL_GPIO_Init+0xae>
 80033d8:	4a87      	ldr	r2, [pc, #540]	; (80035f8 <HAL_GPIO_Init+0x280>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d806      	bhi.n	80033ec <HAL_GPIO_Init+0x74>
 80033de:	4a87      	ldr	r2, [pc, #540]	; (80035fc <HAL_GPIO_Init+0x284>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d020      	beq.n	8003426 <HAL_GPIO_Init+0xae>
 80033e4:	4a86      	ldr	r2, [pc, #536]	; (8003600 <HAL_GPIO_Init+0x288>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d01d      	beq.n	8003426 <HAL_GPIO_Init+0xae>
          break;
 80033ea:	e036      	b.n	800345a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033ec:	4a85      	ldr	r2, [pc, #532]	; (8003604 <HAL_GPIO_Init+0x28c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0xae>
 80033f2:	4a85      	ldr	r2, [pc, #532]	; (8003608 <HAL_GPIO_Init+0x290>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d016      	beq.n	8003426 <HAL_GPIO_Init+0xae>
 80033f8:	4a84      	ldr	r2, [pc, #528]	; (800360c <HAL_GPIO_Init+0x294>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d013      	beq.n	8003426 <HAL_GPIO_Init+0xae>
          break;
 80033fe:	e02c      	b.n	800345a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	623b      	str	r3, [r7, #32]
          break;
 8003406:	e028      	b.n	800345a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	3304      	adds	r3, #4
 800340e:	623b      	str	r3, [r7, #32]
          break;
 8003410:	e023      	b.n	800345a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	3308      	adds	r3, #8
 8003418:	623b      	str	r3, [r7, #32]
          break;
 800341a:	e01e      	b.n	800345a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	330c      	adds	r3, #12
 8003422:	623b      	str	r3, [r7, #32]
          break;
 8003424:	e019      	b.n	800345a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800342e:	2304      	movs	r3, #4
 8003430:	623b      	str	r3, [r7, #32]
          break;
 8003432:	e012      	b.n	800345a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800343c:	2308      	movs	r3, #8
 800343e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	611a      	str	r2, [r3, #16]
          break;
 8003446:	e008      	b.n	800345a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003448:	2308      	movs	r3, #8
 800344a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	615a      	str	r2, [r3, #20]
          break;
 8003452:	e002      	b.n	800345a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
          break;
 8003458:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2bff      	cmp	r3, #255	; 0xff
 800345e:	d801      	bhi.n	8003464 <HAL_GPIO_Init+0xec>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	e001      	b.n	8003468 <HAL_GPIO_Init+0xf0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2bff      	cmp	r3, #255	; 0xff
 800346e:	d802      	bhi.n	8003476 <HAL_GPIO_Init+0xfe>
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	e002      	b.n	800347c <HAL_GPIO_Init+0x104>
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	3b08      	subs	r3, #8
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	210f      	movs	r1, #15
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	401a      	ands	r2, r3
 800348e:	6a39      	ldr	r1, [r7, #32]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	431a      	orrs	r2, r3
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8096 	beq.w	80035d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034aa:	4b59      	ldr	r3, [pc, #356]	; (8003610 <HAL_GPIO_Init+0x298>)
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	4a58      	ldr	r2, [pc, #352]	; (8003610 <HAL_GPIO_Init+0x298>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6193      	str	r3, [r2, #24]
 80034b6:	4b56      	ldr	r3, [pc, #344]	; (8003610 <HAL_GPIO_Init+0x298>)
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
 80034c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034c2:	4a54      	ldr	r2, [pc, #336]	; (8003614 <HAL_GPIO_Init+0x29c>)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	089b      	lsrs	r3, r3, #2
 80034c8:	3302      	adds	r3, #2
 80034ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	220f      	movs	r2, #15
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4013      	ands	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_GPIO_Init+0x2a0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_GPIO_Init+0x19e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a4a      	ldr	r2, [pc, #296]	; (800361c <HAL_GPIO_Init+0x2a4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00d      	beq.n	8003512 <HAL_GPIO_Init+0x19a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a49      	ldr	r2, [pc, #292]	; (8003620 <HAL_GPIO_Init+0x2a8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <HAL_GPIO_Init+0x196>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a48      	ldr	r2, [pc, #288]	; (8003624 <HAL_GPIO_Init+0x2ac>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_GPIO_Init+0x192>
 8003506:	2303      	movs	r3, #3
 8003508:	e006      	b.n	8003518 <HAL_GPIO_Init+0x1a0>
 800350a:	2304      	movs	r3, #4
 800350c:	e004      	b.n	8003518 <HAL_GPIO_Init+0x1a0>
 800350e:	2302      	movs	r3, #2
 8003510:	e002      	b.n	8003518 <HAL_GPIO_Init+0x1a0>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <HAL_GPIO_Init+0x1a0>
 8003516:	2300      	movs	r3, #0
 8003518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351a:	f002 0203 	and.w	r2, r2, #3
 800351e:	0092      	lsls	r2, r2, #2
 8003520:	4093      	lsls	r3, r2
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003528:	493a      	ldr	r1, [pc, #232]	; (8003614 <HAL_GPIO_Init+0x29c>)
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	089b      	lsrs	r3, r3, #2
 800352e:	3302      	adds	r3, #2
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003542:	4b39      	ldr	r3, [pc, #228]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	4938      	ldr	r1, [pc, #224]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
 800354e:	e006      	b.n	800355e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	43db      	mvns	r3, r3
 8003558:	4933      	ldr	r1, [pc, #204]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 800355a:	4013      	ands	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800356a:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	492e      	ldr	r1, [pc, #184]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	604b      	str	r3, [r1, #4]
 8003576:	e006      	b.n	8003586 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	43db      	mvns	r3, r3
 8003580:	4929      	ldr	r1, [pc, #164]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003582:	4013      	ands	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	4924      	ldr	r1, [pc, #144]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	491f      	ldr	r1, [pc, #124]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	491a      	ldr	r1, [pc, #104]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60cb      	str	r3, [r1, #12]
 80035c6:	e006      	b.n	80035d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035c8:	4b17      	ldr	r3, [pc, #92]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	4915      	ldr	r1, [pc, #84]	; (8003628 <HAL_GPIO_Init+0x2b0>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	3301      	adds	r3, #1
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f47f aed0 	bne.w	800338c <HAL_GPIO_Init+0x14>
  }
}
 80035ec:	bf00      	nop
 80035ee:	372c      	adds	r7, #44	; 0x2c
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	10210000 	.word	0x10210000
 80035fc:	10110000 	.word	0x10110000
 8003600:	10120000 	.word	0x10120000
 8003604:	10310000 	.word	0x10310000
 8003608:	10320000 	.word	0x10320000
 800360c:	10220000 	.word	0x10220000
 8003610:	40021000 	.word	0x40021000
 8003614:	40010000 	.word	0x40010000
 8003618:	40010800 	.word	0x40010800
 800361c:	40010c00 	.word	0x40010c00
 8003620:	40011000 	.word	0x40011000
 8003624:	40011400 	.word	0x40011400
 8003628:	40010400 	.word	0x40010400

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr

0800365c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800366e:	887a      	ldrh	r2, [r7, #2]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4013      	ands	r3, r2
 8003674:	041a      	lsls	r2, r3, #16
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	43d9      	mvns	r1, r3
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	400b      	ands	r3, r1
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	611a      	str	r2, [r3, #16]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
	...

08003690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e11f      	b.n	80038e2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff f9ac 	bl	8002a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f4:	f001 fc8c 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a7b      	ldr	r2, [pc, #492]	; (80038ec <HAL_I2C_Init+0x25c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d807      	bhi.n	8003714 <HAL_I2C_Init+0x84>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a7a      	ldr	r2, [pc, #488]	; (80038f0 <HAL_I2C_Init+0x260>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e006      	b.n	8003722 <HAL_I2C_Init+0x92>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a77      	ldr	r2, [pc, #476]	; (80038f4 <HAL_I2C_Init+0x264>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0db      	b.n	80038e2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a72      	ldr	r2, [pc, #456]	; (80038f8 <HAL_I2C_Init+0x268>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0c9b      	lsrs	r3, r3, #18
 8003734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a64      	ldr	r2, [pc, #400]	; (80038ec <HAL_I2C_Init+0x25c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <HAL_I2C_Init+0xd4>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	e009      	b.n	8003778 <HAL_I2C_Init+0xe8>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	4a63      	ldr	r2, [pc, #396]	; (80038fc <HAL_I2C_Init+0x26c>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	3301      	adds	r3, #1
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800378a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4956      	ldr	r1, [pc, #344]	; (80038ec <HAL_I2C_Init+0x25c>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d80d      	bhi.n	80037b4 <HAL_I2C_Init+0x124>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e59      	subs	r1, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a6:	3301      	adds	r3, #1
 80037a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	bf38      	it	cc
 80037b0:	2304      	movcc	r3, #4
 80037b2:	e04f      	b.n	8003854 <HAL_I2C_Init+0x1c4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d111      	bne.n	80037e0 <HAL_I2C_Init+0x150>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	440b      	add	r3, r1
 80037ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ce:	3301      	adds	r3, #1
 80037d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e012      	b.n	8003806 <HAL_I2C_Init+0x176>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	0099      	lsls	r1, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Init+0x17e>
 800380a:	2301      	movs	r3, #1
 800380c:	e022      	b.n	8003854 <HAL_I2C_Init+0x1c4>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10e      	bne.n	8003834 <HAL_I2C_Init+0x1a4>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1e58      	subs	r0, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	440b      	add	r3, r1
 8003824:	fbb0 f3f3 	udiv	r3, r0, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003832:	e00f      	b.n	8003854 <HAL_I2C_Init+0x1c4>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1e58      	subs	r0, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	0099      	lsls	r1, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	fbb0 f3f3 	udiv	r3, r0, r3
 800384a:	3301      	adds	r3, #1
 800384c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	6809      	ldr	r1, [r1, #0]
 8003858:	4313      	orrs	r3, r2
 800385a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69da      	ldr	r2, [r3, #28]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6911      	ldr	r1, [r2, #16]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	68d2      	ldr	r2, [r2, #12]
 800388e:	4311      	orrs	r1, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6812      	ldr	r2, [r2, #0]
 8003894:	430b      	orrs	r3, r1
 8003896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	695a      	ldr	r2, [r3, #20]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2220      	movs	r2, #32
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	000186a0 	.word	0x000186a0
 80038f0:	001e847f 	.word	0x001e847f
 80038f4:	003d08ff 	.word	0x003d08ff
 80038f8:	431bde83 	.word	0x431bde83
 80038fc:	10624dd3 	.word	0x10624dd3

08003900 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	817b      	strh	r3, [r7, #10]
 8003910:	4613      	mov	r3, r2
 8003912:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003914:	f7ff fb46 	bl	8002fa4 <HAL_GetTick>
 8003918:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	f040 80e0 	bne.w	8003ae8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	2319      	movs	r3, #25
 800392e:	2201      	movs	r2, #1
 8003930:	4970      	ldr	r1, [pc, #448]	; (8003af4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fdba 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	e0d3      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_I2C_Master_Transmit+0x50>
 800394c:	2302      	movs	r3, #2
 800394e:	e0cc      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d007      	beq.n	8003976 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003984:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	; 0x21
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2210      	movs	r2, #16
 8003992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	893a      	ldrh	r2, [r7, #8]
 80039a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4a50      	ldr	r2, [pc, #320]	; (8003af8 <HAL_I2C_Master_Transmit+0x1f8>)
 80039b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039b8:	8979      	ldrh	r1, [r7, #10]
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fc24 	bl	800420c <I2C_MasterRequestWrite>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e08d      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	613b      	str	r3, [r7, #16]
 80039e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039e4:	e066      	b.n	8003ab4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	6a39      	ldr	r1, [r7, #32]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fe34 	bl	8004658 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00d      	beq.n	8003a12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d107      	bne.n	8003a0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e06b      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d11b      	bne.n	8003a88 <HAL_I2C_Master_Transmit+0x188>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a80:	3b01      	subs	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	6a39      	ldr	r1, [r7, #32]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fe24 	bl	80046da <I2C_WaitOnBTFFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d107      	bne.n	8003ab0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e01a      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d194      	bne.n	80039e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e000      	b.n	8003aea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	00100002 	.word	0x00100002
 8003af8:	ffff0000 	.word	0xffff0000

08003afc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08c      	sub	sp, #48	; 0x30
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	461a      	mov	r2, r3
 8003b08:	460b      	mov	r3, r1
 8003b0a:	817b      	strh	r3, [r7, #10]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b14:	f7ff fa46 	bl	8002fa4 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	f040 8238 	bne.w	8003f98 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2319      	movs	r3, #25
 8003b2e:	2201      	movs	r2, #1
 8003b30:	497e      	ldr	r1, [pc, #504]	; (8003d2c <HAL_I2C_Master_Receive+0x230>)
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fcba 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e22b      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2C_Master_Receive+0x54>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e224      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d007      	beq.n	8003b76 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2222      	movs	r2, #34	; 0x22
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2210      	movs	r2, #16
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	893a      	ldrh	r2, [r7, #8]
 8003ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_I2C_Master_Receive+0x234>)
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003bb8:	8979      	ldrh	r1, [r7, #10]
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fba6 	bl	8004310 <I2C_MasterRequestRead>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e1e5      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d113      	bne.n	8003bfe <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	e1b9      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d11d      	bne.n	8003c42 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c14:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	61bb      	str	r3, [r7, #24]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c3e:	b662      	cpsie	i
 8003c40:	e197      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d11d      	bne.n	8003c86 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003c5a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c82:	b662      	cpsie	i
 8003c84:	e175      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	613b      	str	r3, [r7, #16]
 8003caa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003cac:	e161      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	f200 811a 	bhi.w	8003eec <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d123      	bne.n	8003d08 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 fd49 	bl	800475c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e162      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691a      	ldr	r2, [r3, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d06:	e134      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d150      	bne.n	8003db2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	2200      	movs	r2, #0
 8003d18:	4906      	ldr	r1, [pc, #24]	; (8003d34 <HAL_I2C_Master_Receive+0x238>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fbc6 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e137      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
 8003d2a:	bf00      	nop
 8003d2c:	00100002 	.word	0x00100002
 8003d30:	ffff0000 	.word	0xffff0000
 8003d34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d38:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d48:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003db0:	e0df      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2200      	movs	r2, #0
 8003dba:	497a      	ldr	r1, [pc, #488]	; (8003fa4 <HAL_I2C_Master_Receive+0x4a8>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fb75 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0e6      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	1c5a      	adds	r2, r3, #1
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e10:	4b65      	ldr	r3, [pc, #404]	; (8003fa8 <HAL_I2C_Master_Receive+0x4ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	08db      	lsrs	r3, r3, #3
 8003e16:	4a65      	ldr	r2, [pc, #404]	; (8003fac <HAL_I2C_Master_Receive+0x4b0>)
 8003e18:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1c:	0a1a      	lsrs	r2, r3, #8
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00da      	lsls	r2, r3, #3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d117      	bne.n	8003e66 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003e58:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e099      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d1da      	bne.n	8003e2a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eb6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eea:	e042      	b.n	8003f72 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fc33 	bl	800475c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e04c      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691a      	ldr	r2, [r3, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b04      	cmp	r3, #4
 8003f3e:	d118      	bne.n	8003f72 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f47f ae99 	bne.w	8003cae <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	e000      	b.n	8003f9a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8003f98:	2302      	movs	r3, #2
  }
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3728      	adds	r7, #40	; 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	00010004 	.word	0x00010004
 8003fa8:	2000001c 	.word	0x2000001c
 8003fac:	14f8b589 	.word	0x14f8b589

08003fb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fc0:	f7fe fff0 	bl	8002fa4 <HAL_GetTick>
 8003fc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	f040 8111 	bne.w	80041fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2319      	movs	r3, #25
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4988      	ldr	r1, [pc, #544]	; (8004204 <HAL_I2C_IsDeviceReady+0x254>)
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa62 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e104      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_I2C_IsDeviceReady+0x50>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e0fd      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d007      	beq.n	8004026 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2224      	movs	r2, #36	; 0x24
 800403a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4a70      	ldr	r2, [pc, #448]	; (8004208 <HAL_I2C_IsDeviceReady+0x258>)
 8004048:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004058:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa20 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00d      	beq.n	800408e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004080:	d103      	bne.n	800408a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e0b6      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800408e:	897b      	ldrh	r3, [r7, #10]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800409c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800409e:	f7fe ff81 	bl	8002fa4 <HAL_GetTick>
 80040a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	bf0c      	ite	eq
 80040b2:	2301      	moveq	r3, #1
 80040b4:	2300      	movne	r3, #0
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040d2:	e025      	b.n	8004120 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fe ff66 	bl	8002fa4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <HAL_I2C_IsDeviceReady+0x13a>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	22a0      	movs	r2, #160	; 0xa0
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2ba0      	cmp	r3, #160	; 0xa0
 800412a:	d005      	beq.n	8004138 <HAL_I2C_IsDeviceReady+0x188>
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_I2C_IsDeviceReady+0x188>
 8004132:	7dbb      	ldrb	r3, [r7, #22]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0cd      	beq.n	80040d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b02      	cmp	r3, #2
 800414c:	d129      	bne.n	80041a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	613b      	str	r3, [r7, #16]
 8004172:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2319      	movs	r3, #25
 800417a:	2201      	movs	r2, #1
 800417c:	4921      	ldr	r1, [pc, #132]	; (8004204 <HAL_I2C_IsDeviceReady+0x254>)
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f994 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e036      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e02c      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2319      	movs	r3, #25
 80041c2:	2201      	movs	r2, #1
 80041c4:	490f      	ldr	r1, [pc, #60]	; (8004204 <HAL_I2C_IsDeviceReady+0x254>)
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f970 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e012      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3301      	adds	r3, #1
 80041da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	f4ff af32 	bcc.w	800404a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e000      	b.n	80041fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
  }
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	00100002 	.word	0x00100002
 8004208:	ffff0000 	.word	0xffff0000

0800420c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	460b      	mov	r3, r1
 800421a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d006      	beq.n	8004236 <I2C_MasterRequestWrite+0x2a>
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b01      	cmp	r3, #1
 800422c:	d003      	beq.n	8004236 <I2C_MasterRequestWrite+0x2a>
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004234:	d108      	bne.n	8004248 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e00b      	b.n	8004260 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b12      	cmp	r3, #18
 800424e:	d107      	bne.n	8004260 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 f91d 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	d103      	bne.n	8004290 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e035      	b.n	8004300 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429c:	d108      	bne.n	80042b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	461a      	mov	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042ac:	611a      	str	r2, [r3, #16]
 80042ae:	e01b      	b.n	80042e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b0:	897b      	ldrh	r3, [r7, #10]
 80042b2:	11db      	asrs	r3, r3, #7
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0306 	and.w	r3, r3, #6
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f063 030f 	orn	r3, r3, #15
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	490e      	ldr	r1, [pc, #56]	; (8004308 <I2C_MasterRequestWrite+0xfc>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f943 	bl	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e010      	b.n	8004300 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	4907      	ldr	r1, [pc, #28]	; (800430c <I2C_MasterRequestWrite+0x100>)
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f933 	bl	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00010008 	.word	0x00010008
 800430c:	00010002 	.word	0x00010002

08004310 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	460b      	mov	r3, r1
 800431e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004334:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d006      	beq.n	800434a <I2C_MasterRequestRead+0x3a>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d003      	beq.n	800434a <I2C_MasterRequestRead+0x3a>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004348:	d108      	bne.n	800435c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e00b      	b.n	8004374 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	2b11      	cmp	r3, #17
 8004362:	d107      	bne.n	8004374 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004372:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f893 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00d      	beq.n	80043a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439a:	d103      	bne.n	80043a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e079      	b.n	800449c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043b0:	d108      	bne.n	80043c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043b2:	897b      	ldrh	r3, [r7, #10]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
 80043c2:	e05f      	b.n	8004484 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80043c4:	897b      	ldrh	r3, [r7, #10]
 80043c6:	11db      	asrs	r3, r3, #7
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0306 	and.w	r3, r3, #6
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f063 030f 	orn	r3, r3, #15
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4930      	ldr	r1, [pc, #192]	; (80044a4 <I2C_MasterRequestRead+0x194>)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f8b9 	bl	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e054      	b.n	800449c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80043f2:	897b      	ldrh	r3, [r7, #10]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	4929      	ldr	r1, [pc, #164]	; (80044a8 <I2C_MasterRequestRead+0x198>)
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f8a9 	bl	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e044      	b.n	800449c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	613b      	str	r3, [r7, #16]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	613b      	str	r3, [r7, #16]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004436:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f831 	bl	80044ac <I2C_WaitOnFlagUntilTimeout>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00d      	beq.n	800446c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800445e:	d103      	bne.n	8004468 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004466:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e017      	b.n	800449c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	11db      	asrs	r3, r3, #7
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f063 030e 	orn	r3, r3, #14
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4907      	ldr	r1, [pc, #28]	; (80044a8 <I2C_MasterRequestRead+0x198>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f865 	bl	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	00010008 	.word	0x00010008
 80044a8:	00010002 	.word	0x00010002

080044ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	4613      	mov	r3, r2
 80044ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044bc:	e025      	b.n	800450a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d021      	beq.n	800450a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe fd6d 	bl	8002fa4 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d116      	bne.n	800450a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f043 0220 	orr.w	r2, r3, #32
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e023      	b.n	8004552 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d10d      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	43da      	mvns	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4013      	ands	r3, r2
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf0c      	ite	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	2300      	movne	r3, #0
 800452a:	b2db      	uxtb	r3, r3
 800452c:	461a      	mov	r2, r3
 800452e:	e00c      	b.n	800454a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	43da      	mvns	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4013      	ands	r3, r2
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	429a      	cmp	r2, r3
 800454e:	d0b6      	beq.n	80044be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b084      	sub	sp, #16
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004568:	e051      	b.n	800460e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004578:	d123      	bne.n	80045c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004592:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2220      	movs	r2, #32
 800459e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f043 0204 	orr.w	r2, r3, #4
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e046      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d021      	beq.n	800460e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ca:	f7fe fceb 	bl	8002fa4 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d302      	bcc.n	80045e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d116      	bne.n	800460e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e020      	b.n	8004650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	0c1b      	lsrs	r3, r3, #16
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10c      	bne.n	8004632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	bf14      	ite	ne
 800462a:	2301      	movne	r3, #1
 800462c:	2300      	moveq	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	e00b      	b.n	800464a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	43da      	mvns	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	4013      	ands	r3, r2
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	bf14      	ite	ne
 8004644:	2301      	movne	r3, #1
 8004646:	2300      	moveq	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d18d      	bne.n	800456a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004664:	e02d      	b.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f8ce 	bl	8004808 <I2C_IsAcknowledgeFailed>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e02d      	b.n	80046d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d021      	beq.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467e:	f7fe fc91 	bl	8002fa4 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	f043 0220 	orr.w	r2, r3, #32
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e007      	b.n	80046d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b80      	cmp	r3, #128	; 0x80
 80046ce:	d1ca      	bne.n	8004666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	60f8      	str	r0, [r7, #12]
 80046e2:	60b9      	str	r1, [r7, #8]
 80046e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046e6:	e02d      	b.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 f88d 	bl	8004808 <I2C_IsAcknowledgeFailed>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e02d      	b.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d021      	beq.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004700:	f7fe fc50 	bl	8002fa4 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	429a      	cmp	r2, r3
 800470e:	d302      	bcc.n	8004716 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d116      	bne.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e007      	b.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b04      	cmp	r3, #4
 8004750:	d1ca      	bne.n	80046e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004768:	e042      	b.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695b      	ldr	r3, [r3, #20]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b10      	cmp	r3, #16
 8004776:	d119      	bne.n	80047ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f06f 0210 	mvn.w	r2, #16
 8004780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2220      	movs	r2, #32
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e029      	b.n	8004800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ac:	f7fe fbfa 	bl	8002fa4 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d302      	bcc.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d116      	bne.n	80047f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e007      	b.n	8004800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b40      	cmp	r3, #64	; 0x40
 80047fc:	d1b5      	bne.n	800476a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d11b      	bne.n	8004858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e000      	b.n	800485a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e26c      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8087 	beq.w	8004992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004884:	4b92      	ldr	r3, [pc, #584]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b04      	cmp	r3, #4
 800488e:	d00c      	beq.n	80048aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004890:	4b8f      	ldr	r3, [pc, #572]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 030c 	and.w	r3, r3, #12
 8004898:	2b08      	cmp	r3, #8
 800489a:	d112      	bne.n	80048c2 <HAL_RCC_OscConfig+0x5e>
 800489c:	4b8c      	ldr	r3, [pc, #560]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a8:	d10b      	bne.n	80048c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048aa:	4b89      	ldr	r3, [pc, #548]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d06c      	beq.n	8004990 <HAL_RCC_OscConfig+0x12c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d168      	bne.n	8004990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e246      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d106      	bne.n	80048da <HAL_RCC_OscConfig+0x76>
 80048cc:	4b80      	ldr	r3, [pc, #512]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a7f      	ldr	r2, [pc, #508]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e02e      	b.n	8004938 <HAL_RCC_OscConfig+0xd4>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCC_OscConfig+0x98>
 80048e2:	4b7b      	ldr	r3, [pc, #492]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7a      	ldr	r2, [pc, #488]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	4b78      	ldr	r3, [pc, #480]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a77      	ldr	r2, [pc, #476]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	e01d      	b.n	8004938 <HAL_RCC_OscConfig+0xd4>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004904:	d10c      	bne.n	8004920 <HAL_RCC_OscConfig+0xbc>
 8004906:	4b72      	ldr	r3, [pc, #456]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a71      	ldr	r2, [pc, #452]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 800490c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	4b6f      	ldr	r3, [pc, #444]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a6e      	ldr	r2, [pc, #440]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e00b      	b.n	8004938 <HAL_RCC_OscConfig+0xd4>
 8004920:	4b6b      	ldr	r3, [pc, #428]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a6a      	ldr	r2, [pc, #424]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	4b68      	ldr	r3, [pc, #416]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a67      	ldr	r2, [pc, #412]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe fb30 	bl	8002fa4 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004948:	f7fe fb2c 	bl	8002fa4 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	; 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e1fa      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b5d      	ldr	r3, [pc, #372]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0f0      	beq.n	8004948 <HAL_RCC_OscConfig+0xe4>
 8004966:	e014      	b.n	8004992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fe fb1c 	bl	8002fa4 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004970:	f7fe fb18 	bl	8002fa4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e1e6      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004982:	4b53      	ldr	r3, [pc, #332]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x10c>
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d063      	beq.n	8004a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800499e:	4b4c      	ldr	r3, [pc, #304]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 030c 	and.w	r3, r3, #12
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00b      	beq.n	80049c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049aa:	4b49      	ldr	r3, [pc, #292]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d11c      	bne.n	80049f0 <HAL_RCC_OscConfig+0x18c>
 80049b6:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d116      	bne.n	80049f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	4b43      	ldr	r3, [pc, #268]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x176>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d001      	beq.n	80049da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e1ba      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049da:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4939      	ldr	r1, [pc, #228]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ee:	e03a      	b.n	8004a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d020      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049f8:	4b36      	ldr	r3, [pc, #216]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fe:	f7fe fad1 	bl	8002fa4 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a06:	f7fe facd 	bl	8002fa4 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e19b      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a18:	4b2d      	ldr	r3, [pc, #180]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4927      	ldr	r1, [pc, #156]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	600b      	str	r3, [r1, #0]
 8004a38:	e015      	b.n	8004a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_RCC_OscConfig+0x270>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a40:	f7fe fab0 	bl	8002fa4 <HAL_GetTick>
 8004a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a48:	f7fe faac 	bl	8002fa4 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d901      	bls.n	8004a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e17a      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	4b1d      	ldr	r3, [pc, #116]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f0      	bne.n	8004a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d03a      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d019      	beq.n	8004aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_RCC_OscConfig+0x274>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a80:	f7fe fa90 	bl	8002fa4 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a88:	f7fe fa8c 	bl	8002fa4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e15a      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9a:	4b0d      	ldr	r3, [pc, #52]	; (8004ad0 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f000 fada 	bl	8005060 <RCC_Delay>
 8004aac:	e01c      	b.n	8004ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_OscConfig+0x274>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab4:	f7fe fa76 	bl	8002fa4 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aba:	e00f      	b.n	8004adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004abc:	f7fe fa72 	bl	8002fa4 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d908      	bls.n	8004adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e140      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	42420000 	.word	0x42420000
 8004ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	4b9e      	ldr	r3, [pc, #632]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e9      	bne.n	8004abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80a6 	beq.w	8004c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af6:	2300      	movs	r3, #0
 8004af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afa:	4b97      	ldr	r3, [pc, #604]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10d      	bne.n	8004b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b06:	4b94      	ldr	r3, [pc, #592]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	4a93      	ldr	r2, [pc, #588]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	61d3      	str	r3, [r2, #28]
 8004b12:	4b91      	ldr	r3, [pc, #580]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b8e      	ldr	r3, [pc, #568]	; (8004d5c <HAL_RCC_OscConfig+0x4f8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d118      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b8b      	ldr	r3, [pc, #556]	; (8004d5c <HAL_RCC_OscConfig+0x4f8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a8a      	ldr	r2, [pc, #552]	; (8004d5c <HAL_RCC_OscConfig+0x4f8>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fa33 	bl	8002fa4 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fe fa2f 	bl	8002fa4 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	; 0x64
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0fd      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <HAL_RCC_OscConfig+0x4f8>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x312>
 8004b68:	4b7b      	ldr	r3, [pc, #492]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	4a7a      	ldr	r2, [pc, #488]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6213      	str	r3, [r2, #32]
 8004b74:	e02d      	b.n	8004bd2 <HAL_RCC_OscConfig+0x36e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x334>
 8004b7e:	4b76      	ldr	r3, [pc, #472]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	4a75      	ldr	r2, [pc, #468]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b84:	f023 0301 	bic.w	r3, r3, #1
 8004b88:	6213      	str	r3, [r2, #32]
 8004b8a:	4b73      	ldr	r3, [pc, #460]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	4a72      	ldr	r2, [pc, #456]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004b90:	f023 0304 	bic.w	r3, r3, #4
 8004b94:	6213      	str	r3, [r2, #32]
 8004b96:	e01c      	b.n	8004bd2 <HAL_RCC_OscConfig+0x36e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b05      	cmp	r3, #5
 8004b9e:	d10c      	bne.n	8004bba <HAL_RCC_OscConfig+0x356>
 8004ba0:	4b6d      	ldr	r3, [pc, #436]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4a6c      	ldr	r2, [pc, #432]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004ba6:	f043 0304 	orr.w	r3, r3, #4
 8004baa:	6213      	str	r3, [r2, #32]
 8004bac:	4b6a      	ldr	r3, [pc, #424]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	4a69      	ldr	r2, [pc, #420]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6213      	str	r3, [r2, #32]
 8004bb8:	e00b      	b.n	8004bd2 <HAL_RCC_OscConfig+0x36e>
 8004bba:	4b67      	ldr	r3, [pc, #412]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4a66      	ldr	r2, [pc, #408]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6213      	str	r3, [r2, #32]
 8004bc6:	4b64      	ldr	r3, [pc, #400]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	4a63      	ldr	r2, [pc, #396]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bcc:	f023 0304 	bic.w	r3, r3, #4
 8004bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d015      	beq.n	8004c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bda:	f7fe f9e3 	bl	8002fa4 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	e00a      	b.n	8004bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004be2:	f7fe f9df 	bl	8002fa4 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e0ab      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	4b57      	ldr	r3, [pc, #348]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0ee      	beq.n	8004be2 <HAL_RCC_OscConfig+0x37e>
 8004c04:	e014      	b.n	8004c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c06:	f7fe f9cd 	bl	8002fa4 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	e00a      	b.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c0e:	f7fe f9c9 	bl	8002fa4 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e095      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	4b4c      	ldr	r3, [pc, #304]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1ee      	bne.n	8004c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c30:	7dfb      	ldrb	r3, [r7, #23]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c36:	4b48      	ldr	r3, [pc, #288]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4a47      	ldr	r2, [pc, #284]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 8081 	beq.w	8004d4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d061      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d146      	bne.n	8004cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c60:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <HAL_RCC_OscConfig+0x4fc>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c66:	f7fe f99d 	bl	8002fa4 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c6e:	f7fe f999 	bl	8002fa4 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e067      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c80:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c94:	d108      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	492d      	ldr	r1, [pc, #180]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a19      	ldr	r1, [r3, #32]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	4927      	ldr	r1, [pc, #156]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_RCC_OscConfig+0x4fc>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fe f96d 	bl	8002fa4 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cce:	f7fe f969 	bl	8002fa4 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e037      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ce0:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x46a>
 8004cec:	e02f      	b.n	8004d4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	4b1c      	ldr	r3, [pc, #112]	; (8004d60 <HAL_RCC_OscConfig+0x4fc>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fe f956 	bl	8002fa4 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fe f952 	bl	8002fa4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e020      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x498>
 8004d1a:	e018      	b.n	8004d4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e013      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <HAL_RCC_OscConfig+0x4f4>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d106      	bne.n	8004d4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	42420060 	.word	0x42420060

08004d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0d0      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d78:	4b6a      	ldr	r3, [pc, #424]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d910      	bls.n	8004da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d86:	4b67      	ldr	r3, [pc, #412]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f023 0207 	bic.w	r2, r3, #7
 8004d8e:	4965      	ldr	r1, [pc, #404]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d96:	4b63      	ldr	r3, [pc, #396]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0b8      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d020      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0304 	and.w	r3, r3, #4
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc0:	4b59      	ldr	r3, [pc, #356]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	4a58      	ldr	r2, [pc, #352]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dd8:	4b53      	ldr	r3, [pc, #332]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a52      	ldr	r2, [pc, #328]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004de4:	4b50      	ldr	r3, [pc, #320]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	494d      	ldr	r1, [pc, #308]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d040      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e0a:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d115      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e07f      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e22:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e073      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e32:	4b3d      	ldr	r3, [pc, #244]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06b      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e42:	4b39      	ldr	r3, [pc, #228]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f023 0203 	bic.w	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	4936      	ldr	r1, [pc, #216]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e54:	f7fe f8a6 	bl	8002fa4 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	e00a      	b.n	8004e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5c:	f7fe f8a2 	bl	8002fa4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e053      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f003 020c 	and.w	r2, r3, #12
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d1eb      	bne.n	8004e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e84:	4b27      	ldr	r3, [pc, #156]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d210      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b24      	ldr	r3, [pc, #144]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 0207 	bic.w	r2, r3, #7
 8004e9a:	4922      	ldr	r1, [pc, #136]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e032      	b.n	8004f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec0:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4916      	ldr	r1, [pc, #88]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ede:	4b12      	ldr	r3, [pc, #72]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	490e      	ldr	r1, [pc, #56]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ef2:	f000 f821 	bl	8004f38 <HAL_RCC_GetSysClockFreq>
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCC_ClockConfig+0x1c4>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	f003 030f 	and.w	r3, r3, #15
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <HAL_RCC_ClockConfig+0x1c8>)
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	fa21 f303 	lsr.w	r3, r1, r3
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_RCC_ClockConfig+0x1cc>)
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f0e:	4b09      	ldr	r3, [pc, #36]	; (8004f34 <HAL_RCC_ClockConfig+0x1d0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe f804 	bl	8002f20 <HAL_InitTick>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40022000 	.word	0x40022000
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	0800d0c0 	.word	0x0800d0c0
 8004f30:	2000001c 	.word	0x2000001c
 8004f34:	20000020 	.word	0x20000020

08004f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f38:	b490      	push	{r4, r7}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f40:	1d3c      	adds	r4, r7, #4
 8004f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f48:	4b28      	ldr	r3, [pc, #160]	; (8004fec <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f62:	4b23      	ldr	r3, [pc, #140]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d002      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x40>
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x46>
 8004f76:	e02d      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f78:	4b1e      	ldr	r3, [pc, #120]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f7a:	623b      	str	r3, [r7, #32]
      break;
 8004f7c:	e02d      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	0c9b      	lsrs	r3, r3, #18
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d013      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0c5b      	lsrs	r3, r3, #17
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004faa:	4413      	add	r3, r2
 8004fac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004fb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fb6:	fb02 f203 	mul.w	r2, r2, r3
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e004      	b.n	8004fce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4a0c      	ldr	r2, [pc, #48]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fc8:	fb02 f303 	mul.w	r3, r2, r3
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd0:	623b      	str	r3, [r7, #32]
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fd6:	623b      	str	r3, [r7, #32]
      break;
 8004fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fda:	6a3b      	ldr	r3, [r7, #32]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc90      	pop	{r4, r7}
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	0800d064 	.word	0x0800d064
 8004fec:	0800d074 	.word	0x0800d074
 8004ff0:	40021000 	.word	0x40021000
 8004ff4:	007a1200 	.word	0x007a1200
 8004ff8:	003d0900 	.word	0x003d0900

08004ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <HAL_RCC_GetHCLKFreq+0x10>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	2000001c 	.word	0x2000001c

08005010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005014:	f7ff fff2 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005018:	4601      	mov	r1, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	0a1b      	lsrs	r3, r3, #8
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4a03      	ldr	r2, [pc, #12]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005026:	5cd3      	ldrb	r3, [r2, r3]
 8005028:	fa21 f303 	lsr.w	r3, r1, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	0800d0d0 	.word	0x0800d0d0

08005038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800503c:	f7ff ffde 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005040:	4601      	mov	r1, r0
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	0adb      	lsrs	r3, r3, #11
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	4a03      	ldr	r2, [pc, #12]	; (800505c <HAL_RCC_GetPCLK2Freq+0x24>)
 800504e:	5cd3      	ldrb	r3, [r2, r3]
 8005050:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005054:	4618      	mov	r0, r3
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40021000 	.word	0x40021000
 800505c:	0800d0d0 	.word	0x0800d0d0

08005060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <RCC_Delay+0x34>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <RCC_Delay+0x38>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0a5b      	lsrs	r3, r3, #9
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800507c:	bf00      	nop
  }
  while (Delay --);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1e5a      	subs	r2, r3, #1
 8005082:	60fa      	str	r2, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f9      	bne.n	800507c <RCC_Delay+0x1c>
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000001c 	.word	0x2000001c
 8005098:	10624dd3 	.word	0x10624dd3

0800509c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e076      	b.n	800519c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d108      	bne.n	80050c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050be:	d009      	beq.n	80050d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	61da      	str	r2, [r3, #28]
 80050c6:	e005      	b.n	80050d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fd fce0 	bl	8002ab4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005126:	431a      	orrs	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	431a      	orrs	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	ea42 0103 	orr.w	r1, r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	0c1a      	lsrs	r2, r3, #16
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f002 0204 	and.w	r2, r2, #4
 800517a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800518a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	4613      	mov	r3, r2
 80051b2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d101      	bne.n	80051c6 <HAL_SPI_Transmit+0x22>
 80051c2:	2302      	movs	r3, #2
 80051c4:	e126      	b.n	8005414 <HAL_SPI_Transmit+0x270>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051ce:	f7fd fee9 	bl	8002fa4 <HAL_GetTick>
 80051d2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051d4:	88fb      	ldrh	r3, [r7, #6]
 80051d6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d002      	beq.n	80051ea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051e4:	2302      	movs	r3, #2
 80051e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051e8:	e10b      	b.n	8005402 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_Transmit+0x52>
 80051f0:	88fb      	ldrh	r3, [r7, #6]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051fa:	e102      	b.n	8005402 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2203      	movs	r2, #3
 8005200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	88fa      	ldrh	r2, [r7, #6]
 8005214:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005242:	d10f      	bne.n	8005264 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005252:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005262:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526e:	2b40      	cmp	r3, #64	; 0x40
 8005270:	d007      	beq.n	8005282 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005280:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800528a:	d14b      	bne.n	8005324 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_SPI_Transmit+0xf6>
 8005294:	8afb      	ldrh	r3, [r7, #22]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d13e      	bne.n	8005318 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	881a      	ldrh	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	1c9a      	adds	r2, r3, #2
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052be:	e02b      	b.n	8005318 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d112      	bne.n	80052f4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	881a      	ldrh	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	1c9a      	adds	r2, r3, #2
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80052f2:	e011      	b.n	8005318 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f4:	f7fd fe56 	bl	8002fa4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	429a      	cmp	r2, r3
 8005302:	d803      	bhi.n	800530c <HAL_SPI_Transmit+0x168>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d102      	bne.n	8005312 <HAL_SPI_Transmit+0x16e>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d102      	bne.n	8005318 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005316:	e074      	b.n	8005402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1ce      	bne.n	80052c0 <HAL_SPI_Transmit+0x11c>
 8005322:	e04c      	b.n	80053be <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_SPI_Transmit+0x18e>
 800532c:	8afb      	ldrh	r3, [r7, #22]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d140      	bne.n	80053b4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	330c      	adds	r3, #12
 800533c:	7812      	ldrb	r2, [r2, #0]
 800533e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005358:	e02c      	b.n	80053b4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b02      	cmp	r3, #2
 8005366:	d113      	bne.n	8005390 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	7812      	ldrb	r2, [r2, #0]
 8005374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	86da      	strh	r2, [r3, #54]	; 0x36
 800538e:	e011      	b.n	80053b4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005390:	f7fd fe08 	bl	8002fa4 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d803      	bhi.n	80053a8 <HAL_SPI_Transmit+0x204>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d102      	bne.n	80053ae <HAL_SPI_Transmit+0x20a>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053b2:	e026      	b.n	8005402 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1cd      	bne.n	800535a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fa62 	bl	800588c <SPI_EndRxTxTransaction>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10a      	bne.n	80053f2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	613b      	str	r3, [r7, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e000      	b.n	8005402 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005412:	7ffb      	ldrb	r3, [r7, #31]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	; 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800542a:	2301      	movs	r3, #1
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_SPI_TransmitReceive+0x26>
 800543e:	2302      	movs	r3, #2
 8005440:	e18a      	b.n	8005758 <HAL_SPI_TransmitReceive+0x33c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800544a:	f7fd fdab 	bl	8002fa4 <HAL_GetTick>
 800544e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005460:	887b      	ldrh	r3, [r7, #2]
 8005462:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005468:	2b01      	cmp	r3, #1
 800546a:	d00f      	beq.n	800548c <HAL_SPI_TransmitReceive+0x70>
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005472:	d107      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d103      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x68>
 800547c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005480:	2b04      	cmp	r3, #4
 8005482:	d003      	beq.n	800548c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800548a:	e15b      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_SPI_TransmitReceive+0x82>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_SPI_TransmitReceive+0x82>
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054a4:	e14e      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d003      	beq.n	80054ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2205      	movs	r2, #5
 80054b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	887a      	ldrh	r2, [r7, #2]
 80054ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	887a      	ldrh	r2, [r7, #2]
 80054d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	887a      	ldrh	r2, [r7, #2]
 80054e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d007      	beq.n	800550e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005516:	d178      	bne.n	800560a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_SPI_TransmitReceive+0x10a>
 8005520:	8b7b      	ldrh	r3, [r7, #26]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d166      	bne.n	80055f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800554a:	e053      	b.n	80055f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d11b      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x176>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d016      	beq.n	8005592 <HAL_SPI_TransmitReceive+0x176>
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d113      	bne.n	8005592 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	881a      	ldrh	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	1c9a      	adds	r2, r3, #2
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005584:	b29b      	uxth	r3, r3
 8005586:	3b01      	subs	r3, #1
 8005588:	b29a      	uxth	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b01      	cmp	r3, #1
 800559e:	d119      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x1b8>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d014      	beq.n	80055d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	b292      	uxth	r2, r2
 80055b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	1c9a      	adds	r2, r3, #2
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055d4:	f7fd fce6 	bl	8002fa4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d807      	bhi.n	80055f4 <HAL_SPI_TransmitReceive+0x1d8>
 80055e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ea:	d003      	beq.n	80055f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80055f2:	e0a7      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1a6      	bne.n	800554c <HAL_SPI_TransmitReceive+0x130>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005602:	b29b      	uxth	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1a1      	bne.n	800554c <HAL_SPI_TransmitReceive+0x130>
 8005608:	e07c      	b.n	8005704 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_TransmitReceive+0x1fc>
 8005612:	8b7b      	ldrh	r3, [r7, #26]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d16b      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	330c      	adds	r3, #12
 8005622:	7812      	ldrb	r2, [r2, #0]
 8005624:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800563e:	e057      	b.n	80056f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b02      	cmp	r3, #2
 800564c:	d11c      	bne.n	8005688 <HAL_SPI_TransmitReceive+0x26c>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d017      	beq.n	8005688 <HAL_SPI_TransmitReceive+0x26c>
 8005658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d114      	bne.n	8005688 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	3b01      	subs	r3, #1
 800567e:	b29a      	uxth	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d119      	bne.n	80056ca <HAL_SPI_TransmitReceive+0x2ae>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d014      	beq.n	80056ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056bc:	b29b      	uxth	r3, r3
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056c6:	2301      	movs	r3, #1
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056ca:	f7fd fc6b 	bl	8002fa4 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d803      	bhi.n	80056e2 <HAL_SPI_TransmitReceive+0x2c6>
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d102      	bne.n	80056e8 <HAL_SPI_TransmitReceive+0x2cc>
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ee:	e029      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1a2      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x224>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d19d      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f8bf 	bl	800588c <SPI_EndRxTxTransaction>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d006      	beq.n	8005722 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2220      	movs	r2, #32
 800571e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005720:	e010      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	e000      	b.n	8005744 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005742:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005754:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005758:	4618      	mov	r0, r3
 800575a:	3730      	adds	r7, #48	; 0x30
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800576e:	b2db      	uxtb	r3, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	bc80      	pop	{r7}
 8005778:	4770      	bx	lr
	...

0800577c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800578c:	f7fd fc0a 	bl	8002fa4 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	4413      	add	r3, r2
 800579a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800579c:	f7fd fc02 	bl	8002fa4 <HAL_GetTick>
 80057a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057a2:	4b39      	ldr	r3, [pc, #228]	; (8005888 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	015b      	lsls	r3, r3, #5
 80057a8:	0d1b      	lsrs	r3, r3, #20
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057b2:	e054      	b.n	800585e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d050      	beq.n	800585e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057bc:	f7fd fbf2 	bl	8002fa4 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d902      	bls.n	80057d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d13d      	bne.n	800584e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ea:	d111      	bne.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x94>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f4:	d004      	beq.n	8005800 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d107      	bne.n	8005810 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005818:	d10f      	bne.n	800583a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005838:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e017      	b.n	800587e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3b01      	subs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d19b      	bne.n	80057b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3720      	adds	r7, #32
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	2000001c 	.word	0x2000001c

0800588c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af02      	add	r7, sp, #8
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2200      	movs	r2, #0
 80058a0:	2180      	movs	r1, #128	; 0x80
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f7ff ff6a 	bl	800577c <SPI_WaitFlagStateUntilTimeout>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058b2:	f043 0220 	orr.w	r2, r3, #32
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e000      	b.n	80058c0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e041      	b.n	800595e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fd f92c 	bl	8002b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 fa1a 	bl	8005d40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b02      	cmp	r3, #2
 800597a:	d122      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d11b      	bne.n	80059c2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0202 	mvn.w	r2, #2
 8005992:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f9ad 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 80059ae:	e005      	b.n	80059bc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f9a0 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9af 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d122      	bne.n	8005a16 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d11b      	bne.n	8005a16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f06f 0204 	mvn.w	r2, #4
 80059e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f983 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005a02:	e005      	b.n	8005a10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f976 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f985 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d122      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d11b      	bne.n	8005a6a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f06f 0208 	mvn.w	r2, #8
 8005a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2204      	movs	r2, #4
 8005a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f959 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005a56:	e005      	b.n	8005a64 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f94c 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f95b 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d122      	bne.n	8005abe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f003 0310 	and.w	r3, r3, #16
 8005a82:	2b10      	cmp	r3, #16
 8005a84:	d11b      	bne.n	8005abe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f06f 0210 	mvn.w	r2, #16
 8005a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2208      	movs	r2, #8
 8005a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 f92f 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005aaa:	e005      	b.n	8005ab8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f922 	bl	8005cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f931 	bl	8005d1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10e      	bne.n	8005aea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d107      	bne.n	8005aea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f06f 0201 	mvn.w	r2, #1
 8005ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8fd 	bl	8005ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	2b80      	cmp	r3, #128	; 0x80
 8005af6:	d10e      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d107      	bne.n	8005b16 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fa74 	bl	8005ffe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b20:	2b40      	cmp	r3, #64	; 0x40
 8005b22:	d10e      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	d107      	bne.n	8005b42 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f8f5 	bl	8005d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b20      	cmp	r3, #32
 8005b4e:	d10e      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0320 	and.w	r3, r3, #32
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d107      	bne.n	8005b6e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f06f 0220 	mvn.w	r2, #32
 8005b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fa3f 	bl	8005fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6e:	bf00      	nop
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_ConfigClockSource+0x18>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0a6      	b.n	8005cdc <HAL_TIM_ConfigClockSource+0x166>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d067      	beq.n	8005c96 <HAL_TIM_ConfigClockSource+0x120>
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d80b      	bhi.n	8005be2 <HAL_TIM_ConfigClockSource+0x6c>
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d073      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
 8005bce:	2b10      	cmp	r3, #16
 8005bd0:	d802      	bhi.n	8005bd8 <HAL_TIM_ConfigClockSource+0x62>
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d06f      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bd6:	e078      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d06c      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
 8005bdc:	2b30      	cmp	r3, #48	; 0x30
 8005bde:	d06a      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005be0:	e073      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005be2:	2b70      	cmp	r3, #112	; 0x70
 8005be4:	d00d      	beq.n	8005c02 <HAL_TIM_ConfigClockSource+0x8c>
 8005be6:	2b70      	cmp	r3, #112	; 0x70
 8005be8:	d804      	bhi.n	8005bf4 <HAL_TIM_ConfigClockSource+0x7e>
 8005bea:	2b50      	cmp	r3, #80	; 0x50
 8005bec:	d033      	beq.n	8005c56 <HAL_TIM_ConfigClockSource+0xe0>
 8005bee:	2b60      	cmp	r3, #96	; 0x60
 8005bf0:	d041      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005bf2:	e06a      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bf8:	d066      	beq.n	8005cc8 <HAL_TIM_ConfigClockSource+0x152>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	d017      	beq.n	8005c30 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005c00:	e063      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6899      	ldr	r1, [r3, #8]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f000 f96e 	bl	8005ef2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c24:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	609a      	str	r2, [r3, #8]
      break;
 8005c2e:	e04c      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	6899      	ldr	r1, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f000 f957 	bl	8005ef2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c52:	609a      	str	r2, [r3, #8]
      break;
 8005c54:	e039      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	6859      	ldr	r1, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f000 f8ce 	bl	8005e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2150      	movs	r1, #80	; 0x50
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f925 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005c74:	e029      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f000 f8ec 	bl	8005e60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2160      	movs	r1, #96	; 0x60
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f915 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005c94:	e019      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f000 f8ae 	bl	8005e04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f905 	bl	8005ebe <TIM_ITRx_SetConfig>
      break;
 8005cb4:	e009      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	f000 f8fc 	bl	8005ebe <TIM_ITRx_SetConfig>
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005cc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bc80      	pop	{r7}
 8005d18:	4770      	bx	lr

08005d1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr
	...

08005d40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a29      	ldr	r2, [pc, #164]	; (8005df8 <TIM_Base_SetConfig+0xb8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00b      	beq.n	8005d70 <TIM_Base_SetConfig+0x30>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5e:	d007      	beq.n	8005d70 <TIM_Base_SetConfig+0x30>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a26      	ldr	r2, [pc, #152]	; (8005dfc <TIM_Base_SetConfig+0xbc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d003      	beq.n	8005d70 <TIM_Base_SetConfig+0x30>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <TIM_Base_SetConfig+0xc0>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d108      	bne.n	8005d82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <TIM_Base_SetConfig+0xb8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_Base_SetConfig+0x62>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d90:	d007      	beq.n	8005da2 <TIM_Base_SetConfig+0x62>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <TIM_Base_SetConfig+0xbc>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_Base_SetConfig+0x62>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <TIM_Base_SetConfig+0xc0>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a07      	ldr	r2, [pc, #28]	; (8005df8 <TIM_Base_SetConfig+0xb8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d103      	bne.n	8005de8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	691a      	ldr	r2, [r3, #16]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	615a      	str	r2, [r3, #20]
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bc80      	pop	{r7}
 8005df6:	4770      	bx	lr
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800

08005e04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 0201 	bic.w	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 030a 	bic.w	r3, r3, #10
 8005e40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	f023 0210 	bic.w	r2, r3, #16
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	031b      	lsls	r3, r3, #12
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bc80      	pop	{r7}
 8005ebc:	4770      	bx	lr

08005ebe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f043 0307 	orr.w	r3, r3, #7
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	609a      	str	r2, [r3, #8]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b087      	sub	sp, #28
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
 8005efe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	021a      	lsls	r2, r3, #8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	609a      	str	r2, [r3, #8]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e046      	b.n	8005fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a16      	ldr	r2, [pc, #88]	; (8005fe0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d00e      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d009      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr
 8005fe0:	40012c00 	.word	0x40012c00
 8005fe4:	40000400 	.word	0x40000400
 8005fe8:	40000800 	.word	0x40000800

08005fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e03f      	b.n	80060a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc fdac 	bl	8002b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fc91 	bl	800697c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2220      	movs	r2, #32
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b08a      	sub	sp, #40	; 0x28
 80060ae:	af02      	add	r7, sp, #8
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	603b      	str	r3, [r7, #0]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d17c      	bne.n	80061c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_UART_Transmit+0x2c>
 80060d0:	88fb      	ldrh	r3, [r7, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e075      	b.n	80061c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Transmit+0x3e>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e06e      	b.n	80061c6 <HAL_UART_Transmit+0x11c>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2221      	movs	r2, #33	; 0x21
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060fe:	f7fc ff51 	bl	8002fa4 <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	88fa      	ldrh	r2, [r7, #6]
 8006108:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	88fa      	ldrh	r2, [r7, #6]
 800610e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006118:	d108      	bne.n	800612c <HAL_UART_Transmit+0x82>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d104      	bne.n	800612c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e003      	b.n	8006134 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006130:	2300      	movs	r3, #0
 8006132:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800613c:	e02a      	b.n	8006194 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	2200      	movs	r2, #0
 8006146:	2180      	movs	r1, #128	; 0x80
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f000 fa43 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e036      	b.n	80061c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800616c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	3302      	adds	r3, #2
 8006172:	61bb      	str	r3, [r7, #24]
 8006174:	e007      	b.n	8006186 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	781a      	ldrb	r2, [r3, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1cf      	bne.n	800613e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	2140      	movs	r1, #64	; 0x40
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 fa13 	bl	80065d4 <UART_WaitOnFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e006      	b.n	80061c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	60f8      	str	r0, [r7, #12]
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	4613      	mov	r3, r2
 80061da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d11d      	bne.n	8006224 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d002      	beq.n	80061f4 <HAL_UART_Receive_IT+0x26>
 80061ee:	88fb      	ldrh	r3, [r7, #6]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e016      	b.n	8006226 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_UART_Receive_IT+0x38>
 8006202:	2302      	movs	r3, #2
 8006204:	e00f      	b.n	8006226 <HAL_UART_Receive_IT+0x58>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006214:	88fb      	ldrh	r3, [r7, #6]
 8006216:	461a      	mov	r2, r3
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fa24 	bl	8006668 <UART_Start_Receive_IT>
 8006220:	4603      	mov	r3, r0
 8006222:	e000      	b.n	8006226 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006250:	2300      	movs	r3, #0
 8006252:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x52>
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fad4 	bl	8006828 <UART_Receive_IT>
      return;
 8006280:	e17c      	b.n	800657c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80b1 	beq.w	80063ec <HAL_UART_IRQHandler+0x1bc>
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d105      	bne.n	80062a0 <HAL_UART_IRQHandler+0x70>
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80a6 	beq.w	80063ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <HAL_UART_IRQHandler+0x90>
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	f043 0201 	orr.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <HAL_UART_IRQHandler+0xb0>
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	f043 0202 	orr.w	r2, r3, #2
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <HAL_UART_IRQHandler+0xd0>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f043 0204 	orr.w	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00f      	beq.n	800632a <HAL_UART_IRQHandler+0xfa>
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b00      	cmp	r3, #0
 8006312:	d104      	bne.n	800631e <HAL_UART_IRQHandler+0xee>
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f043 0208 	orr.w	r2, r3, #8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 811f 	beq.w	8006572 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d007      	beq.n	800634e <HAL_UART_IRQHandler+0x11e>
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f003 0320 	and.w	r3, r3, #32
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa6d 	bl	8006828 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <HAL_UART_IRQHandler+0x146>
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d031      	beq.n	80063da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9af 	bl	80066da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d023      	beq.n	80063d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695a      	ldr	r2, [r3, #20]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006398:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d013      	beq.n	80063ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_UART_IRQHandler+0x354>)
 80063a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fc ff6c 	bl	800328c <HAL_DMA_Abort_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063c4:	4610      	mov	r0, r2
 80063c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c8:	e00e      	b.n	80063e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8ee 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	e00a      	b.n	80063e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8ea 	bl	80065ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e006      	b.n	80063e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f8e6 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063e6:	e0c4      	b.n	8006572 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	bf00      	nop
    return;
 80063ea:	e0c2      	b.n	8006572 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	f040 80a1 	bne.w	8006538 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 809b 	beq.w	8006538 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 8095 	beq.w	8006538 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d04e      	beq.n	80064d0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800643c:	8a3b      	ldrh	r3, [r7, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 8099 	beq.w	8006576 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006448:	8a3a      	ldrh	r2, [r7, #16]
 800644a:	429a      	cmp	r2, r3
 800644c:	f080 8093 	bcs.w	8006576 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8a3a      	ldrh	r2, [r7, #16]
 8006454:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b20      	cmp	r3, #32
 800645e:	d02b      	beq.n	80064b8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800646e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0201 	bic.w	r2, r2, #1
 800647e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0210 	bic.w	r2, r2, #16
 80064ac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fc feaf 	bl	8003216 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f878 	bl	80065be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064ce:	e052      	b.n	8006576 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d048      	beq.n	800657a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80064e8:	8a7b      	ldrh	r3, [r7, #18]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d045      	beq.n	800657a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064fc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0210 	bic.w	r2, r2, #16
 800652a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800652c:	8a7b      	ldrh	r3, [r7, #18]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 f844 	bl	80065be <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006536:	e020      	b.n	800657a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653e:	2b00      	cmp	r3, #0
 8006540:	d008      	beq.n	8006554 <HAL_UART_IRQHandler+0x324>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f904 	bl	800675a <UART_Transmit_IT>
    return;
 8006552:	e013      	b.n	800657c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00e      	beq.n	800657c <HAL_UART_IRQHandler+0x34c>
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f945 	bl	80067f8 <UART_EndTransmit_IT>
    return;
 800656e:	bf00      	nop
 8006570:	e004      	b.n	800657c <HAL_UART_IRQHandler+0x34c>
    return;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <HAL_UART_IRQHandler+0x34c>
      return;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <HAL_UART_IRQHandler+0x34c>
      return;
 800657a:	bf00      	nop
  }
}
 800657c:	3728      	adds	r7, #40	; 0x28
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	08006733 	.word	0x08006733

08006588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr

0800659a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800659a:	b480      	push	{r7}
 800659c:	b083      	sub	sp, #12
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr

080065be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	460b      	mov	r3, r1
 80065c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr

080065d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065e4:	e02c      	b.n	8006640 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d028      	beq.n	8006640 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d007      	beq.n	8006604 <UART_WaitOnFlagUntilTimeout+0x30>
 80065f4:	f7fc fcd6 	bl	8002fa4 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	d21d      	bcs.n	8006640 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006612:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695a      	ldr	r2, [r3, #20]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0201 	bic.w	r2, r2, #1
 8006622:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e00f      	b.n	8006660 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	4013      	ands	r3, r2
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	429a      	cmp	r2, r3
 800665c:	d0c3      	beq.n	80065e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	88fa      	ldrh	r2, [r7, #6]
 8006686:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2222      	movs	r2, #34	; 0x22
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695a      	ldr	r2, [r3, #20]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f042 0201 	orr.w	r2, r2, #1
 80066bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f042 0220 	orr.w	r2, r2, #32
 80066cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3714      	adds	r7, #20
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr

080066da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066da:	b480      	push	{r7}
 80066dc:	b083      	sub	sp, #12
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006706:	2b01      	cmp	r3, #1
 8006708:	d107      	bne.n	800671a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0210 	bic.w	r2, r2, #16
 8006718:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	bc80      	pop	{r7}
 8006730:	4770      	bx	lr

08006732 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff ff2d 	bl	80065ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006752:	bf00      	nop
 8006754:	3710      	adds	r7, #16
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b21      	cmp	r3, #33	; 0x21
 800676c:	d13e      	bne.n	80067ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d114      	bne.n	80067a2 <UART_Transmit_IT+0x48>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d110      	bne.n	80067a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	881b      	ldrh	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006794:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	621a      	str	r2, [r3, #32]
 80067a0:	e008      	b.n	80067b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	1c59      	adds	r1, r3, #1
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6211      	str	r1, [r2, #32]
 80067ac:	781a      	ldrb	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29b      	uxth	r3, r3
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4619      	mov	r1, r3
 80067c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d10f      	bne.n	80067e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	e000      	b.n	80067ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067ec:	2302      	movs	r3, #2
  }
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3714      	adds	r7, #20
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bc80      	pop	{r7}
 80067f6:	4770      	bx	lr

080067f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800680e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2220      	movs	r2, #32
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff feb5 	bl	8006588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b22      	cmp	r3, #34	; 0x22
 800683a:	f040 8099 	bne.w	8006970 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006846:	d117      	bne.n	8006878 <UART_Receive_IT+0x50>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d113      	bne.n	8006878 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006866:	b29a      	uxth	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	1c9a      	adds	r2, r3, #2
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	629a      	str	r2, [r3, #40]	; 0x28
 8006876:	e026      	b.n	80068c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	d007      	beq.n	800689c <UART_Receive_IT+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <UART_Receive_IT+0x82>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d106      	bne.n	80068aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	e008      	b.n	80068bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	4619      	mov	r1, r3
 80068d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d148      	bne.n	800696c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0220 	bic.w	r2, r2, #32
 80068e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695a      	ldr	r2, [r3, #20]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0201 	bic.w	r2, r2, #1
 8006908:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2220      	movs	r2, #32
 800690e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	2b01      	cmp	r3, #1
 8006918:	d123      	bne.n	8006962 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0210 	bic.w	r2, r2, #16
 800692e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b10      	cmp	r3, #16
 800693c:	d10a      	bne.n	8006954 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe2f 	bl	80065be <HAL_UARTEx_RxEventCallback>
 8006960:	e002      	b.n	8006968 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7ff fe19 	bl	800659a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	e002      	b.n	8006972 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689a      	ldr	r2, [r3, #8]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069b6:	f023 030c 	bic.w	r3, r3, #12
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6812      	ldr	r2, [r2, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	430b      	orrs	r3, r1
 80069c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	695b      	ldr	r3, [r3, #20]
 80069ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a2c      	ldr	r2, [pc, #176]	; (8006a90 <UART_SetConfig+0x114>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d103      	bne.n	80069ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069e4:	f7fe fb28 	bl	8005038 <HAL_RCC_GetPCLK2Freq>
 80069e8:	60f8      	str	r0, [r7, #12]
 80069ea:	e002      	b.n	80069f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069ec:	f7fe fb10 	bl	8005010 <HAL_RCC_GetPCLK1Freq>
 80069f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009a      	lsls	r2, r3, #2
 80069fc:	441a      	add	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	4a22      	ldr	r2, [pc, #136]	; (8006a94 <UART_SetConfig+0x118>)
 8006a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	0119      	lsls	r1, r3, #4
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4613      	mov	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	009a      	lsls	r2, r3, #2
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a28:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <UART_SetConfig+0x118>)
 8006a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a2e:	095b      	lsrs	r3, r3, #5
 8006a30:	2064      	movs	r0, #100	; 0x64
 8006a32:	fb00 f303 	mul.w	r3, r0, r3
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	3332      	adds	r3, #50	; 0x32
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <UART_SetConfig+0x118>)
 8006a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a48:	4419      	add	r1, r3
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	4413      	add	r3, r2
 8006a52:	009a      	lsls	r2, r3, #2
 8006a54:	441a      	add	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a60:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <UART_SetConfig+0x118>)
 8006a62:	fba3 0302 	umull	r0, r3, r3, r2
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	2064      	movs	r0, #100	; 0x64
 8006a6a:	fb00 f303 	mul.w	r3, r0, r3
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	3332      	adds	r3, #50	; 0x32
 8006a74:	4a07      	ldr	r2, [pc, #28]	; (8006a94 <UART_SetConfig+0x118>)
 8006a76:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	f003 020f 	and.w	r2, r3, #15
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	440a      	add	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a88:	bf00      	nop
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40013800 	.word	0x40013800
 8006a94:	51eb851f 	.word	0x51eb851f

08006a98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006a9c:	4904      	ldr	r1, [pc, #16]	; (8006ab0 <MX_FATFS_Init+0x18>)
 8006a9e:	4805      	ldr	r0, [pc, #20]	; (8006ab4 <MX_FATFS_Init+0x1c>)
 8006aa0:	f003 f932 	bl	8009d08 <FATFS_LinkDriver>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <MX_FATFS_Init+0x20>)
 8006aaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006aac:	bf00      	nop
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20000f68 	.word	0x20000f68
 8006ab4:	20000028 	.word	0x20000028
 8006ab8:	20000f6c 	.word	0x20000f6c

08006abc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ac0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bc80      	pop	{r7}
 8006ac8:	4770      	bx	lr

08006aca <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fb f8cc 	bl	8001c74 <SD_disk_initialize>
 8006adc:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b082      	sub	sp, #8
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	4603      	mov	r3, r0
 8006aee:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fb f9a8 	bl	8001e48 <SD_disk_status>
 8006af8:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4603      	mov	r3, r0
 8006b10:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006b12:	7bf8      	ldrb	r0, [r7, #15]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	f7fb f9a9 	bl	8001e70 <SD_disk_read>
 8006b1e:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006b38:	7bf8      	ldrb	r0, [r7, #15]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	f7fb fa00 	bl	8001f44 <SD_disk_write>
 8006b44:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	4603      	mov	r3, r0
 8006b56:	603a      	str	r2, [r7, #0]
 8006b58:	71fb      	strb	r3, [r7, #7]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006b5e:	79b9      	ldrb	r1, [r7, #6]
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fb fa71 	bl	800204c <SD_disk_ioctl>
 8006b6a:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	4a08      	ldr	r2, [pc, #32]	; (8006ba4 <disk_status+0x30>)
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	79fa      	ldrb	r2, [r7, #7]
 8006b8c:	4905      	ldr	r1, [pc, #20]	; (8006ba4 <disk_status+0x30>)
 8006b8e:	440a      	add	r2, r1
 8006b90:	7a12      	ldrb	r2, [r2, #8]
 8006b92:	4610      	mov	r0, r2
 8006b94:	4798      	blx	r3
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	20000558 	.word	0x20000558

08006ba8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	4603      	mov	r3, r0
 8006bb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8006bb6:	79fb      	ldrb	r3, [r7, #7]
 8006bb8:	4a0d      	ldr	r2, [pc, #52]	; (8006bf0 <disk_initialize+0x48>)
 8006bba:	5cd3      	ldrb	r3, [r2, r3]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d111      	bne.n	8006be4 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <disk_initialize+0x48>)
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4a09      	ldr	r2, [pc, #36]	; (8006bf0 <disk_initialize+0x48>)
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4413      	add	r3, r2
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	79fa      	ldrb	r2, [r7, #7]
 8006bd6:	4906      	ldr	r1, [pc, #24]	; (8006bf0 <disk_initialize+0x48>)
 8006bd8:	440a      	add	r2, r1
 8006bda:	7a12      	ldrb	r2, [r2, #8]
 8006bdc:	4610      	mov	r0, r2
 8006bde:	4798      	blx	r3
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000558 	.word	0x20000558

08006bf4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006bf4:	b590      	push	{r4, r7, lr}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4a0a      	ldr	r2, [pc, #40]	; (8006c30 <disk_read+0x3c>)
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	689c      	ldr	r4, [r3, #8]
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	4a07      	ldr	r2, [pc, #28]	; (8006c30 <disk_read+0x3c>)
 8006c14:	4413      	add	r3, r2
 8006c16:	7a18      	ldrb	r0, [r3, #8]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	47a0      	blx	r4
 8006c20:	4603      	mov	r3, r0
 8006c22:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd90      	pop	{r4, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000558 	.word	0x20000558

08006c34 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c34:	b590      	push	{r4, r7, lr}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	607a      	str	r2, [r7, #4]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4603      	mov	r3, r0
 8006c42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <disk_write+0x3c>)
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	68dc      	ldr	r4, [r3, #12]
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	4a07      	ldr	r2, [pc, #28]	; (8006c70 <disk_write+0x3c>)
 8006c54:	4413      	add	r3, r2
 8006c56:	7a18      	ldrb	r0, [r3, #8]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68b9      	ldr	r1, [r7, #8]
 8006c5e:	47a0      	blx	r4
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd90      	pop	{r4, r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000558 	.word	0x20000558

08006c74 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	603a      	str	r2, [r7, #0]
 8006c7e:	71fb      	strb	r3, [r7, #7]
 8006c80:	460b      	mov	r3, r1
 8006c82:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <disk_ioctl+0x38>)
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	79fa      	ldrb	r2, [r7, #7]
 8006c92:	4906      	ldr	r1, [pc, #24]	; (8006cac <disk_ioctl+0x38>)
 8006c94:	440a      	add	r2, r1
 8006c96:	7a10      	ldrb	r0, [r2, #8]
 8006c98:	79b9      	ldrb	r1, [r7, #6]
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  return res;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	20000558 	.word	0x20000558

08006cb0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006cc4:	e007      	b.n	8006cd6 <mem_cpy+0x26>
		*d++ = *s++;
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	1c53      	adds	r3, r2, #1
 8006cca:	613b      	str	r3, [r7, #16]
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	1c59      	adds	r1, r3, #1
 8006cd0:	6179      	str	r1, [r7, #20]
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1f2      	bne.n	8006cc6 <mem_cpy+0x16>
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006cea:	b480      	push	{r7}
 8006cec:	b087      	sub	sp, #28
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006cfa:	e005      	b.n	8006d08 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	617a      	str	r2, [r7, #20]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	1e5a      	subs	r2, r3, #1
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f4      	bne.n	8006cfc <mem_set+0x12>
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	; 0x24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006d34:	bf00      	nop
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	1e5a      	subs	r2, r3, #1
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <mem_cmp+0x40>
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	61fa      	str	r2, [r7, #28]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	61ba      	str	r2, [r7, #24]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	1acb      	subs	r3, r1, r3
 8006d54:	617b      	str	r3, [r7, #20]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ec      	beq.n	8006d36 <mem_cmp+0x1a>
	return r;
 8006d5c:	697b      	ldr	r3, [r7, #20]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3724      	adds	r7, #36	; 0x24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006d72:	e002      	b.n	8006d7a <chk_chr+0x12>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3301      	adds	r3, #1
 8006d78:	607b      	str	r3, [r7, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d005      	beq.n	8006d8e <chk_chr+0x26>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d1f2      	bne.n	8006d74 <chk_chr+0xc>
	return *str;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	781b      	ldrb	r3, [r3, #0]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	60fb      	str	r3, [r7, #12]
 8006dae:	e038      	b.n	8006e22 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8006db0:	492f      	ldr	r1, [pc, #188]	; (8006e70 <chk_lock+0xd4>)
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	440b      	add	r3, r1
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d029      	beq.n	8006e18 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006dc4:	492a      	ldr	r1, [pc, #168]	; (8006e70 <chk_lock+0xd4>)
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	440b      	add	r3, r1
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d11e      	bne.n	8006e1c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8006dde:	4924      	ldr	r1, [pc, #144]	; (8006e70 <chk_lock+0xd4>)
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4613      	mov	r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	440b      	add	r3, r1
 8006dec:	3304      	adds	r3, #4
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d110      	bne.n	8006e1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006dfa:	491d      	ldr	r1, [pc, #116]	; (8006e70 <chk_lock+0xd4>)
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	3308      	adds	r3, #8
 8006e0a:	881a      	ldrh	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d102      	bne.n	8006e1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8006e16:	e007      	b.n	8006e28 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d9c3      	bls.n	8006db0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d109      	bne.n	8006e42 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d102      	bne.n	8006e3a <chk_lock+0x9e>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b02      	cmp	r3, #2
 8006e38:	d101      	bne.n	8006e3e <chk_lock+0xa2>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e013      	b.n	8006e66 <chk_lock+0xca>
 8006e3e:	2312      	movs	r3, #18
 8006e40:	e011      	b.n	8006e66 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10b      	bne.n	8006e60 <chk_lock+0xc4>
 8006e48:	4909      	ldr	r1, [pc, #36]	; (8006e70 <chk_lock+0xd4>)
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	440b      	add	r3, r1
 8006e56:	330a      	adds	r3, #10
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e5e:	d101      	bne.n	8006e64 <chk_lock+0xc8>
 8006e60:	2310      	movs	r3, #16
 8006e62:	e000      	b.n	8006e66 <chk_lock+0xca>
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bc80      	pop	{r7}
 8006e6e:	4770      	bx	lr
 8006e70:	20000340 	.word	0x20000340

08006e74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	e002      	b.n	8006e86 <enq_lock+0x12>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	3301      	adds	r3, #1
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d809      	bhi.n	8006ea0 <enq_lock+0x2c>
 8006e8c:	490a      	ldr	r1, [pc, #40]	; (8006eb8 <enq_lock+0x44>)
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4613      	mov	r3, r2
 8006e92:	005b      	lsls	r3, r3, #1
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ef      	bne.n	8006e80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	bf14      	ite	ne
 8006ea6:	2301      	movne	r3, #1
 8006ea8:	2300      	moveq	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bc80      	pop	{r7}
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000340 	.word	0x20000340

08006ebc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	e02b      	b.n	8006f24 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8006ecc:	4955      	ldr	r1, [pc, #340]	; (8007024 <inc_lock+0x168>)
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d11b      	bne.n	8006f1e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8006ee6:	494f      	ldr	r1, [pc, #316]	; (8007024 <inc_lock+0x168>)
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d10d      	bne.n	8006f1e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8006f02:	4948      	ldr	r1, [pc, #288]	; (8007024 <inc_lock+0x168>)
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	4613      	mov	r3, r2
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3308      	adds	r3, #8
 8006f12:	881a      	ldrh	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d006      	beq.n	8006f2c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d9d0      	bls.n	8006ecc <inc_lock+0x10>
 8006f2a:	e000      	b.n	8006f2e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8006f2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d145      	bne.n	8006fc0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <inc_lock+0x84>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d809      	bhi.n	8006f5a <inc_lock+0x9e>
 8006f46:	4937      	ldr	r1, [pc, #220]	; (8007024 <inc_lock+0x168>)
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1ef      	bne.n	8006f3a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b02      	cmp	r3, #2
 8006f5e:	d101      	bne.n	8006f64 <inc_lock+0xa8>
 8006f60:	2300      	movs	r3, #0
 8006f62:	e05a      	b.n	800701a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8006f6a:	482e      	ldr	r0, [pc, #184]	; (8007024 <inc_lock+0x168>)
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4403      	add	r3, r0
 8006f78:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8006f80:	4828      	ldr	r0, [pc, #160]	; (8007024 <inc_lock+0x168>)
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4613      	mov	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4403      	add	r3, r0
 8006f8e:	3304      	adds	r3, #4
 8006f90:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8006f98:	4922      	ldr	r1, [pc, #136]	; (8007024 <inc_lock+0x168>)
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	4602      	mov	r2, r0
 8006faa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006fac:	491d      	ldr	r1, [pc, #116]	; (8007024 <inc_lock+0x168>)
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	330a      	adds	r3, #10
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00c      	beq.n	8006fe0 <inc_lock+0x124>
 8006fc6:	4917      	ldr	r1, [pc, #92]	; (8007024 <inc_lock+0x168>)
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	4413      	add	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	330a      	adds	r3, #10
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <inc_lock+0x124>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e01c      	b.n	800701a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10b      	bne.n	8006ffe <inc_lock+0x142>
 8006fe6:	490f      	ldr	r1, [pc, #60]	; (8007024 <inc_lock+0x168>)
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	4613      	mov	r3, r2
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	330a      	adds	r3, #10
 8006ff6:	881b      	ldrh	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b299      	uxth	r1, r3
 8006ffc:	e001      	b.n	8007002 <inc_lock+0x146>
 8006ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007002:	4808      	ldr	r0, [pc, #32]	; (8007024 <inc_lock+0x168>)
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4403      	add	r3, r0
 8007010:	330a      	adds	r3, #10
 8007012:	460a      	mov	r2, r1
 8007014:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	3301      	adds	r3, #1
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr
 8007024:	20000340 	.word	0x20000340

08007028 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	3b01      	subs	r3, #1
 8007034:	607b      	str	r3, [r7, #4]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d82e      	bhi.n	800709a <dec_lock+0x72>
		n = Files[i].ctr;
 800703c:	491b      	ldr	r1, [pc, #108]	; (80070ac <dec_lock+0x84>)
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	330a      	adds	r3, #10
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007050:	89fb      	ldrh	r3, [r7, #14]
 8007052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007056:	d101      	bne.n	800705c <dec_lock+0x34>
 8007058:	2300      	movs	r3, #0
 800705a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 800705c:	89fb      	ldrh	r3, [r7, #14]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <dec_lock+0x40>
 8007062:	89fb      	ldrh	r3, [r7, #14]
 8007064:	3b01      	subs	r3, #1
 8007066:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007068:	4910      	ldr	r1, [pc, #64]	; (80070ac <dec_lock+0x84>)
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4613      	mov	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	440b      	add	r3, r1
 8007076:	330a      	adds	r3, #10
 8007078:	89fa      	ldrh	r2, [r7, #14]
 800707a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800707c:	89fb      	ldrh	r3, [r7, #14]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d108      	bne.n	8007094 <dec_lock+0x6c>
 8007082:	490a      	ldr	r1, [pc, #40]	; (80070ac <dec_lock+0x84>)
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	4613      	mov	r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	440b      	add	r3, r1
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	737b      	strb	r3, [r7, #13]
 8007098:	e001      	b.n	800709e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800709a:	2302      	movs	r3, #2
 800709c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800709e:	7b7b      	ldrb	r3, [r7, #13]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bc80      	pop	{r7}
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	20000340 	.word	0x20000340

080070b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e016      	b.n	80070ec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80070be:	490f      	ldr	r1, [pc, #60]	; (80070fc <clear_lock+0x4c>)
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4613      	mov	r3, r2
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d108      	bne.n	80070e6 <clear_lock+0x36>
 80070d4:	4909      	ldr	r1, [pc, #36]	; (80070fc <clear_lock+0x4c>)
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3301      	adds	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d9e5      	bls.n	80070be <clear_lock+0xe>
	}
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bc80      	pop	{r7}
 80070fa:	4770      	bx	lr
 80070fc:	20000340 	.word	0x20000340

08007100 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8007112:	2b00      	cmp	r3, #0
 8007114:	d038      	beq.n	8007188 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800711c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	2301      	movs	r3, #1
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	f7ff fd83 	bl	8006c34 <disk_write>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e026      	b.n	8007188 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	1ad2      	subs	r2, r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007152:	429a      	cmp	r2, r3
 8007154:	d218      	bcs.n	8007188 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	e010      	b.n	8007182 <sync_window+0x82>
					wsect += fs->fsize;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4413      	add	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	2301      	movs	r3, #1
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	f7ff fd5c 	bl	8006c34 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	3b01      	subs	r3, #1
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d8eb      	bhi.n	8007160 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b084      	sub	sp, #16
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d01b      	beq.n	80071e4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff ffa7 	bl	8007100 <sync_window>
 80071b2:	4603      	mov	r3, r0
 80071b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d113      	bne.n	80071e4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80071c2:	6879      	ldr	r1, [r7, #4]
 80071c4:	2301      	movs	r3, #1
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	f7ff fd14 	bl	8006bf4 <disk_read>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d004      	beq.n	80071dc <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f7ff ff82 	bl	8007100 <sync_window>
 80071fc:	4603      	mov	r3, r0
 80071fe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b00      	cmp	r3, #0
 8007204:	f040 809b 	bne.w	800733e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800720e:	2b03      	cmp	r3, #3
 8007210:	f040 8088 	bne.w	8007324 <sync_fs+0x136>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800721a:	2b01      	cmp	r3, #1
 800721c:	f040 8082 	bne.w	8007324 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007226:	2100      	movs	r1, #0
 8007228:	4618      	mov	r0, r3
 800722a:	f7ff fd5e 	bl	8006cea <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2255      	movs	r2, #85	; 0x55
 8007232:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	22aa      	movs	r2, #170	; 0xaa
 800723a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2252      	movs	r2, #82	; 0x52
 8007242:	701a      	strb	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2252      	movs	r2, #82	; 0x52
 8007248:	705a      	strb	r2, [r3, #1]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2261      	movs	r2, #97	; 0x61
 800724e:	709a      	strb	r2, [r3, #2]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2241      	movs	r2, #65	; 0x41
 8007254:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2272      	movs	r2, #114	; 0x72
 800725a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2272      	movs	r2, #114	; 0x72
 8007262:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2241      	movs	r2, #65	; 0x41
 800726a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2261      	movs	r2, #97	; 0x61
 8007272:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800728a:	b29b      	uxth	r3, r3
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	b29b      	uxth	r3, r3
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800729e:	0c1b      	lsrs	r3, r3, #16
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80072ae:	0e1b      	lsrs	r3, r3, #24
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80072f0:	0e1b      	lsrs	r3, r3, #24
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007316:	2301      	movs	r3, #1
 8007318:	f7ff fc8c 	bl	8006c34 <disk_write>
			fs->fsi_flag = 0;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fca0 	bl	8006c74 <disk_ioctl>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d001      	beq.n	800733e <sync_fs+0x150>
			res = FR_DISK_ERR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800733e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	3b02      	subs	r3, #2
 8007356:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800735e:	3b02      	subs	r3, #2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d301      	bcc.n	800736a <clust2sect+0x22>
 8007366:	2300      	movs	r3, #0
 8007368:	e00a      	b.n	8007380 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007370:	461a      	mov	r2, r3
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	fb03 f202 	mul.w	r2, r3, r2
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800737e:	4413      	add	r3, r2
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr

0800738a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d905      	bls.n	80073a6 <get_fat+0x1c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d302      	bcc.n	80073ac <get_fat+0x22>
		val = 1;	/* Internal error */
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	e0a0      	b.n	80074ee <get_fat+0x164>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80073ac:	f04f 33ff 	mov.w	r3, #4294967295
 80073b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d044      	beq.n	8007446 <get_fat+0xbc>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d063      	beq.n	8007488 <get_fat+0xfe>
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	f040 808a 	bne.w	80074da <get_fat+0x150>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	0a5b      	lsrs	r3, r3, #9
 80073de:	4413      	add	r3, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fed5 	bl	8007192 <move_window>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d178      	bne.n	80074e0 <get_fat+0x156>
			wc = fs->win.d8[bc++ % SS(fs)];
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	60fa      	str	r2, [r7, #12]
 80073f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	5cd3      	ldrb	r3, [r2, r3]
 80073fc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	0a5b      	lsrs	r3, r3, #9
 8007408:	4413      	add	r3, r2
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff fec0 	bl	8007192 <move_window>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d165      	bne.n	80074e4 <get_fat+0x15a>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	5cd3      	ldrb	r3, [r2, r3]
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	461a      	mov	r2, r3
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	4313      	orrs	r3, r2
 800742a:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	2b00      	cmp	r3, #0
 8007434:	d002      	beq.n	800743c <get_fat+0xb2>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	091b      	lsrs	r3, r3, #4
 800743a:	e002      	b.n	8007442 <get_fat+0xb8>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007442:	617b      	str	r3, [r7, #20]
			break;
 8007444:	e053      	b.n	80074ee <get_fat+0x164>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	0a1b      	lsrs	r3, r3, #8
 8007450:	4413      	add	r3, r2
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fe9c 	bl	8007192 <move_window>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d143      	bne.n	80074e8 <get_fat+0x15e>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	005b      	lsls	r3, r3, #1
 8007464:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	4413      	add	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3301      	adds	r3, #1
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	b21a      	sxth	r2, r3
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b21b      	sxth	r3, r3
 800747e:	4313      	orrs	r3, r2
 8007480:	b21b      	sxth	r3, r3
 8007482:	b29b      	uxth	r3, r3
 8007484:	617b      	str	r3, [r7, #20]
			break;
 8007486:	e032      	b.n	80074ee <get_fat+0x164>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	09db      	lsrs	r3, r3, #7
 8007492:	4413      	add	r3, r2
 8007494:	4619      	mov	r1, r3
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff fe7b 	bl	8007192 <move_window>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d124      	bne.n	80074ec <get_fat+0x162>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	4413      	add	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	3303      	adds	r3, #3
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	061a      	lsls	r2, r3, #24
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	3302      	adds	r3, #2
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	041b      	lsls	r3, r3, #16
 80074c0:	4313      	orrs	r3, r2
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	3201      	adds	r2, #1
 80074c6:	7812      	ldrb	r2, [r2, #0]
 80074c8:	0212      	lsls	r2, r2, #8
 80074ca:	4313      	orrs	r3, r2
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074d6:	617b      	str	r3, [r7, #20]
			break;
 80074d8:	e009      	b.n	80074ee <get_fat+0x164>

		default:
			val = 1;	/* Internal error */
 80074da:	2301      	movs	r3, #1
 80074dc:	617b      	str	r3, [r7, #20]
 80074de:	e006      	b.n	80074ee <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074e0:	bf00      	nop
 80074e2:	e004      	b.n	80074ee <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074e4:	bf00      	nop
 80074e6:	e002      	b.n	80074ee <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074e8:	bf00      	nop
 80074ea:	e000      	b.n	80074ee <get_fat+0x164>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074ec:	bf00      	nop
		}
	}

	return val;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d905      	bls.n	8007516 <put_fat+0x1e>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	429a      	cmp	r2, r3
 8007514:	d302      	bcc.n	800751c <put_fat+0x24>
		res = FR_INT_ERR;
 8007516:	2302      	movs	r3, #2
 8007518:	77fb      	strb	r3, [r7, #31]
 800751a:	e0f3      	b.n	8007704 <put_fat+0x20c>

	} else {
		switch (fs->fs_type) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007522:	2b02      	cmp	r3, #2
 8007524:	d074      	beq.n	8007610 <put_fat+0x118>
 8007526:	2b03      	cmp	r3, #3
 8007528:	f000 8099 	beq.w	800765e <put_fat+0x166>
 800752c:	2b01      	cmp	r3, #1
 800752e:	f040 80df 	bne.w	80076f0 <put_fat+0x1f8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	085b      	lsrs	r3, r3, #1
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4413      	add	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	0a5b      	lsrs	r3, r3, #9
 800754a:	4413      	add	r3, r2
 800754c:	4619      	mov	r1, r3
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f7ff fe1f 	bl	8007192 <move_window>
 8007554:	4603      	mov	r3, r0
 8007556:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007558:	7ffb      	ldrb	r3, [r7, #31]
 800755a:	2b00      	cmp	r3, #0
 800755c:	f040 80cb 	bne.w	80076f6 <put_fat+0x1fe>
			p = &fs->win.d8[bc++ % SS(fs)];
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	617a      	str	r2, [r7, #20]
 8007566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4413      	add	r3, r2
 800756e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00d      	beq.n	8007596 <put_fat+0x9e>
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b25b      	sxtb	r3, r3
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	b25a      	sxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	b25b      	sxtb	r3, r3
 800758e:	4313      	orrs	r3, r2
 8007590:	b25b      	sxtb	r3, r3
 8007592:	b2db      	uxtb	r3, r3
 8007594:	e001      	b.n	800759a <put_fat+0xa2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	0a5b      	lsrs	r3, r3, #9
 80075b0:	4413      	add	r3, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f7ff fdec 	bl	8007192 <move_window>
 80075ba:	4603      	mov	r3, r0
 80075bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075be:	7ffb      	ldrb	r3, [r7, #31]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 809a 	bne.w	80076fa <put_fat+0x202>
			p = &fs->win.d8[bc % SS(fs)];
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	4413      	add	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <put_fat+0xec>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	091b      	lsrs	r3, r3, #4
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	e00e      	b.n	8007602 <put_fat+0x10a>
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b25b      	sxtb	r3, r3
 80075ea:	f023 030f 	bic.w	r3, r3, #15
 80075ee:	b25a      	sxtb	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	4313      	orrs	r3, r2
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	b2db      	uxtb	r3, r3
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800760e:	e079      	b.n	8007704 <put_fat+0x20c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	0a1b      	lsrs	r3, r3, #8
 800761a:	4413      	add	r3, r2
 800761c:	4619      	mov	r1, r3
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff fdb7 	bl	8007192 <move_window>
 8007624:	4603      	mov	r3, r0
 8007626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007628:	7ffb      	ldrb	r3, [r7, #31]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d167      	bne.n	80076fe <put_fat+0x206>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4413      	add	r3, r2
 800763a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	b2da      	uxtb	r2, r3
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	701a      	strb	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	b29b      	uxth	r3, r3
 8007648:	0a1b      	lsrs	r3, r3, #8
 800764a:	b29a      	uxth	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	3301      	adds	r3, #1
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800765c:	e052      	b.n	8007704 <put_fat+0x20c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	09db      	lsrs	r3, r3, #7
 8007668:	4413      	add	r3, r2
 800766a:	4619      	mov	r1, r3
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff fd90 	bl	8007192 <move_window>
 8007672:	4603      	mov	r3, r0
 8007674:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007676:	7ffb      	ldrb	r3, [r7, #31]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d142      	bne.n	8007702 <put_fat+0x20a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4413      	add	r3, r2
 8007688:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3303      	adds	r3, #3
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	061a      	lsls	r2, r3, #24
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	3302      	adds	r3, #2
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	4313      	orrs	r3, r2
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	3201      	adds	r2, #1
 80076a0:	7812      	ldrb	r2, [r2, #0]
 80076a2:	0212      	lsls	r2, r2, #8
 80076a4:	4313      	orrs	r3, r2
 80076a6:	69ba      	ldr	r2, [r7, #24]
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	701a      	strb	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	0a1b      	lsrs	r3, r3, #8
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	3301      	adds	r3, #1
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	0c1a      	lsrs	r2, r3, #16
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	3302      	adds	r3, #2
 80076d6:	b2d2      	uxtb	r2, r2
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	0e1a      	lsrs	r2, r3, #24
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	3303      	adds	r3, #3
 80076e2:	b2d2      	uxtb	r2, r2
 80076e4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 80076ee:	e009      	b.n	8007704 <put_fat+0x20c>

		default :
			res = FR_INT_ERR;
 80076f0:	2302      	movs	r3, #2
 80076f2:	77fb      	strb	r3, [r7, #31]
 80076f4:	e006      	b.n	8007704 <put_fat+0x20c>
			if (res != FR_OK) break;
 80076f6:	bf00      	nop
 80076f8:	e004      	b.n	8007704 <put_fat+0x20c>
			if (res != FR_OK) break;
 80076fa:	bf00      	nop
 80076fc:	e002      	b.n	8007704 <put_fat+0x20c>
			if (res != FR_OK) break;
 80076fe:	bf00      	nop
 8007700:	e000      	b.n	8007704 <put_fat+0x20c>
			if (res != FR_OK) break;
 8007702:	bf00      	nop
		}
	}

	return res;
 8007704:	7ffb      	ldrb	r3, [r7, #31]
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d905      	bls.n	800772a <remove_chain+0x1c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d302      	bcc.n	8007730 <remove_chain+0x22>
		res = FR_INT_ERR;
 800772a:	2302      	movs	r3, #2
 800772c:	73fb      	strb	r3, [r7, #15]
 800772e:	e043      	b.n	80077b8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8007734:	e036      	b.n	80077a4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8007736:	6839      	ldr	r1, [r7, #0]
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7ff fe26 	bl	800738a <get_fat>
 800773e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d035      	beq.n	80077b2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d102      	bne.n	8007752 <remove_chain+0x44>
 800774c:	2302      	movs	r3, #2
 800774e:	73fb      	strb	r3, [r7, #15]
 8007750:	e032      	b.n	80077b8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007758:	d102      	bne.n	8007760 <remove_chain+0x52>
 800775a:	2301      	movs	r3, #1
 800775c:	73fb      	strb	r3, [r7, #15]
 800775e:	e02b      	b.n	80077b8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8007760:	2200      	movs	r2, #0
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fec7 	bl	80074f8 <put_fat>
 800776a:	4603      	mov	r3, r0
 800776c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d120      	bne.n	80077b6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800777a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777e:	d00f      	beq.n	80077a0 <remove_chain+0x92>
				fs->free_clust++;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8007794:	f043 0301 	orr.w	r3, r3, #1
 8007798:	b2da      	uxtb	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d3c2      	bcc.n	8007736 <remove_chain+0x28>
 80077b0:	e002      	b.n	80077b8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80077b2:	bf00      	nop
 80077b4:	e000      	b.n	80077b8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 80077b6:	bf00      	nop
		}
	}

	return res;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10f      	bne.n	80077f2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80077d8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <create_chain+0x2a>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d31c      	bcc.n	8007826 <create_chain+0x64>
 80077ec:	2301      	movs	r3, #1
 80077ee:	613b      	str	r3, [r7, #16]
 80077f0:	e019      	b.n	8007826 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fdc8 	bl	800738a <get_fat>
 80077fa:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d801      	bhi.n	8007806 <create_chain+0x44>
 8007802:	2301      	movs	r3, #1
 8007804:	e076      	b.n	80078f4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780c:	d101      	bne.n	8007812 <create_chain+0x50>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	e070      	b.n	80078f4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	429a      	cmp	r2, r3
 800781c:	d201      	bcs.n	8007822 <create_chain+0x60>
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	e068      	b.n	80078f4 <create_chain+0x132>
		scl = clst;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	3301      	adds	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007836:	697a      	ldr	r2, [r7, #20]
 8007838:	429a      	cmp	r2, r3
 800783a:	d307      	bcc.n	800784c <create_chain+0x8a>
			ncl = 2;
 800783c:	2302      	movs	r3, #2
 800783e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	429a      	cmp	r2, r3
 8007846:	d901      	bls.n	800784c <create_chain+0x8a>
 8007848:	2300      	movs	r3, #0
 800784a:	e053      	b.n	80078f4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800784c:	6979      	ldr	r1, [r7, #20]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff fd9b 	bl	800738a <get_fat>
 8007854:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d002      	beq.n	800786a <create_chain+0xa8>
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d101      	bne.n	800786e <create_chain+0xac>
			return cs;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	e042      	b.n	80078f4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	429a      	cmp	r2, r3
 8007874:	d1d9      	bne.n	800782a <create_chain+0x68>
 8007876:	2300      	movs	r3, #0
 8007878:	e03c      	b.n	80078f4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800787a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800787c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8007880:	6979      	ldr	r1, [r7, #20]
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7ff fe38 	bl	80074f8 <put_fat>
 8007888:	4603      	mov	r3, r0
 800788a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <create_chain+0xe4>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d006      	beq.n	80078a6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff fe2b 	bl	80074f8 <put_fat>
 80078a2:	4603      	mov	r3, r0
 80078a4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d11a      	bne.n	80078e2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d018      	beq.n	80078f2 <create_chain+0x130>
			fs->free_clust--;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80078c6:	1e5a      	subs	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80078e0:	e007      	b.n	80078f2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d102      	bne.n	80078ee <create_chain+0x12c>
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	e000      	b.n	80078f0 <create_chain+0x12e>
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80078f2:	697b      	ldr	r3, [r7, #20]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3718      	adds	r7, #24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800790c:	3304      	adds	r3, #4
 800790e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	0a5b      	lsrs	r3, r3, #9
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800791a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800791e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007922:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	1d1a      	adds	r2, r3, #4
 8007928:	613a      	str	r2, [r7, #16]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <clmt_clust+0x3c>
 8007934:	2300      	movs	r3, #0
 8007936:	e010      	b.n	800795a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	429a      	cmp	r2, r3
 800793e:	d307      	bcc.n	8007950 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	3304      	adds	r3, #4
 800794c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800794e:	e7e9      	b.n	8007924 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8007950:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	4413      	add	r3, r2
}
 800795a:	4618      	mov	r0, r3
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr

08007964 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800797e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d007      	beq.n	8007996 <dir_sdi+0x32>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800798c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	429a      	cmp	r2, r3
 8007994:	d301      	bcc.n	800799a <dir_sdi+0x36>
		return FR_INT_ERR;
 8007996:	2302      	movs	r3, #2
 8007998:	e074      	b.n	8007a84 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d10c      	bne.n	80079ba <dir_sdi+0x56>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079a6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d105      	bne.n	80079ba <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079b4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80079b8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d111      	bne.n	80079e4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079c6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80079ca:	461a      	mov	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d301      	bcc.n	80079d6 <dir_sdi+0x72>
			return FR_INT_ERR;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e056      	b.n	8007a84 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079dc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	e032      	b.n	8007a4a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079ea:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80079f2:	e01e      	b.n	8007a32 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079fa:	6979      	ldr	r1, [r7, #20]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fcc4 	bl	800738a <get_fat>
 8007a02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d101      	bne.n	8007a10 <dir_sdi+0xac>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e039      	b.n	8007a84 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d907      	bls.n	8007a26 <dir_sdi+0xc2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d301      	bcc.n	8007a2a <dir_sdi+0xc6>
				return FR_INT_ERR;
 8007a26:	2302      	movs	r3, #2
 8007a28:	e02c      	b.n	8007a84 <dir_sdi+0x120>
			idx -= ic;
 8007a2a:	683a      	ldr	r2, [r7, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d2dc      	bcs.n	80079f4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a40:	6979      	ldr	r1, [r7, #20]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fc80 	bl	8007348 <clust2sect>
 8007a48:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <dir_sdi+0xf8>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e013      	b.n	8007a84 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	091a      	lsrs	r2, r3, #4
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	441a      	add	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a70:	461a      	mov	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	015b      	lsls	r3, r3, #5
 8007a7a:	441a      	add	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a8c:	b590      	push	{r4, r7, lr}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d004      	beq.n	8007ab2 <dir_next+0x26>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <dir_next+0x2a>
		return FR_NO_FILE;
 8007ab2:	2304      	movs	r3, #4
 8007ab4:	e0dd      	b.n	8007c72 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 80c6 	bne.w	8007c4e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ae0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	f0c0 80b0 	bcc.w	8007c4e <dir_next+0x1c2>
				return FR_NO_FILE;
 8007aee:	2304      	movs	r3, #4
 8007af0:	e0bf      	b.n	8007c72 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	091b      	lsrs	r3, r3, #4
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8007afc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8007b00:	3a01      	subs	r2, #1
 8007b02:	4013      	ands	r3, r2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f040 80a2 	bne.w	8007c4e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b16:	4619      	mov	r1, r3
 8007b18:	4610      	mov	r0, r2
 8007b1a:	f7ff fc36 	bl	800738a <get_fat>
 8007b1e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d801      	bhi.n	8007b2a <dir_next+0x9e>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0a3      	b.n	8007c72 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d101      	bne.n	8007b36 <dir_next+0xaa>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e09d      	b.n	8007c72 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d374      	bcc.n	8007c30 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <dir_next+0xc4>
 8007b4c:	2304      	movs	r3, #4
 8007b4e:	e090      	b.n	8007c72 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7ff fe2f 	bl	80077c2 <create_chain>
 8007b64:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <dir_next+0xe4>
 8007b6c:	2307      	movs	r3, #7
 8007b6e:	e080      	b.n	8007c72 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d101      	bne.n	8007b7a <dir_next+0xee>
 8007b76:	2302      	movs	r3, #2
 8007b78:	e07b      	b.n	8007c72 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b80:	d101      	bne.n	8007b86 <dir_next+0xfa>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e075      	b.n	8007c72 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fab7 	bl	8007100 <sync_window>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <dir_next+0x110>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e06a      	b.n	8007c72 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007ba2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff f89e 	bl	8006cea <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 8007bba:	6979      	ldr	r1, [r7, #20]
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7ff fbc3 	bl	8007348 <clust2sect>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007bc8:	2300      	movs	r3, #0
 8007bca:	613b      	str	r3, [r7, #16]
 8007bcc:	e01b      	b.n	8007c06 <dir_next+0x17a>
						dp->fs->wflag = 1;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff fa8d 	bl	8007100 <sync_window>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <dir_next+0x164>
 8007bec:	2301      	movs	r3, #1
 8007bee:	e040      	b.n	8007c72 <dir_next+0x1e6>
						dp->fs->winsect++;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007bf6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8007bfa:	3201      	adds	r2, #1
 8007bfc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	3301      	adds	r3, #1
 8007c04:	613b      	str	r3, [r7, #16]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c0c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8007c10:	461a      	mov	r2, r3
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d3da      	bcc.n	8007bce <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c1e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	1a8a      	subs	r2, r1, r2
 8007c2c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c3e:	6979      	ldr	r1, [r7, #20]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fb81 	bl	8007348 <clust2sect>
 8007c46:	4602      	mov	r2, r0
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f003 030f 	and.w	r3, r3, #15
 8007c66:	015b      	lsls	r3, r3, #5
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7ff fe6c 	bl	8007964 <dir_sdi>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d131      	bne.n	8007cfa <dir_alloc+0x80>
		n = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	4610      	mov	r0, r2
 8007caa:	f7ff fa72 	bl	8007192 <move_window>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d11f      	bne.n	8007cf8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2be5      	cmp	r3, #229	; 0xe5
 8007cc2:	d005      	beq.n	8007cd0 <dir_alloc+0x56>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d107      	bne.n	8007ce0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d102      	bne.n	8007ce4 <dir_alloc+0x6a>
 8007cde:	e00c      	b.n	8007cfa <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fed0 	bl	8007a8c <dir_next>
 8007cec:	4603      	mov	r3, r0
 8007cee:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0d1      	beq.n	8007c9a <dir_alloc+0x20>
 8007cf6:	e000      	b.n	8007cfa <dir_alloc+0x80>
			if (res != FR_OK) break;
 8007cf8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d101      	bne.n	8007d04 <dir_alloc+0x8a>
 8007d00:	2307      	movs	r3, #7
 8007d02:	73fb      	strb	r3, [r7, #15]
	return res;
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8007d0e:	b480      	push	{r7}
 8007d10:	b085      	sub	sp, #20
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	331b      	adds	r3, #27
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	b21a      	sxth	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	331a      	adds	r3, #26
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	b21b      	sxth	r3, r3
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007d38:	2b03      	cmp	r3, #3
 8007d3a:	d10f      	bne.n	8007d5c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	3315      	adds	r3, #21
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	b21a      	sxth	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	3314      	adds	r3, #20
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	b21b      	sxth	r3, r3
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	b21b      	sxth	r3, r3
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	041b      	lsls	r3, r3, #16
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]

	return cl;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3714      	adds	r7, #20
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bc80      	pop	{r7}
 8007d66:	4770      	bx	lr

08007d68 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	331a      	adds	r3, #26
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	331b      	adds	r3, #27
 8007d88:	b2d2      	uxtb	r2, r2
 8007d8a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	0c1a      	lsrs	r2, r3, #16
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3314      	adds	r3, #20
 8007d94:	b2d2      	uxtb	r2, r2
 8007d96:	701a      	strb	r2, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	0a1b      	lsrs	r3, r3, #8
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3315      	adds	r3, #21
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc6:	1e5a      	subs	r2, r3, #1
 8007dc8:	4613      	mov	r3, r2
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	4413      	add	r3, r2
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	613b      	str	r3, [r7, #16]
 8007dd8:	2301      	movs	r3, #1
 8007dda:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8007ddc:	4a2b      	ldr	r2, [pc, #172]	; (8007e8c <cmp_lfn+0xd8>)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	4413      	add	r3, r2
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	4413      	add	r3, r2
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	b21a      	sxth	r2, r3
 8007df0:	4926      	ldr	r1, [pc, #152]	; (8007e8c <cmp_lfn+0xd8>)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	440b      	add	r3, r1
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	440b      	add	r3, r1
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b21b      	sxth	r3, r3
 8007e06:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8007e08:	89fb      	ldrh	r3, [r7, #14]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d019      	beq.n	8007e42 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8007e0e:	89bb      	ldrh	r3, [r7, #12]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f001 ffc3 	bl	8009d9c <ff_wtoupper>
 8007e16:	4603      	mov	r3, r0
 8007e18:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2bfe      	cmp	r3, #254	; 0xfe
 8007e1e:	d80e      	bhi.n	8007e3e <cmp_lfn+0x8a>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	617a      	str	r2, [r7, #20]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f001 ffb4 	bl	8009d9c <ff_wtoupper>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	89fb      	ldrh	r3, [r7, #14]
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d008      	beq.n	8007e50 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e01f      	b.n	8007e82 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007e42:	89bb      	ldrh	r3, [r7, #12]
 8007e44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d001      	beq.n	8007e50 <cmp_lfn+0x9c>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e018      	b.n	8007e82 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	3301      	adds	r3, #1
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	2b0c      	cmp	r3, #12
 8007e5a:	d9bf      	bls.n	8007ddc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00b      	beq.n	8007e80 <cmp_lfn+0xcc>
 8007e68:	89fb      	ldrh	r3, [r7, #14]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <cmp_lfn+0xcc>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	4413      	add	r3, r2
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <cmp_lfn+0xcc>
		return 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8007e80:	2301      	movs	r3, #1
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3718      	adds	r7, #24
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	0800d158 	.word	0x0800d158

08007e90 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b089      	sub	sp, #36	; 0x24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	71fb      	strb	r3, [r7, #7]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	330d      	adds	r3, #13
 8007eaa:	79ba      	ldrb	r2, [r7, #6]
 8007eac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	330b      	adds	r3, #11
 8007eb2:	220f      	movs	r2, #15
 8007eb4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	331a      	adds	r3, #26
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	331b      	adds	r3, #27
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8007ece:	79fb      	ldrb	r3, [r7, #7]
 8007ed0:	1e5a      	subs	r2, r3, #1
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	82fb      	strh	r3, [r7, #22]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007ee6:	8afb      	ldrh	r3, [r7, #22]
 8007ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d007      	beq.n	8007f00 <fit_lfn+0x70>
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	1c5a      	adds	r2, r3, #1
 8007ef4:	61fa      	str	r2, [r7, #28]
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4413      	add	r3, r2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007f00:	4a1c      	ldr	r2, [pc, #112]	; (8007f74 <fit_lfn+0xe4>)
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	4413      	add	r3, r2
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	8afa      	ldrh	r2, [r7, #22]
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	8afb      	ldrh	r3, [r7, #22]
 8007f16:	0a1b      	lsrs	r3, r3, #8
 8007f18:	b299      	uxth	r1, r3
 8007f1a:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <fit_lfn+0xe4>)
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	4413      	add	r3, r2
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	3301      	adds	r3, #1
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	b2ca      	uxtb	r2, r1
 8007f2a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8007f2c:	8afb      	ldrh	r3, [r7, #22]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d102      	bne.n	8007f38 <fit_lfn+0xa8>
 8007f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	2b0c      	cmp	r3, #12
 8007f42:	d9d0      	bls.n	8007ee6 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d006      	beq.n	8007f5c <fit_lfn+0xcc>
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	005b      	lsls	r3, r3, #1
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <fit_lfn+0xd4>
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	79fa      	ldrb	r2, [r7, #7]
 8007f68:	701a      	strb	r2, [r3, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	3724      	adds	r7, #36	; 0x24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bc80      	pop	{r7}
 8007f72:	4770      	bx	lr
 8007f74:	0800d158 	.word	0x0800d158

08007f78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08c      	sub	sp, #48	; 0x30
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007f86:	220b      	movs	r2, #11
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7fe fe90 	bl	8006cb0 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d92b      	bls.n	8007fee <gen_numname+0x76>
		sr = seq;
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007f9a:	e022      	b.n	8007fe2 <gen_numname+0x6a>
			wc = *lfn++;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	1c9a      	adds	r2, r3, #2
 8007fa0:	607a      	str	r2, [r7, #4]
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007faa:	e017      	b.n	8007fdc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	005a      	lsls	r2, r3, #1
 8007fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	4413      	add	r3, r2
 8007fb8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d005      	beq.n	8007fd6 <gen_numname+0x5e>
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007fd0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007fd4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	3301      	adds	r3, #1
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	2b0f      	cmp	r3, #15
 8007fe0:	d9e4      	bls.n	8007fac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1d8      	bne.n	8007f9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007fee:	2307      	movs	r3, #7
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	3330      	adds	r3, #48	; 0x30
 8007ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008006:	2b39      	cmp	r3, #57	; 0x39
 8008008:	d904      	bls.n	8008014 <gen_numname+0x9c>
 800800a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800800e:	3307      	adds	r3, #7
 8008010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	1e5a      	subs	r2, r3, #1
 8008018:	62ba      	str	r2, [r7, #40]	; 0x28
 800801a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800801e:	4413      	add	r3, r2
 8008020:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008024:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1de      	bne.n	8007ff2 <gen_numname+0x7a>
	ns[i] = '~';
 8008034:	f107 0214 	add.w	r2, r7, #20
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	4413      	add	r3, r2
 800803c:	227e      	movs	r2, #126	; 0x7e
 800803e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008040:	2300      	movs	r3, #0
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
 8008044:	e002      	b.n	800804c <gen_numname+0xd4>
 8008046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008048:	3301      	adds	r3, #1
 800804a:	627b      	str	r3, [r7, #36]	; 0x24
 800804c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008050:	429a      	cmp	r2, r3
 8008052:	d205      	bcs.n	8008060 <gen_numname+0xe8>
 8008054:	68fa      	ldr	r2, [r7, #12]
 8008056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008058:	4413      	add	r3, r2
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b20      	cmp	r3, #32
 800805e:	d1f2      	bne.n	8008046 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b07      	cmp	r3, #7
 8008064:	d808      	bhi.n	8008078 <gen_numname+0x100>
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	62ba      	str	r2, [r7, #40]	; 0x28
 800806c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008070:	4413      	add	r3, r2
 8008072:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008076:	e000      	b.n	800807a <gen_numname+0x102>
 8008078:	2120      	movs	r1, #32
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	1c5a      	adds	r2, r3, #1
 800807e:	627a      	str	r2, [r7, #36]	; 0x24
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	460a      	mov	r2, r1
 8008086:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8008088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808a:	2b07      	cmp	r3, #7
 800808c:	d9e8      	bls.n	8008060 <gen_numname+0xe8>
}
 800808e:	bf00      	nop
 8008090:	3730      	adds	r7, #48	; 0x30
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8008096:	b480      	push	{r7}
 8008098:	b085      	sub	sp, #20
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80080a2:	230b      	movs	r3, #11
 80080a4:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	0852      	lsrs	r2, r2, #1
 80080ac:	01db      	lsls	r3, r3, #7
 80080ae:	4313      	orrs	r3, r2
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	1c59      	adds	r1, r3, #1
 80080b6:	6079      	str	r1, [r7, #4]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4413      	add	r3, r2
 80080bc:	73fb      	strb	r3, [r7, #15]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	60bb      	str	r3, [r7, #8]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1ed      	bne.n	80080a6 <sum_sfn+0x10>
	return sum;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3714      	adds	r7, #20
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bc80      	pop	{r7}
 80080d4:	4770      	bx	lr

080080d6 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b086      	sub	sp, #24
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080de:	2100      	movs	r1, #0
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7ff fc3f 	bl	8007964 <dir_sdi>
 80080e6:	4603      	mov	r3, r0
 80080e8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <dir_find+0x1e>
 80080f0:	7dfb      	ldrb	r3, [r7, #23]
 80080f2:	e0ac      	b.n	800824e <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80080f4:	23ff      	movs	r3, #255	; 0xff
 80080f6:	753b      	strb	r3, [r7, #20]
 80080f8:	7d3b      	ldrb	r3, [r7, #20]
 80080fa:	757b      	strb	r3, [r7, #21]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008102:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008112:	4619      	mov	r1, r3
 8008114:	4610      	mov	r0, r2
 8008116:	f7ff f83c 	bl	8007192 <move_window>
 800811a:	4603      	mov	r3, r0
 800811c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 808e 	bne.w	8008242 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800812c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008134:	7dbb      	ldrb	r3, [r7, #22]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <dir_find+0x6a>
 800813a:	2304      	movs	r3, #4
 800813c:	75fb      	strb	r3, [r7, #23]
 800813e:	e085      	b.n	800824c <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	330b      	adds	r3, #11
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800814a:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800814c:	7dbb      	ldrb	r3, [r7, #22]
 800814e:	2be5      	cmp	r3, #229	; 0xe5
 8008150:	d007      	beq.n	8008162 <dir_find+0x8c>
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <dir_find+0x9c>
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	2b0f      	cmp	r3, #15
 8008160:	d007      	beq.n	8008172 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8008162:	23ff      	movs	r3, #255	; 0xff
 8008164:	757b      	strb	r3, [r7, #21]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800816c:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
 8008170:	e05c      	b.n	800822c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b0f      	cmp	r3, #15
 8008176:	d133      	bne.n	80081e0 <dir_find+0x10a>
				if (dp->lfn) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800817e:	2b00      	cmp	r3, #0
 8008180:	d054      	beq.n	800822c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008182:	7dbb      	ldrb	r3, [r7, #22]
 8008184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00e      	beq.n	80081aa <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	7b5b      	ldrb	r3, [r3, #13]
 8008190:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8008192:	7dbb      	ldrb	r3, [r7, #22]
 8008194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008198:	75bb      	strb	r3, [r7, #22]
 800819a:	7dbb      	ldrb	r3, [r7, #22]
 800819c:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80081aa:	7dba      	ldrb	r2, [r7, #22]
 80081ac:	7d7b      	ldrb	r3, [r7, #21]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d113      	bne.n	80081da <dir_find+0x104>
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	330d      	adds	r3, #13
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	7d3a      	ldrb	r2, [r7, #20]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d10d      	bne.n	80081da <dir_find+0x104>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80081c4:	6939      	ldr	r1, [r7, #16]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fdf4 	bl	8007db4 <cmp_lfn>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <dir_find+0x104>
 80081d2:	7d7b      	ldrb	r3, [r7, #21]
 80081d4:	3b01      	subs	r3, #1
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	e000      	b.n	80081dc <dir_find+0x106>
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	757b      	strb	r3, [r7, #21]
 80081de:	e025      	b.n	800822c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80081e0:	7d7b      	ldrb	r3, [r7, #21]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d107      	bne.n	80081f6 <dir_find+0x120>
 80081e6:	6938      	ldr	r0, [r7, #16]
 80081e8:	f7ff ff55 	bl	8008096 <sum_sfn>
 80081ec:	4603      	mov	r3, r0
 80081ee:	461a      	mov	r2, r3
 80081f0:	7d3b      	ldrb	r3, [r7, #20]
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d027      	beq.n	8008246 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80081fc:	330b      	adds	r3, #11
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	d10a      	bne.n	800821e <dir_find+0x148>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800820e:	220b      	movs	r2, #11
 8008210:	4619      	mov	r1, r3
 8008212:	6938      	ldr	r0, [r7, #16]
 8008214:	f7fe fd82 	bl	8006d1c <mem_cmp>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 800821e:	23ff      	movs	r3, #255	; 0xff
 8008220:	757b      	strb	r3, [r7, #21]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008228:	f8a3 2224 	strh.w	r2, [r3, #548]	; 0x224
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800822c:	2100      	movs	r1, #0
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f7ff fc2c 	bl	8007a8c <dir_next>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008238:	7dfb      	ldrb	r3, [r7, #23]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f43f af63 	beq.w	8008106 <dir_find+0x30>
 8008240:	e004      	b.n	800824c <dir_find+0x176>
		if (res != FR_OK) break;
 8008242:	bf00      	nop
 8008244:	e002      	b.n	800824c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8008246:	bf00      	nop
 8008248:	e000      	b.n	800824c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 800824a:	bf00      	nop

	return res;
 800824c:	7dfb      	ldrb	r3, [r7, #23]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08c      	sub	sp, #48	; 0x30
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008266:	623b      	str	r3, [r7, #32]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800826e:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 8008270:	f107 030c 	add.w	r3, r7, #12
 8008274:	220c      	movs	r2, #12
 8008276:	6a39      	ldr	r1, [r7, #32]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fd19 	bl	8006cb0 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800827e:	7dfb      	ldrb	r3, [r7, #23]
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d037      	beq.n	80082f8 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	330b      	adds	r3, #11
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		for (n = 1; n < 100; n++) {
 8008298:	2301      	movs	r3, #1
 800829a:	62bb      	str	r3, [r7, #40]	; 0x28
 800829c:	e013      	b.n	80082c6 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800829e:	f107 010c 	add.w	r1, r7, #12
 80082a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a4:	69fa      	ldr	r2, [r7, #28]
 80082a6:	6a38      	ldr	r0, [r7, #32]
 80082a8:	f7ff fe66 	bl	8007f78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ff12 	bl	80080d6 <dir_find>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80082b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	3301      	adds	r3, #1
 80082c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	2b63      	cmp	r3, #99	; 0x63
 80082ca:	d9e8      	bls.n	800829e <dir_register+0x46>
 80082cc:	e000      	b.n	80082d0 <dir_register+0x78>
			if (res != FR_OK) break;
 80082ce:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	2b64      	cmp	r3, #100	; 0x64
 80082d4:	d101      	bne.n	80082da <dir_register+0x82>
 80082d6:	2307      	movs	r3, #7
 80082d8:	e0c5      	b.n	8008466 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80082da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d002      	beq.n	80082e8 <dir_register+0x90>
 80082e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80082e6:	e0be      	b.n	8008466 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	330b      	adds	r3, #11
 80082ec:	7dfa      	ldrb	r2, [r7, #23]
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80082f8:	7dfb      	ldrb	r3, [r7, #23]
 80082fa:	f003 0302 	and.w	r3, r3, #2
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d014      	beq.n	800832c <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 8008302:	2300      	movs	r3, #0
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
 8008306:	e002      	b.n	800830e <dir_register+0xb6>
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	3301      	adds	r3, #1
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
 800830e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008310:	005b      	lsls	r3, r3, #1
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1f5      	bne.n	8008308 <dir_register+0xb0>
		nent = (n + 25) / 13;
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	3319      	adds	r3, #25
 8008320:	4a53      	ldr	r2, [pc, #332]	; (8008470 <dir_register+0x218>)
 8008322:	fba2 2303 	umull	r2, r3, r2, r3
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
 800832a:	e001      	b.n	8008330 <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 800832c:	2301      	movs	r3, #1
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fca1 	bl	8007c7a <dir_alloc>
 8008338:	4603      	mov	r3, r0
 800833a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800833e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008342:	2b00      	cmp	r3, #0
 8008344:	d153      	bne.n	80083ee <dir_register+0x196>
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	3b01      	subs	r3, #1
 800834a:	627b      	str	r3, [r7, #36]	; 0x24
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	d04d      	beq.n	80083ee <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 8008358:	461a      	mov	r2, r3
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f7ff faff 	bl	8007964 <dir_sdi>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800836c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008370:	2b00      	cmp	r3, #0
 8008372:	d13c      	bne.n	80083ee <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fe8b 	bl	8008096 <sum_sfn>
 8008380:	4603      	mov	r3, r0
 8008382:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008390:	4619      	mov	r1, r3
 8008392:	4610      	mov	r0, r2
 8008394:	f7fe fefd 	bl	8007192 <move_window>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800839e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d122      	bne.n	80083ec <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	b2da      	uxtb	r2, r3
 80083b6:	7efb      	ldrb	r3, [r7, #27]
 80083b8:	f7ff fd6a 	bl	8007e90 <fit_lfn>
				dp->fs->wflag = 1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = dir_next(dp, 0);	/* Next entry */
 80083c8:	2100      	movs	r1, #0
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fb5e 	bl	8007a8c <dir_next>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80083d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d107      	bne.n	80083ee <dir_register+0x196>
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	3b01      	subs	r3, #1
 80083e2:	627b      	str	r3, [r7, #36]	; 0x24
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1cc      	bne.n	8008384 <dir_register+0x12c>
 80083ea:	e000      	b.n	80083ee <dir_register+0x196>
				if (res != FR_OK) break;
 80083ec:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80083ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d135      	bne.n	8008462 <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f7fe fec4 	bl	8007192 <move_window>
 800840a:	4603      	mov	r3, r0
 800840c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008410:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008414:	2b00      	cmp	r3, #0
 8008416:	d124      	bne.n	8008462 <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800841e:	2220      	movs	r2, #32
 8008420:	2100      	movs	r1, #0
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fc61 	bl	8006cea <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008434:	220b      	movs	r2, #11
 8008436:	4619      	mov	r1, r3
 8008438:	f7fe fc3a 	bl	8006cb0 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008442:	330b      	adds	r3, #11
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800844c:	330c      	adds	r3, #12
 800844e:	f002 0218 	and.w	r2, r2, #24
 8008452:	b2d2      	uxtb	r2, r2
 8008454:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 8008462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008466:	4618      	mov	r0, r3
 8008468:	3730      	adds	r7, #48	; 0x30
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	4ec4ec4f 	.word	0x4ec4ec4f

08008474 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b08a      	sub	sp, #40	; 0x28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	e002      	b.n	800848c <create_name+0x18>
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	3301      	adds	r3, #1
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b2f      	cmp	r3, #47	; 0x2f
 8008492:	d0f8      	beq.n	8008486 <create_name+0x12>
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b5c      	cmp	r3, #92	; 0x5c
 800849a:	d0f4      	beq.n	8008486 <create_name+0x12>
	lfn = dp->lfn;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80084a2:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	61ba      	str	r2, [r7, #24]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4413      	add	r3, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 80084ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084bc:	2b1f      	cmp	r3, #31
 80084be:	d92f      	bls.n	8008520 <create_name+0xac>
 80084c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c2:	2b2f      	cmp	r3, #47	; 0x2f
 80084c4:	d02c      	beq.n	8008520 <create_name+0xac>
 80084c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084c8:	2b5c      	cmp	r3, #92	; 0x5c
 80084ca:	d029      	beq.n	8008520 <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	2bfe      	cmp	r3, #254	; 0xfe
 80084d0:	d901      	bls.n	80084d6 <create_name+0x62>
			return FR_INVALID_NAME;
 80084d2:	2306      	movs	r3, #6
 80084d4:	e17b      	b.n	80087ce <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 80084d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80084dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084de:	2101      	movs	r1, #1
 80084e0:	4618      	mov	r0, r3
 80084e2:	f001 fc21 	bl	8009d28 <ff_convert>
 80084e6:	4603      	mov	r3, r0
 80084e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80084ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <create_name+0x80>
 80084f0:	2306      	movs	r3, #6
 80084f2:	e16c      	b.n	80087ce <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80084f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084f6:	2b7f      	cmp	r3, #127	; 0x7f
 80084f8:	d809      	bhi.n	800850e <create_name+0x9a>
 80084fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80084fc:	4619      	mov	r1, r3
 80084fe:	48b6      	ldr	r0, [pc, #728]	; (80087d8 <create_name+0x364>)
 8008500:	f7fe fc32 	bl	8006d68 <chk_chr>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <create_name+0x9a>
			return FR_INVALID_NAME;
 800850a:	2306      	movs	r3, #6
 800850c:	e15f      	b.n	80087ce <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	1c5a      	adds	r2, r3, #1
 8008512:	617a      	str	r2, [r7, #20]
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800851c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800851e:	e7c5      	b.n	80084ac <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	441a      	add	r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800852a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800852c:	2b1f      	cmp	r3, #31
 800852e:	d801      	bhi.n	8008534 <create_name+0xc0>
 8008530:	2304      	movs	r3, #4
 8008532:	e000      	b.n	8008536 <create_name+0xc2>
 8008534:	2300      	movs	r3, #0
 8008536:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 800853a:	e011      	b.n	8008560 <create_name+0xec>
		w = lfn[di - 1];
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008542:	3b01      	subs	r3, #1
 8008544:	005b      	lsls	r3, r3, #1
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	881b      	ldrh	r3, [r3, #0]
 800854c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800854e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008550:	2b20      	cmp	r3, #32
 8008552:	d002      	beq.n	800855a <create_name+0xe6>
 8008554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008556:	2b2e      	cmp	r3, #46	; 0x2e
 8008558:	d106      	bne.n	8008568 <create_name+0xf4>
		di--;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3b01      	subs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1ea      	bne.n	800853c <create_name+0xc8>
 8008566:	e000      	b.n	800856a <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8008568:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <create_name+0x100>
 8008570:	2306      	movs	r3, #6
 8008572:	e12c      	b.n	80087ce <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	2200      	movs	r2, #0
 800857e:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008586:	220b      	movs	r2, #11
 8008588:	2120      	movs	r1, #32
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fbad 	bl	8006cea <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008590:	2300      	movs	r3, #0
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	e002      	b.n	800859c <create_name+0x128>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	3301      	adds	r3, #1
 800859a:	61bb      	str	r3, [r7, #24]
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d0f5      	beq.n	8008596 <create_name+0x122>
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	005b      	lsls	r3, r3, #1
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4413      	add	r3, r2
 80085b2:	881b      	ldrh	r3, [r3, #0]
 80085b4:	2b2e      	cmp	r3, #46	; 0x2e
 80085b6:	d0ee      	beq.n	8008596 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d009      	beq.n	80085d2 <create_name+0x15e>
 80085be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80085c2:	f043 0303 	orr.w	r3, r3, #3
 80085c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80085ca:	e002      	b.n	80085d2 <create_name+0x15e>
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d009      	beq.n	80085ec <create_name+0x178>
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80085de:	3b01      	subs	r3, #1
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	2b2e      	cmp	r3, #46	; 0x2e
 80085ea:	d1ef      	bne.n	80085cc <create_name+0x158>

	b = i = 0; ni = 8;
 80085ec:	2300      	movs	r3, #0
 80085ee:	623b      	str	r3, [r7, #32]
 80085f0:	2300      	movs	r3, #0
 80085f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085f6:	2308      	movs	r3, #8
 80085f8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	61ba      	str	r2, [r7, #24]
 8008600:	005b      	lsls	r3, r3, #1
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	881b      	ldrh	r3, [r3, #0]
 8008608:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800860a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 8090 	beq.w	8008732 <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008612:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008614:	2b20      	cmp	r3, #32
 8008616:	d006      	beq.n	8008626 <create_name+0x1b2>
 8008618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800861a:	2b2e      	cmp	r3, #46	; 0x2e
 800861c:	d10a      	bne.n	8008634 <create_name+0x1c0>
 800861e:	69ba      	ldr	r2, [r7, #24]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	429a      	cmp	r2, r3
 8008624:	d006      	beq.n	8008634 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8008626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800862a:	f043 0303 	orr.w	r3, r3, #3
 800862e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008632:	e07d      	b.n	8008730 <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008634:	6a3a      	ldr	r2, [r7, #32]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	429a      	cmp	r2, r3
 800863a:	d203      	bcs.n	8008644 <create_name+0x1d0>
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	429a      	cmp	r2, r3
 8008642:	d123      	bne.n	800868c <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	2b0b      	cmp	r3, #11
 8008648:	d106      	bne.n	8008658 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 800864a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800864e:	f043 0303 	orr.w	r3, r3, #3
 8008652:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008656:	e06f      	b.n	8008738 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	429a      	cmp	r2, r3
 800865e:	d005      	beq.n	800866c <create_name+0x1f8>
 8008660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008664:	f043 0303 	orr.w	r3, r3, #3
 8008668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	429a      	cmp	r2, r3
 8008672:	d860      	bhi.n	8008736 <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	2308      	movs	r3, #8
 800867a:	623b      	str	r3, [r7, #32]
 800867c:	230b      	movs	r3, #11
 800867e:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800868a:	e051      	b.n	8008730 <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800868c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800868e:	2b7f      	cmp	r3, #127	; 0x7f
 8008690:	d914      	bls.n	80086bc <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f001 fb46 	bl	8009d28 <ff_convert>
 800869c:	4603      	mov	r3, r0
 800869e:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80086a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <create_name+0x23c>
 80086a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086a8:	3b80      	subs	r3, #128	; 0x80
 80086aa:	4a4c      	ldr	r2, [pc, #304]	; (80087dc <create_name+0x368>)
 80086ac:	5cd3      	ldrb	r3, [r2, r3]
 80086ae:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80086b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086b4:	f043 0302 	orr.w	r3, r3, #2
 80086b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80086bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <create_name+0x25e>
 80086c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086c4:	4619      	mov	r1, r3
 80086c6:	4846      	ldr	r0, [pc, #280]	; (80087e0 <create_name+0x36c>)
 80086c8:	f7fe fb4e 	bl	8006d68 <chk_chr>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80086d2:	235f      	movs	r3, #95	; 0x5f
 80086d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80086d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80086da:	f043 0303 	orr.w	r3, r3, #3
 80086de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80086e2:	e01b      	b.n	800871c <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80086e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	d909      	bls.n	80086fe <create_name+0x28a>
 80086ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086ec:	2b5a      	cmp	r3, #90	; 0x5a
 80086ee:	d806      	bhi.n	80086fe <create_name+0x28a>
					b |= 2;
 80086f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80086fc:	e00e      	b.n	800871c <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80086fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008700:	2b60      	cmp	r3, #96	; 0x60
 8008702:	d90b      	bls.n	800871c <create_name+0x2a8>
 8008704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008706:	2b7a      	cmp	r3, #122	; 0x7a
 8008708:	d808      	bhi.n	800871c <create_name+0x2a8>
						b |= 1; w -= 0x20;
 800870a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800870e:	f043 0301 	orr.w	r3, r3, #1
 8008712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008718:	3b20      	subs	r3, #32
 800871a:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	1c59      	adds	r1, r3, #1
 8008726:	6239      	str	r1, [r7, #32]
 8008728:	4413      	add	r3, r2
 800872a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8008730:	e763      	b.n	80085fa <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 8008732:	bf00      	nop
 8008734:	e000      	b.n	8008738 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8008736:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	2be5      	cmp	r3, #229	; 0xe5
 8008742:	d104      	bne.n	800874e <create_name+0x2da>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800874a:	2205      	movs	r2, #5
 800874c:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	2b08      	cmp	r3, #8
 8008752:	d104      	bne.n	800875e <create_name+0x2ea>
 8008754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800875e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008762:	f003 030c 	and.w	r3, r3, #12
 8008766:	2b0c      	cmp	r3, #12
 8008768:	d005      	beq.n	8008776 <create_name+0x302>
 800876a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	2b03      	cmp	r3, #3
 8008774:	d105      	bne.n	8008782 <create_name+0x30e>
		cf |= NS_LFN;
 8008776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800877a:	f043 0302 	orr.w	r3, r3, #2
 800877e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008786:	f003 0302 	and.w	r3, r3, #2
 800878a:	2b00      	cmp	r3, #0
 800878c:	d117      	bne.n	80087be <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800878e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b01      	cmp	r3, #1
 8008798:	d105      	bne.n	80087a6 <create_name+0x332>
 800879a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800879e:	f043 0310 	orr.w	r3, r3, #16
 80087a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80087a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087aa:	f003 030c 	and.w	r3, r3, #12
 80087ae:	2b04      	cmp	r3, #4
 80087b0:	d105      	bne.n	80087be <create_name+0x34a>
 80087b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80087b6:	f043 0308 	orr.w	r3, r3, #8
 80087ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80087c4:	330b      	adds	r3, #11
 80087c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80087ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80087cc:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3728      	adds	r7, #40	; 0x28
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	0800d078 	.word	0x0800d078
 80087dc:	0800d0d8 	.word	0x0800d0d8
 80087e0:	0800d084 	.word	0x0800d084

080087e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2b2f      	cmp	r3, #47	; 0x2f
 80087f4:	d003      	beq.n	80087fe <follow_path+0x1a>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	2b5c      	cmp	r3, #92	; 0x5c
 80087fc:	d102      	bne.n	8008804 <follow_path+0x20>
		path++;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	3301      	adds	r3, #1
 8008802:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b1f      	cmp	r3, #31
 8008812:	d80a      	bhi.n	800882a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8008814:	2100      	movs	r1, #0
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff f8a4 	bl	8007964 <dir_sdi>
 800881c:	4603      	mov	r3, r0
 800881e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008828:	e045      	b.n	80088b6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800882a:	463b      	mov	r3, r7
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff fe20 	bl	8008474 <create_name>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d136      	bne.n	80088ac <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff fc49 	bl	80080d6 <dir_find>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800884e:	7adb      	ldrb	r3, [r3, #11]
 8008850:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8008852:	7bfb      	ldrb	r3, [r7, #15]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00a      	beq.n	800886e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b04      	cmp	r3, #4
 800885c:	d128      	bne.n	80088b0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d123      	bne.n	80088b0 <follow_path+0xcc>
 8008868:	2305      	movs	r3, #5
 800886a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800886c:	e020      	b.n	80088b0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800886e:	7bbb      	ldrb	r3, [r7, #14]
 8008870:	f003 0304 	and.w	r3, r3, #4
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11d      	bne.n	80088b4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800887e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	330b      	adds	r3, #11
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800888e:	2305      	movs	r3, #5
 8008890:	73fb      	strb	r3, [r7, #15]
 8008892:	e010      	b.n	80088b6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800889a:	68b9      	ldr	r1, [r7, #8]
 800889c:	4618      	mov	r0, r3
 800889e:	f7ff fa36 	bl	8007d0e <ld_clust>
 80088a2:	4602      	mov	r2, r0
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80088aa:	e7be      	b.n	800882a <follow_path+0x46>
			if (res != FR_OK) break;
 80088ac:	bf00      	nop
 80088ae:	e002      	b.n	80088b6 <follow_path+0xd2>
				break;
 80088b0:	bf00      	nop
 80088b2:	e000      	b.n	80088b6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80088b4:	bf00      	nop
		}
	}

	return res;
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80088c8:	f04f 33ff 	mov.w	r3, #4294967295
 80088cc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d031      	beq.n	800893a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	e002      	b.n	80088e4 <get_ldnumber+0x24>
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	3301      	adds	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b1f      	cmp	r3, #31
 80088ea:	d903      	bls.n	80088f4 <get_ldnumber+0x34>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b3a      	cmp	r3, #58	; 0x3a
 80088f2:	d1f4      	bne.n	80088de <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	2b3a      	cmp	r3, #58	; 0x3a
 80088fa:	d11c      	bne.n	8008936 <get_ldnumber+0x76>
			tp = *path;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	60fa      	str	r2, [r7, #12]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	3b30      	subs	r3, #48	; 0x30
 800890c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b09      	cmp	r3, #9
 8008912:	d80e      	bhi.n	8008932 <get_ldnumber+0x72>
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	429a      	cmp	r2, r3
 800891a:	d10a      	bne.n	8008932 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <get_ldnumber+0x72>
					vol = (int)i;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	3301      	adds	r3, #1
 800892a:	617b      	str	r3, [r7, #20]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	e002      	b.n	800893c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008936:	2300      	movs	r3, #0
 8008938:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800893a:	693b      	ldr	r3, [r7, #16]
}
 800893c:	4618      	mov	r0, r3
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr
	...

08008948 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f04f 32ff 	mov.w	r2, #4294967295
 8008960:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7fe fc13 	bl	8007192 <move_window>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d001      	beq.n	8008976 <check_fs+0x2e>
		return 3;
 8008972:	2303      	movs	r3, #3
 8008974:	e04a      	b.n	8008a0c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800897c:	3301      	adds	r3, #1
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	021b      	lsls	r3, r3, #8
 8008982:	b21a      	sxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800898a:	b21b      	sxth	r3, r3
 800898c:	4313      	orrs	r3, r2
 800898e:	b21b      	sxth	r3, r3
 8008990:	4a20      	ldr	r2, [pc, #128]	; (8008a14 <check_fs+0xcc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d001      	beq.n	800899a <check_fs+0x52>
		return 2;
 8008996:	2302      	movs	r3, #2
 8008998:	e038      	b.n	8008a0c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3336      	adds	r3, #54	; 0x36
 800899e:	3303      	adds	r3, #3
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	061a      	lsls	r2, r3, #24
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3336      	adds	r3, #54	; 0x36
 80089a8:	3302      	adds	r3, #2
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	041b      	lsls	r3, r3, #16
 80089ae:	4313      	orrs	r3, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	3236      	adds	r2, #54	; 0x36
 80089b4:	3201      	adds	r2, #1
 80089b6:	7812      	ldrb	r2, [r2, #0]
 80089b8:	0212      	lsls	r2, r2, #8
 80089ba:	4313      	orrs	r3, r2
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	4a13      	ldr	r2, [pc, #76]	; (8008a18 <check_fs+0xd0>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d101      	bne.n	80089d2 <check_fs+0x8a>
		return 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e01c      	b.n	8008a0c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	3352      	adds	r3, #82	; 0x52
 80089d6:	3303      	adds	r3, #3
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	061a      	lsls	r2, r3, #24
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	3352      	adds	r3, #82	; 0x52
 80089e0:	3302      	adds	r3, #2
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	4313      	orrs	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	3252      	adds	r2, #82	; 0x52
 80089ec:	3201      	adds	r2, #1
 80089ee:	7812      	ldrb	r2, [r2, #0]
 80089f0:	0212      	lsls	r2, r2, #8
 80089f2:	4313      	orrs	r3, r2
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a00:	4a05      	ldr	r2, [pc, #20]	; (8008a18 <check_fs+0xd0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d101      	bne.n	8008a0a <check_fs+0xc2>
		return 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e000      	b.n	8008a0c <check_fs+0xc4>

	return 1;
 8008a0a:	2301      	movs	r3, #1
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	ffffaa55 	.word	0xffffaa55
 8008a18:	00544146 	.word	0x00544146

08008a1c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b096      	sub	sp, #88	; 0x58
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	4613      	mov	r3, r2
 8008a28:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008a30:	68b8      	ldr	r0, [r7, #8]
 8008a32:	f7ff ff45 	bl	80088c0 <get_ldnumber>
 8008a36:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	da01      	bge.n	8008a42 <find_volume+0x26>
 8008a3e:	230b      	movs	r3, #11
 8008a40:	e2aa      	b.n	8008f98 <find_volume+0x57c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008a42:	4a9e      	ldr	r2, [pc, #632]	; (8008cbc <find_volume+0x2a0>)
 8008a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d101      	bne.n	8008a56 <find_volume+0x3a>
 8008a52:	230c      	movs	r3, #12
 8008a54:	e2a0      	b.n	8008f98 <find_volume+0x57c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a5a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8008a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01b      	beq.n	8008a9e <find_volume+0x82>
		stat = disk_status(fs->drv);
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe f881 	bl	8006b74 <disk_status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008a78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a7c:	f003 0301 	and.w	r3, r3, #1
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10c      	bne.n	8008a9e <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <find_volume+0x7e>
 8008a8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a8e:	f003 0304 	and.w	r3, r3, #4
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8008a96:	230a      	movs	r3, #10
 8008a98:	e27e      	b.n	8008f98 <find_volume+0x57c>
			return FR_OK;				/* The file system object is valid */
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e27c      	b.n	8008f98 <find_volume+0x57c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe f876 	bl	8006ba8 <disk_initialize>
 8008abc:	4603      	mov	r3, r0
 8008abe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ac6:	f003 0301 	and.w	r3, r3, #1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e262      	b.n	8008f98 <find_volume+0x57c>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <find_volume+0xcc>
 8008ad8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8008ae4:	230a      	movs	r3, #10
 8008ae6:	e257      	b.n	8008f98 <find_volume+0x57c>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8008aec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008af0:	f7ff ff2a 	bl	8008948 <check_fs>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8008afa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d155      	bne.n	8008bae <find_volume+0x192>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008b02:	2300      	movs	r3, #0
 8008b04:	643b      	str	r3, [r7, #64]	; 0x40
 8008b06:	e029      	b.n	8008b5c <find_volume+0x140>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8008b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008b12:	4413      	add	r3, r2
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	3304      	adds	r3, #4
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d012      	beq.n	8008b46 <find_volume+0x12a>
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	330b      	adds	r3, #11
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	061a      	lsls	r2, r3, #24
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	330a      	adds	r3, #10
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	4313      	orrs	r3, r2
 8008b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b34:	3209      	adds	r2, #9
 8008b36:	7812      	ldrb	r2, [r2, #0]
 8008b38:	0212      	lsls	r2, r2, #8
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b3e:	3208      	adds	r2, #8
 8008b40:	7812      	ldrb	r2, [r2, #0]
 8008b42:	431a      	orrs	r2, r3
 8008b44:	e000      	b.n	8008b48 <find_volume+0x12c>
 8008b46:	2200      	movs	r2, #0
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008b50:	440b      	add	r3, r1
 8008b52:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b58:	3301      	adds	r3, #1
 8008b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d9d2      	bls.n	8008b08 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8008b62:	2300      	movs	r3, #0
 8008b64:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d002      	beq.n	8008b72 <find_volume+0x156>
 8008b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8008b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008b80:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8008b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d005      	beq.n	8008b94 <find_volume+0x178>
 8008b88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b8a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b8c:	f7ff fedc 	bl	8008948 <check_fs>
 8008b90:	4603      	mov	r3, r0
 8008b92:	e000      	b.n	8008b96 <find_volume+0x17a>
 8008b94:	2302      	movs	r3, #2
 8008b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <find_volume+0x192>
 8008ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8008ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d9e1      	bls.n	8008b72 <find_volume+0x156>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008bae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d101      	bne.n	8008bba <find_volume+0x19e>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e1ee      	b.n	8008f98 <find_volume+0x57c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008bba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <find_volume+0x1aa>
 8008bc2:	230d      	movs	r3, #13
 8008bc4:	e1e8      	b.n	8008f98 <find_volume+0x57c>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	7b1b      	ldrb	r3, [r3, #12]
 8008bca:	021b      	lsls	r3, r3, #8
 8008bcc:	b21a      	sxth	r2, r3
 8008bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd0:	7adb      	ldrb	r3, [r3, #11]
 8008bd2:	b21b      	sxth	r3, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b21b      	sxth	r3, r3
 8008bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bdc:	d001      	beq.n	8008be2 <find_volume+0x1c6>
		return FR_NO_FILESYSTEM;
 8008bde:	230d      	movs	r3, #13
 8008be0:	e1da      	b.n	8008f98 <find_volume+0x57c>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	7ddb      	ldrb	r3, [r3, #23]
 8008be6:	021b      	lsls	r3, r3, #8
 8008be8:	b21a      	sxth	r2, r3
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	7d9b      	ldrb	r3, [r3, #22]
 8008bee:	b21b      	sxth	r3, r3
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	b21b      	sxth	r3, r3
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8008bf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d112      	bne.n	8008c24 <find_volume+0x208>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8008c04:	061a      	lsls	r2, r3, #24
 8008c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c08:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c12:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8008c16:	0212      	lsls	r2, r2, #8
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c1c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8008c20:	4313      	orrs	r3, r2
 8008c22:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c28:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	7c1a      	ldrb	r2, [r3, #16]
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d006      	beq.n	8008c4e <find_volume+0x232>
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d001      	beq.n	8008c4e <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8008c4a:	230d      	movs	r3, #13
 8008c4c:	e1a4      	b.n	8008f98 <find_volume+0x57c>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8008c54:	461a      	mov	r2, r3
 8008c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c58:	fb02 f303 	mul.w	r3, r2, r3
 8008c5c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8008c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c60:	7b5a      	ldrb	r2, [r3, #13]
 8008c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c64:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <find_volume+0x26c>
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008c80:	3b01      	subs	r3, #1
 8008c82:	4013      	ands	r3, r2
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8008c88:	230d      	movs	r3, #13
 8008c8a:	e185      	b.n	8008f98 <find_volume+0x57c>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	7c9b      	ldrb	r3, [r3, #18]
 8008c90:	021b      	lsls	r3, r3, #8
 8008c92:	b21a      	sxth	r2, r3
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	7c5b      	ldrb	r3, [r3, #17]
 8008c98:	b21b      	sxth	r3, r3
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	b21b      	sxth	r3, r3
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca2:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca8:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008cac:	f003 030f 	and.w	r3, r3, #15
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d004      	beq.n	8008cc0 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8008cb6:	230d      	movs	r3, #13
 8008cb8:	e16e      	b.n	8008f98 <find_volume+0x57c>
 8008cba:	bf00      	nop
 8008cbc:	20000338 	.word	0x20000338

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
 8008cc4:	021b      	lsls	r3, r3, #8
 8008cc6:	b21a      	sxth	r2, r3
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cca:	7cdb      	ldrb	r3, [r3, #19]
 8008ccc:	b21b      	sxth	r3, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	b21b      	sxth	r3, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8008cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d112      	bne.n	8008d02 <find_volume+0x2e6>
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008ce2:	061a      	lsls	r2, r3, #24
 8008ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	4313      	orrs	r3, r2
 8008cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cf0:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8008cf4:	0212      	lsls	r2, r2, #8
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cfa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	7bdb      	ldrb	r3, [r3, #15]
 8008d06:	021b      	lsls	r3, r3, #8
 8008d08:	b21a      	sxth	r2, r3
 8008d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d0c:	7b9b      	ldrb	r3, [r3, #14]
 8008d0e:	b21b      	sxth	r3, r3
 8008d10:	4313      	orrs	r3, r2
 8008d12:	b21b      	sxth	r3, r3
 8008d14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8008d16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <find_volume+0x304>
 8008d1c:	230d      	movs	r3, #13
 8008d1e:	e13b      	b.n	8008f98 <find_volume+0x57c>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008d20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d24:	4413      	add	r3, r2
 8008d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d28:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8008d2c:	0912      	lsrs	r2, r2, #4
 8008d2e:	b292      	uxth	r2, r2
 8008d30:	4413      	add	r3, r2
 8008d32:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d201      	bcs.n	8008d40 <find_volume+0x324>
 8008d3c:	230d      	movs	r3, #13
 8008d3e:	e12b      	b.n	8008f98 <find_volume+0x57c>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d48:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8008d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <find_volume+0x340>
 8008d58:	230d      	movs	r3, #13
 8008d5a:	e11d      	b.n	8008f98 <find_volume+0x57c>
	fmt = FS_FAT12;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8008d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d64:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d902      	bls.n	8008d72 <find_volume+0x356>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d902      	bls.n	8008d82 <find_volume+0x366>
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	1c9a      	adds	r2, r3, #2
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8008d94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d98:	441a      	add	r2, r3
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8008da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da4:	441a      	add	r2, r3
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8008dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d121      	bne.n	8008df8 <find_volume+0x3dc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8008db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <find_volume+0x3a6>
 8008dbe:	230d      	movs	r3, #13
 8008dc0:	e0ea      	b.n	8008f98 <find_volume+0x57c>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008dc8:	061a      	lsls	r2, r3, #24
 8008dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dcc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8008dd0:	041b      	lsls	r3, r3, #16
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd6:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008dda:	0212      	lsls	r2, r2, #8
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008de0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8008de4:	431a      	orrs	r2, r3
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	647b      	str	r3, [r7, #68]	; 0x44
 8008df6:	e025      	b.n	8008e44 <find_volume+0x428>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <find_volume+0x3ea>
 8008e02:	230d      	movs	r3, #13
 8008e04:	e0c8      	b.n	8008f98 <find_volume+0x57c>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e08:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e0e:	441a      	add	r2, r3
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d104      	bne.n	8008e28 <find_volume+0x40c>
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e24:	005b      	lsls	r3, r3, #1
 8008e26:	e00c      	b.n	8008e42 <find_volume+0x426>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008e2e:	4613      	mov	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	085a      	lsrs	r2, r3, #1
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e3c:	f003 0301 	and.w	r3, r3, #1
 8008e40:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008e4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008e50:	0a5b      	lsrs	r3, r3, #9
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d201      	bcs.n	8008e5a <find_volume+0x43e>
		return FR_NO_FILESYSTEM;
 8008e56:	230d      	movs	r3, #13
 8008e58:	e09e      	b.n	8008f98 <find_volume+0x57c>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8008e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e72:	2280      	movs	r2, #128	; 0x80
 8008e74:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8008e78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d177      	bne.n	8008f70 <find_volume+0x554>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	b21a      	sxth	r2, r3
 8008e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e90:	b21b      	sxth	r3, r3
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d16a      	bne.n	8008f70 <find_volume+0x554>
		&& move_window(fs, bsect + 1) == FR_OK)
 8008e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ea2:	f7fe f976 	bl	8007192 <move_window>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d161      	bne.n	8008f70 <find_volume+0x554>
	{
		fs->fsi_flag = 0;
 8008eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008eba:	021b      	lsls	r3, r3, #8
 8008ebc:	b21a      	sxth	r2, r3
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec0:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8008ec4:	b21b      	sxth	r3, r3
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	b21b      	sxth	r3, r3
 8008eca:	4a35      	ldr	r2, [pc, #212]	; (8008fa0 <find_volume+0x584>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d14f      	bne.n	8008f70 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed2:	78db      	ldrb	r3, [r3, #3]
 8008ed4:	061a      	lsls	r2, r3, #24
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	789b      	ldrb	r3, [r3, #2]
 8008eda:	041b      	lsls	r3, r3, #16
 8008edc:	4313      	orrs	r3, r2
 8008ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee0:	7852      	ldrb	r2, [r2, #1]
 8008ee2:	0212      	lsls	r2, r2, #8
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ee8:	7812      	ldrb	r2, [r2, #0]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	4a2d      	ldr	r2, [pc, #180]	; (8008fa4 <find_volume+0x588>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d13e      	bne.n	8008f70 <find_volume+0x554>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008ef8:	061a      	lsls	r2, r3, #24
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efc:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008f00:	041b      	lsls	r3, r3, #16
 8008f02:	4313      	orrs	r3, r2
 8008f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f06:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008f0a:	0212      	lsls	r2, r2, #8
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f10:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8008f14:	4313      	orrs	r3, r2
 8008f16:	4a24      	ldr	r2, [pc, #144]	; (8008fa8 <find_volume+0x58c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d129      	bne.n	8008f70 <find_volume+0x554>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8008f22:	061a      	lsls	r2, r3, #24
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f30:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8008f34:	0212      	lsls	r2, r2, #8
 8008f36:	4313      	orrs	r3, r2
 8008f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f3a:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f48:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008f4c:	061a      	lsls	r2, r3, #24
 8008f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f50:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8008f54:	041b      	lsls	r3, r3, #16
 8008f56:	4313      	orrs	r3, r2
 8008f58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f5a:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8008f5e:	0212      	lsls	r2, r2, #8
 8008f60:	4313      	orrs	r3, r2
 8008f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f64:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8008f68:	431a      	orrs	r2, r3
 8008f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8008f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f72:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008f76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8008f7a:	4b0c      	ldr	r3, [pc, #48]	; (8008fac <find_volume+0x590>)
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	4b0a      	ldr	r3, [pc, #40]	; (8008fac <find_volume+0x590>)
 8008f84:	801a      	strh	r2, [r3, #0]
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <find_volume+0x590>)
 8008f88:	881a      	ldrh	r2, [r3, #0]
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8008f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f92:	f7fe f88d 	bl	80070b0 <clear_lock>
#endif

	return FR_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3758      	adds	r7, #88	; 0x58
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	ffffaa55 	.word	0xffffaa55
 8008fa4:	41615252 	.word	0x41615252
 8008fa8:	61417272 	.word	0x61417272
 8008fac:	2000033c 	.word	0x2000033c

08008fb0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d022      	beq.n	8009008 <validate+0x58>
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d01d      	beq.n	8009008 <validate+0x58>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fd2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <validate+0x58>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fe0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d10c      	bne.n	8009008 <validate+0x58>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008ff4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd fdbb 	bl	8006b74 <disk_status>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8009008:	2309      	movs	r3, #9
 800900a:	e000      	b.n	800900e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b088      	sub	sp, #32
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800902a:	f107 0310 	add.w	r3, r7, #16
 800902e:	4618      	mov	r0, r3
 8009030:	f7ff fc46 	bl	80088c0 <get_ldnumber>
 8009034:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	2b00      	cmp	r3, #0
 800903a:	da01      	bge.n	8009040 <f_mount+0x28>
 800903c:	230b      	movs	r3, #11
 800903e:	e02d      	b.n	800909c <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009040:	4a18      	ldr	r2, [pc, #96]	; (80090a4 <f_mount+0x8c>)
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009048:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8009050:	69b8      	ldr	r0, [r7, #24]
 8009052:	f7fe f82d 	bl	80070b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d003      	beq.n	800906c <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	490d      	ldr	r1, [pc, #52]	; (80090a4 <f_mount+0x8c>)
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d002      	beq.n	8009082 <f_mount+0x6a>
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d001      	beq.n	8009086 <f_mount+0x6e>
 8009082:	2300      	movs	r3, #0
 8009084:	e00a      	b.n	800909c <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8009086:	f107 0108 	add.w	r1, r7, #8
 800908a:	f107 030c 	add.w	r3, r7, #12
 800908e:	2200      	movs	r2, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff fcc3 	bl	8008a1c <find_volume>
 8009096:	4603      	mov	r3, r0
 8009098:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800909a:	7dfb      	ldrb	r3, [r7, #23]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20000338 	.word	0x20000338

080090a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	f107 030c 	add.w	r3, r7, #12
 80090b4:	6018      	str	r0, [r3, #0]
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	6019      	str	r1, [r3, #0]
 80090bc:	1dfb      	adds	r3, r7, #7
 80090be:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80090c0:	f107 030c 	add.w	r3, r7, #12
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <f_open+0x26>
 80090ca:	2309      	movs	r3, #9
 80090cc:	e1f9      	b.n	80094c2 <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 80090ce:	f107 030c 	add.w	r3, r7, #12
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80090da:	1dfb      	adds	r3, r7, #7
 80090dc:	1dfa      	adds	r2, r7, #7
 80090de:	7812      	ldrb	r2, [r2, #0]
 80090e0:	f002 021f 	and.w	r2, r2, #31
 80090e4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80090e6:	1dfb      	adds	r3, r7, #7
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f023 0301 	bic.w	r3, r3, #1
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	f107 0108 	add.w	r1, r7, #8
 80090f4:	f107 0320 	add.w	r3, r7, #32
 80090f8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fc8d 	bl	8008a1c <find_volume>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8009108:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 81d6 	bne.w	80094be <f_open+0x416>
		INIT_BUF(dj);
 8009112:	f107 0320 	add.w	r3, r7, #32
 8009116:	f107 0214 	add.w	r2, r7, #20
 800911a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
 800911e:	f107 0320 	add.w	r3, r7, #32
 8009122:	4a8b      	ldr	r2, [pc, #556]	; (8009350 <f_open+0x2a8>)
 8009124:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		res = follow_path(&dj, path);	/* Follow the file path */
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	f107 0320 	add.w	r3, r7, #32
 8009132:	4611      	mov	r1, r2
 8009134:	4618      	mov	r0, r3
 8009136:	f7ff fb55 	bl	80087e4 <follow_path>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
		dir = dj.dir;
 8009140:	f107 0320 	add.w	r3, r7, #32
 8009144:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009148:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800914c:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8009150:	2b00      	cmp	r3, #0
 8009152:	d11a      	bne.n	800918a <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 8009154:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <f_open+0xbc>
				res = FR_INVALID_NAME;
 800915c:	2306      	movs	r3, #6
 800915e:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 8009162:	e012      	b.n	800918a <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009164:	1dfb      	adds	r3, r7, #7
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	461a      	mov	r2, r3
 8009178:	f107 0320 	add.w	r3, r7, #32
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd fe0c 	bl	8006d9c <chk_lock>
 8009184:	4603      	mov	r3, r0
 8009186:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800918a:	1dfb      	adds	r3, r7, #7
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 031c 	and.w	r3, r3, #28
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 80cc 	beq.w	8009330 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 8009198:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800919c:	2b00      	cmp	r3, #0
 800919e:	d01f      	beq.n	80091e0 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80091a0:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d10e      	bne.n	80091c6 <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80091a8:	f7fd fe64 	bl	8006e74 <enq_lock>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d006      	beq.n	80091c0 <f_open+0x118>
 80091b2:	f107 0320 	add.w	r3, r7, #32
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7ff f84e 	bl	8008258 <dir_register>
 80091bc:	4603      	mov	r3, r0
 80091be:	e000      	b.n	80091c2 <f_open+0x11a>
 80091c0:	2312      	movs	r3, #18
 80091c2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80091c6:	1dfb      	adds	r3, r7, #7
 80091c8:	1dfa      	adds	r2, r7, #7
 80091ca:	7812      	ldrb	r2, [r2, #0]
 80091cc:	f042 0208 	orr.w	r2, r2, #8
 80091d0:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 80091d2:	f107 0320 	add.w	r3, r7, #32
 80091d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091da:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 80091de:	e014      	b.n	800920a <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80091e0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80091e4:	330b      	adds	r3, #11
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	f003 0311 	and.w	r3, r3, #17
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <f_open+0x150>
					res = FR_DENIED;
 80091f0:	2307      	movs	r3, #7
 80091f2:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 80091f6:	e008      	b.n	800920a <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80091f8:	1dfb      	adds	r3, r7, #7
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d002      	beq.n	800920a <f_open+0x162>
						res = FR_EXIST;
 8009204:	2308      	movs	r3, #8
 8009206:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800920a:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800920e:	2b00      	cmp	r3, #0
 8009210:	f040 80b1 	bne.w	8009376 <f_open+0x2ce>
 8009214:	1dfb      	adds	r3, r7, #7
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b00      	cmp	r3, #0
 800921e:	f000 80aa 	beq.w	8009376 <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 8009222:	f7fd fc4b 	bl	8006abc <get_fattime>
 8009226:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800922a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800922e:	330e      	adds	r3, #14
 8009230:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800923c:	b29b      	uxth	r3, r3
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b29a      	uxth	r2, r3
 8009242:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009246:	330f      	adds	r3, #15
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
 800924c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009250:	0c1a      	lsrs	r2, r3, #16
 8009252:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009256:	3310      	adds	r3, #16
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8009260:	0e1a      	lsrs	r2, r3, #24
 8009262:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009266:	3311      	adds	r3, #17
 8009268:	b2d2      	uxtb	r2, r2
 800926a:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800926c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009270:	330b      	adds	r3, #11
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8009276:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800927a:	331c      	adds	r3, #28
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
 8009280:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009284:	331d      	adds	r3, #29
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800928e:	331e      	adds	r3, #30
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
 8009294:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009298:	331f      	adds	r3, #31
 800929a:	2200      	movs	r2, #0
 800929c:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800929e:	f107 0320 	add.w	r3, r7, #32
 80092a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092a6:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe fd2f 	bl	8007d0e <ld_clust>
 80092b0:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
				st_clust(dir, 0);				/* cluster = 0 */
 80092b4:	2100      	movs	r1, #0
 80092b6:	f8d7 0250 	ldr.w	r0, [r7, #592]	; 0x250
 80092ba:	f7fe fd55 	bl	8007d68 <st_clust>
				dj.fs->wflag = 1;
 80092be:	f107 0320 	add.w	r3, r7, #32
 80092c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80092cc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d050      	beq.n	8009376 <f_open+0x2ce>
					dw = dj.fs->winsect;
 80092d4:	f107 0320 	add.w	r3, r7, #32
 80092d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092dc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80092e0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
					res = remove_chain(dj.fs, cl);
 80092e4:	f107 0320 	add.w	r3, r7, #32
 80092e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092ec:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fa0c 	bl	800770e <remove_chain>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
					if (res == FR_OK) {
 80092fc:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8009300:	2b00      	cmp	r3, #0
 8009302:	d138      	bne.n	8009376 <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8009304:	f107 0320 	add.w	r3, r7, #32
 8009308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800930c:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8009310:	3a01      	subs	r2, #1
 8009312:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 8009316:	f107 0320 	add.w	r3, r7, #32
 800931a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800931e:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8009322:	4618      	mov	r0, r3
 8009324:	f7fd ff35 	bl	8007192 <move_window>
 8009328:	4603      	mov	r3, r0
 800932a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800932e:	e022      	b.n	8009376 <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8009330:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 8009334:	2b00      	cmp	r3, #0
 8009336:	d11e      	bne.n	8009376 <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8009338:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800933c:	330b      	adds	r3, #11
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	f003 0310 	and.w	r3, r3, #16
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <f_open+0x2ac>
					res = FR_NO_FILE;
 8009348:	2304      	movs	r3, #4
 800934a:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
 800934e:	e012      	b.n	8009376 <f_open+0x2ce>
 8009350:	20000358 	.word	0x20000358
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8009354:	1dfb      	adds	r3, r7, #7
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <f_open+0x2ce>
 8009360:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009364:	330b      	adds	r3, #11
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 0301 	and.w	r3, r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <f_open+0x2ce>
						res = FR_DENIED;
 8009370:	2307      	movs	r3, #7
 8009372:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
				}
			}
		}
		if (res == FR_OK) {
 8009376:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 800937a:	2b00      	cmp	r3, #0
 800937c:	d13d      	bne.n	80093fa <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800937e:	1dfb      	adds	r3, r7, #7
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	f003 0308 	and.w	r3, r3, #8
 8009386:	2b00      	cmp	r3, #0
 8009388:	d005      	beq.n	8009396 <f_open+0x2ee>
				mode |= FA__WRITTEN;
 800938a:	1dfb      	adds	r3, r7, #7
 800938c:	1dfa      	adds	r2, r7, #7
 800938e:	7812      	ldrb	r2, [r2, #0]
 8009390:	f042 0220 	orr.w	r2, r2, #32
 8009394:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8009396:	f107 0320 	add.w	r3, r7, #32
 800939a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800939e:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 80093a2:	f107 030c 	add.w	r3, r7, #12
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 80093ac:	f107 030c 	add.w	r3, r7, #12
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80093b6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093ba:	1dfb      	adds	r3, r7, #7
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	f023 0301 	bic.w	r3, r3, #1
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	bf14      	ite	ne
 80093c6:	2301      	movne	r3, #1
 80093c8:	2300      	moveq	r3, #0
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	f107 0320 	add.w	r3, r7, #32
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd fd71 	bl	8006ebc <inc_lock>
 80093da:	4602      	mov	r2, r0
 80093dc:	f107 030c 	add.w	r3, r7, #12
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80093e6:	f107 030c 	add.w	r3, r7, #12
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <f_open+0x352>
 80093f4:	2302      	movs	r3, #2
 80093f6:	f887 3257 	strb.w	r3, [r7, #599]	; 0x257
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80093fa:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d15d      	bne.n	80094be <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 8009402:	f107 030c 	add.w	r3, r7, #12
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	1dfa      	adds	r2, r7, #7
 800940a:	7812      	ldrb	r2, [r2, #0]
 800940c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 8009410:	f107 030c 	add.w	r3, r7, #12
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800941c:	f107 0320 	add.w	r3, r7, #32
 8009420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009424:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fc70 	bl	8007d0e <ld_clust>
 800942e:	4602      	mov	r2, r0
 8009430:	f107 030c 	add.w	r3, r7, #12
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800943a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800943e:	331f      	adds	r3, #31
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	061a      	lsls	r2, r3, #24
 8009444:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8009448:	331e      	adds	r3, #30
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	041b      	lsls	r3, r3, #16
 800944e:	4313      	orrs	r3, r2
 8009450:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8009454:	321d      	adds	r2, #29
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	0212      	lsls	r2, r2, #8
 800945a:	4313      	orrs	r3, r2
 800945c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8009460:	321c      	adds	r2, #28
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	431a      	orrs	r2, r3
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 8009470:	f107 030c 	add.w	r3, r7, #12
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800947c:	f107 030c 	add.w	r3, r7, #12
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8009488:	f107 030c 	add.w	r3, r7, #12
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2200      	movs	r2, #0
 8009490:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8009494:	f107 0320 	add.w	r3, r7, #32
 8009498:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800949c:	f107 030c 	add.w	r3, r7, #12
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 80094a6:	f107 030c 	add.w	r3, r7, #12
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80094b0:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80094be:	f897 3257 	ldrb.w	r3, [r7, #599]	; 0x257
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	f507 7716 	add.w	r7, r7, #600	; 0x258
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b08a      	sub	sp, #40	; 0x28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
 80094d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff fd63 	bl	8008fb0 <validate>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80094ee:	7dfb      	ldrb	r3, [r7, #23]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <f_write+0x2c>
 80094f4:	7dfb      	ldrb	r3, [r7, #23]
 80094f6:	e192      	b.n	800981e <f_write+0x352>
	if (fp->err)							/* Check error */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8009508:	e189      	b.n	800981e <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 8009518:	2307      	movs	r3, #7
 800951a:	e180      	b.n	800981e <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	441a      	add	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800952c:	429a      	cmp	r2, r3
 800952e:	f080 8158 	bcs.w	80097e2 <f_write+0x316>
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8009536:	e154      	b.n	80097e2 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800953e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009542:	2b00      	cmp	r3, #0
 8009544:	f040 8114 	bne.w	8009770 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800954e:	0a5b      	lsrs	r3, r3, #9
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009558:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800955c:	3b01      	subs	r3, #1
 800955e:	b2db      	uxtb	r3, r3
 8009560:	4013      	ands	r3, r2
 8009562:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8009564:	7dbb      	ldrb	r3, [r7, #22]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d151      	bne.n	800960e <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10f      	bne.n	8009594 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	2b00      	cmp	r3, #0
 8009580:	d121      	bne.n	80095c6 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe f919 	bl	80077c2 <create_chain>
 8009590:	6278      	str	r0, [r7, #36]	; 0x24
 8009592:	e018      	b.n	80095c6 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800959a:	2b00      	cmp	r3, #0
 800959c:	d008      	beq.n	80095b0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80095a4:	4619      	mov	r1, r3
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f7fe f9a8 	bl	80078fc <clmt_clust>
 80095ac:	6278      	str	r0, [r7, #36]	; 0x24
 80095ae:	e00a      	b.n	80095c6 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095bc:	4619      	mov	r1, r3
 80095be:	4610      	mov	r0, r2
 80095c0:	f7fe f8ff 	bl	80077c2 <create_chain>
 80095c4:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 810f 	beq.w	80097ec <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d105      	bne.n	80095e0 <f_write+0x114>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2202      	movs	r2, #2
 80095d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80095dc:	2302      	movs	r3, #2
 80095de:	e11e      	b.n	800981e <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e6:	d105      	bne.n	80095f4 <f_write+0x128>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80095f0:	2301      	movs	r3, #1
 80095f2:	e114      	b.n	800981e <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009602:	2b00      	cmp	r3, #0
 8009604:	d103      	bne.n	800960e <f_write+0x142>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d01d      	beq.n	8009658 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009622:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800962e:	2301      	movs	r3, #1
 8009630:	f7fd fb00 	bl	8006c34 <disk_write>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009642:	2301      	movs	r3, #1
 8009644:	e0eb      	b.n	800981e <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800964c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009650:	b2da      	uxtb	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7fd fe6e 	bl	8007348 <clust2sect>
 800966c:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d105      	bne.n	8009680 <f_write+0x1b4>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800967c:	2302      	movs	r3, #2
 800967e:	e0ce      	b.n	800981e <f_write+0x352>
			sect += csect;
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4413      	add	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	0a5b      	lsrs	r3, r3, #9
 800968c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d048      	beq.n	8009726 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009694:	7dba      	ldrb	r2, [r7, #22]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80096a0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d908      	bls.n	80096ba <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096ae:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 80096b2:	461a      	mov	r2, r3
 80096b4:	7dbb      	ldrb	r3, [r7, #22]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096c0:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	69b9      	ldr	r1, [r7, #24]
 80096ca:	f7fd fab3 	bl	8006c34 <disk_write>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 80096dc:	2301      	movs	r3, #1
 80096de:	e09e      	b.n	800981e <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d916      	bls.n	800971e <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	025b      	lsls	r3, r3, #9
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	4413      	add	r3, r2
 8009702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009706:	4619      	mov	r1, r3
 8009708:	f7fd fad2 	bl	8006cb0 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	025b      	lsls	r3, r3, #9
 8009722:	623b      	str	r3, [r7, #32]
				continue;
 8009724:	e047      	b.n	80097b6 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d01a      	beq.n	8009768 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800973e:	429a      	cmp	r2, r3
 8009740:	d212      	bcs.n	8009768 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009748:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800974c:	68f9      	ldr	r1, [r7, #12]
 800974e:	2301      	movs	r3, #1
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	f7fd fa4f 	bl	8006bf4 <disk_read>
 8009756:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 8009764:	2301      	movs	r3, #1
 8009766:	e05a      	b.n	800981e <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800977e:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8009780:	6a3a      	ldr	r2, [r7, #32]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	429a      	cmp	r2, r3
 8009786:	d901      	bls.n	800978c <f_write+0x2c0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4413      	add	r3, r2
 800979a:	6a3a      	ldr	r2, [r7, #32]
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fd fa86 	bl	8006cb0 <mem_cpy>
		fp->flag |= FA__DIRTY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 80097aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	4413      	add	r3, r2
 80097bc:	61bb      	str	r3, [r7, #24]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	441a      	add	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	441a      	add	r2, r3
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	1ad3      	subs	r3, r2, r3
 80097e0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f47f aea7 	bne.w	8009538 <f_write+0x6c>
 80097ea:	e000      	b.n	80097ee <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097ec:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d905      	bls.n	800980a <f_write+0x33e>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009810:	f043 0320 	orr.w	r3, r3, #32
 8009814:	b2da      	uxtb	r2, r3
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b086      	sub	sp, #24
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f7ff fbbe 	bl	8008fb0 <validate>
 8009834:	4603      	mov	r3, r0
 8009836:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009838:	7dfb      	ldrb	r3, [r7, #23]
 800983a:	2b00      	cmp	r3, #0
 800983c:	f040 80a8 	bne.w	8009990 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b00      	cmp	r3, #0
 800984c:	f000 80a0 	beq.w	8009990 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d019      	beq.n	8009892 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009864:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009868:	6879      	ldr	r1, [r7, #4]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009870:	2301      	movs	r3, #1
 8009872:	f7fd f9df 	bl	8006c34 <disk_write>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d001      	beq.n	8009880 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800987c:	2301      	movs	r3, #1
 800987e:	e088      	b.n	8009992 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800988a:	b2da      	uxtb	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f7fd fc76 	bl	8007192 <move_window>
 80098a6:	4603      	mov	r3, r0
 80098a8:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d16f      	bne.n	8009990 <f_sync+0x16a>
				dir = fp->dir_ptr;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80098b6:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	330b      	adds	r3, #11
 80098bc:	781a      	ldrb	r2, [r3, #0]
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	330b      	adds	r3, #11
 80098c2:	f042 0220 	orr.w	r2, r2, #32
 80098c6:	b2d2      	uxtb	r2, r2
 80098c8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	331c      	adds	r3, #28
 80098d4:	b2d2      	uxtb	r2, r2
 80098d6:	701a      	strb	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80098de:	b29b      	uxth	r3, r3
 80098e0:	0a1b      	lsrs	r3, r3, #8
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	331d      	adds	r3, #29
 80098e8:	b2d2      	uxtb	r2, r2
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80098f2:	0c1a      	lsrs	r2, r3, #16
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	331e      	adds	r3, #30
 80098f8:	b2d2      	uxtb	r2, r2
 80098fa:	701a      	strb	r2, [r3, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009902:	0e1a      	lsrs	r2, r3, #24
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	331f      	adds	r3, #31
 8009908:	b2d2      	uxtb	r2, r2
 800990a:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009912:	4619      	mov	r1, r3
 8009914:	6938      	ldr	r0, [r7, #16]
 8009916:	f7fe fa27 	bl	8007d68 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800991a:	f7fd f8cf 	bl	8006abc <get_fattime>
 800991e:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	3316      	adds	r3, #22
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	b2d2      	uxtb	r2, r2
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	b29b      	uxth	r3, r3
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	b29a      	uxth	r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	3317      	adds	r3, #23
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	0c1a      	lsrs	r2, r3, #16
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	3318      	adds	r3, #24
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	0e1a      	lsrs	r2, r3, #24
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3319      	adds	r3, #25
 800994e:	b2d2      	uxtb	r2, r2
 8009950:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	3312      	adds	r3, #18
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	3313      	adds	r3, #19
 800995e:	2200      	movs	r2, #0
 8009960:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 8009968:	f023 0320 	bic.w	r3, r3, #32
 800996c:	b2da      	uxtb	r2, r3
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009986:	4618      	mov	r0, r3
 8009988:	f7fd fc31 	bl	80071ee <sync_fs>
 800998c:	4603      	mov	r3, r0
 800998e:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009990:	7dfb      	ldrb	r3, [r7, #23]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3718      	adds	r7, #24
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b084      	sub	sp, #16
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff ff3f 	bl	8009826 <f_sync>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d116      	bne.n	80099e0 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff fafc 	bl	8008fb0 <validate>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10e      	bne.n	80099e0 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fd fb2d 	bl	8007028 <dec_lock>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b08e      	sub	sp, #56	; 0x38
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	60f8      	str	r0, [r7, #12]
 80099f2:	60b9      	str	r1, [r7, #8]
 80099f4:	607a      	str	r2, [r7, #4]
	UINT i;
	BYTE fat, *p;


	/* Get logical drive number */
	res = find_volume(fatfs, &path, 0);
 80099f6:	f107 030c 	add.w	r3, r7, #12
 80099fa:	2200      	movs	r2, #0
 80099fc:	4619      	mov	r1, r3
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff f80c 	bl	8008a1c <find_volume>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	fs = *fatfs;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	61fb      	str	r3, [r7, #28]
	if (res == FR_OK) {
 8009a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 80af 	bne.w	8009b78 <f_getfree+0x18e>
		/* If free_clust is valid, return it without full cluster scan */
		if (fs->free_clust <= fs->n_fatent - 2) {
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a26:	3b02      	subs	r3, #2
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d805      	bhi.n	8009a38 <f_getfree+0x4e>
			*nclst = fs->free_clust;
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	601a      	str	r2, [r3, #0]
 8009a36:	e09f      	b.n	8009b78 <f_getfree+0x18e>
		} else {
			/* Get number of free clusters */
			fat = fs->fs_type;
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a3e:	76fb      	strb	r3, [r7, #27]
			n = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	633b      	str	r3, [r7, #48]	; 0x30
			if (fat == FS_FAT12) {
 8009a44:	7efb      	ldrb	r3, [r7, #27]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d125      	bne.n	8009a96 <f_getfree+0xac>
				clst = 2;
 8009a4a:	2302      	movs	r3, #2
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
				do {
					stat = get_fat(fs, clst);
 8009a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a50:	69f8      	ldr	r0, [r7, #28]
 8009a52:	f7fd fc9a 	bl	800738a <get_fat>
 8009a56:	6178      	str	r0, [r7, #20]
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a5e:	d103      	bne.n	8009a68 <f_getfree+0x7e>
 8009a60:	2301      	movs	r3, #1
 8009a62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a66:	e077      	b.n	8009b58 <f_getfree+0x16e>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d103      	bne.n	8009a76 <f_getfree+0x8c>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009a74:	e070      	b.n	8009b58 <f_getfree+0x16e>
					if (stat == 0) n++;
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d102      	bne.n	8009a82 <f_getfree+0x98>
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	3301      	adds	r3, #1
 8009a80:	633b      	str	r3, [r7, #48]	; 0x30
				} while (++clst < fs->n_fatent);
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	3301      	adds	r3, #1
 8009a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d3dc      	bcc.n	8009a4e <f_getfree+0x64>
 8009a94:	e060      	b.n	8009b58 <f_getfree+0x16e>
			} else {
				clst = fs->n_fatent;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
				sect = fs->fatbase;
 8009a9e:	69fb      	ldr	r3, [r7, #28]
 8009aa0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009aa4:	62bb      	str	r3, [r7, #40]	; 0x28
				i = 0; p = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8009aaa:	2300      	movs	r3, #0
 8009aac:	623b      	str	r3, [r7, #32]
				do {
					if (!i) {
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d112      	bne.n	8009ada <f_getfree+0xf0>
						res = move_window(fs, sect++);
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	62ba      	str	r2, [r7, #40]	; 0x28
 8009aba:	4619      	mov	r1, r3
 8009abc:	69f8      	ldr	r0, [r7, #28]
 8009abe:	f7fd fb68 	bl	8007192 <move_window>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						if (res != FR_OK) break;
 8009ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d142      	bne.n	8009b56 <f_getfree+0x16c>
						p = fs->win.d8;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	623b      	str	r3, [r7, #32]
						i = SS(fs);
 8009ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ad8:	627b      	str	r3, [r7, #36]	; 0x24
					}
					if (fat == FS_FAT16) {
 8009ada:	7efb      	ldrb	r3, [r7, #27]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d115      	bne.n	8009b0c <f_getfree+0x122>
						if (LD_WORD(p) == 0) n++;
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	b21a      	sxth	r2, r3
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b21b      	sxth	r3, r3
 8009af0:	4313      	orrs	r3, r2
 8009af2:	b21b      	sxth	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <f_getfree+0x114>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	3301      	adds	r3, #1
 8009afc:	633b      	str	r3, [r7, #48]	; 0x30
						p += 2; i -= 2;
 8009afe:	6a3b      	ldr	r3, [r7, #32]
 8009b00:	3302      	adds	r3, #2
 8009b02:	623b      	str	r3, [r7, #32]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	3b02      	subs	r3, #2
 8009b08:	627b      	str	r3, [r7, #36]	; 0x24
 8009b0a:	e01d      	b.n	8009b48 <f_getfree+0x15e>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	3303      	adds	r3, #3
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	061a      	lsls	r2, r3, #24
 8009b14:	6a3b      	ldr	r3, [r7, #32]
 8009b16:	3302      	adds	r3, #2
 8009b18:	781b      	ldrb	r3, [r3, #0]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	6a3a      	ldr	r2, [r7, #32]
 8009b20:	3201      	adds	r2, #1
 8009b22:	7812      	ldrb	r2, [r2, #0]
 8009b24:	0212      	lsls	r2, r2, #8
 8009b26:	4313      	orrs	r3, r2
 8009b28:	6a3a      	ldr	r2, [r7, #32]
 8009b2a:	7812      	ldrb	r2, [r2, #0]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d102      	bne.n	8009b3c <f_getfree+0x152>
 8009b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b38:	3301      	adds	r3, #1
 8009b3a:	633b      	str	r3, [r7, #48]	; 0x30
						p += 4; i -= 4;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	3304      	adds	r3, #4
 8009b40:	623b      	str	r3, [r7, #32]
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	3b04      	subs	r3, #4
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
					}
				} while (--clst);
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ac      	bne.n	8009aae <f_getfree+0xc4>
 8009b54:	e000      	b.n	8009b58 <f_getfree+0x16e>
						if (res != FR_OK) break;
 8009b56:	bf00      	nop
			}
			fs->free_clust = n;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b5c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009b66:	f043 0301 	orr.w	r3, r3, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
			*nclst = n;
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b76:	601a      	str	r2, [r3, #0]
		}
	}
	LEAVE_FF(fs, res);
 8009b78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3738      	adds	r7, #56	; 0x38
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009b90:	78fb      	ldrb	r3, [r7, #3]
 8009b92:	2b0a      	cmp	r3, #10
 8009b94:	d103      	bne.n	8009b9e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009b96:	210d      	movs	r1, #13
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f7ff fff3 	bl	8009b84 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	db25      	blt.n	8009bf6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1c5a      	adds	r2, r3, #1
 8009bae:	60fa      	str	r2, [r7, #12]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	78fa      	ldrb	r2, [r7, #3]
 8009bb6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b3c      	cmp	r3, #60	; 0x3c
 8009bbc:	dd12      	ble.n	8009be4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6818      	ldr	r0, [r3, #0]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f103 010c 	add.w	r1, r3, #12
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	f7ff fc7d 	bl	80094cc <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d101      	bne.n	8009bde <putc_bfd+0x5a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e001      	b.n	8009be2 <putc_bfd+0x5e>
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295
 8009be2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	609a      	str	r2, [r3, #8]
 8009bf4:	e000      	b.n	8009bf8 <putc_bfd+0x74>
	if (i < 0) return;
 8009bf6:	bf00      	nop
}
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009bfe:	b590      	push	{r4, r7, lr}
 8009c00:	b097      	sub	sp, #92	; 0x5c
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009c14:	e009      	b.n	8009c2a <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	f107 030c 	add.w	r3, r7, #12
 8009c22:	4611      	mov	r1, r2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff ffad 	bl	8009b84 <putc_bfd>
	while (*str)			/* Put the string */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1f1      	bne.n	8009c16 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	db16      	blt.n	8009c66 <f_puts+0x68>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	461c      	mov	r4, r3
 8009c3e:	f107 0208 	add.w	r2, r7, #8
 8009c42:	f107 030c 	add.w	r3, r7, #12
 8009c46:	f103 010c 	add.w	r1, r3, #12
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	f7ff fc3d 	bl	80094cc <f_write>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <f_puts+0x68>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d101      	bne.n	8009c66 <f_puts+0x68>
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	e001      	b.n	8009c6a <f_puts+0x6c>
	return EOF;
 8009c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	375c      	adds	r7, #92	; 0x5c
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd90      	pop	{r4, r7, pc}
	...

08009c74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c82:	2301      	movs	r3, #1
 8009c84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009c8a:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c8c:	7a5b      	ldrb	r3, [r3, #9]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d831      	bhi.n	8009cf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c94:	4b1b      	ldr	r3, [pc, #108]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c96:	7a5b      	ldrb	r3, [r3, #9]
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009ca2:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009ca4:	7a5b      	ldrb	r3, [r3, #9]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cbc:	4413      	add	r3, r2
 8009cbe:	79fa      	ldrb	r2, [r7, #7]
 8009cc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cc4:	7a5b      	ldrb	r3, [r3, #9]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	b2d1      	uxtb	r1, r2
 8009ccc:	4a0d      	ldr	r2, [pc, #52]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cce:	7251      	strb	r1, [r2, #9]
 8009cd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cd2:	7dbb      	ldrb	r3, [r7, #22]
 8009cd4:	3330      	adds	r3, #48	; 0x30
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	223a      	movs	r2, #58	; 0x3a
 8009ce2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	222f      	movs	r2, #47	; 0x2f
 8009cea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3303      	adds	r3, #3
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc80      	pop	{r7}
 8009d02:	4770      	bx	lr
 8009d04:	20000558 	.word	0x20000558

08009d08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d12:	2200      	movs	r2, #0
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ffac 	bl	8009c74 <FATFS_LinkDriverEx>
 8009d1c:	4603      	mov	r3, r0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	2b7f      	cmp	r3, #127	; 0x7f
 8009d38:	d802      	bhi.n	8009d40 <ff_convert+0x18>
		c = chr;
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	81fb      	strh	r3, [r7, #14]
 8009d3e:	e025      	b.n	8009d8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	2bff      	cmp	r3, #255	; 0xff
 8009d4a:	d805      	bhi.n	8009d58 <ff_convert+0x30>
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	3b80      	subs	r3, #128	; 0x80
 8009d50:	4a11      	ldr	r2, [pc, #68]	; (8009d98 <ff_convert+0x70>)
 8009d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d56:	e000      	b.n	8009d5a <ff_convert+0x32>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	81fb      	strh	r3, [r7, #14]
 8009d5c:	e016      	b.n	8009d8c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009d5e:	2300      	movs	r3, #0
 8009d60:	81fb      	strh	r3, [r7, #14]
 8009d62:	e009      	b.n	8009d78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <ff_convert+0x70>)
 8009d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6c:	88fa      	ldrh	r2, [r7, #6]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d006      	beq.n	8009d80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009d72:	89fb      	ldrh	r3, [r7, #14]
 8009d74:	3301      	adds	r3, #1
 8009d76:	81fb      	strh	r3, [r7, #14]
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7c:	d9f2      	bls.n	8009d64 <ff_convert+0x3c>
 8009d7e:	e000      	b.n	8009d82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009d80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009d82:	89fb      	ldrh	r3, [r7, #14]
 8009d84:	3380      	adds	r3, #128	; 0x80
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	0800d168 	.word	0x0800d168

08009d9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e002      	b.n	8009db2 <ff_wtoupper+0x16>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	4a0f      	ldr	r2, [pc, #60]	; (8009df0 <ff_wtoupper+0x54>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <ff_wtoupper+0x30>
 8009dbe:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <ff_wtoupper+0x54>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dc6:	88fa      	ldrh	r2, [r7, #6]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d1ef      	bne.n	8009dac <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009dcc:	4a08      	ldr	r2, [pc, #32]	; (8009df0 <ff_wtoupper+0x54>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <ff_wtoupper+0x46>
 8009dd8:	4a06      	ldr	r2, [pc, #24]	; (8009df4 <ff_wtoupper+0x58>)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009de0:	e000      	b.n	8009de4 <ff_wtoupper+0x48>
 8009de2:	88fb      	ldrh	r3, [r7, #6]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	0800d268 	.word	0x0800d268
 8009df4:	0800d448 	.word	0x0800d448

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	2000003c 	.word	0x2000003c

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	2500      	movs	r5, #0
 8009e08:	4e0c      	ldr	r6, [pc, #48]	; (8009e3c <__libc_init_array+0x38>)
 8009e0a:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0c:	1ba4      	subs	r4, r4, r6
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	42a5      	cmp	r5, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	f003 f888 	bl	800cf28 <_init>
 8009e18:	2500      	movs	r5, #0
 8009e1a:	4e0a      	ldr	r6, [pc, #40]	; (8009e44 <__libc_init_array+0x40>)
 8009e1c:	4c0a      	ldr	r4, [pc, #40]	; (8009e48 <__libc_init_array+0x44>)
 8009e1e:	1ba4      	subs	r4, r4, r6
 8009e20:	10a4      	asrs	r4, r4, #2
 8009e22:	42a5      	cmp	r5, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e2c:	4798      	blx	r3
 8009e2e:	3501      	adds	r5, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009e36:	4798      	blx	r3
 8009e38:	3501      	adds	r5, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800d8d0 	.word	0x0800d8d0
 8009e40:	0800d8d0 	.word	0x0800d8d0
 8009e44:	0800d8d0 	.word	0x0800d8d0
 8009e48:	0800d8d4 	.word	0x0800d8d4

08009e4c <memset>:
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4402      	add	r2, r0
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memset+0xa>
 8009e54:	4770      	bx	lr
 8009e56:	f803 1b01 	strb.w	r1, [r3], #1
 8009e5a:	e7f9      	b.n	8009e50 <memset+0x4>

08009e5c <__cvt>:
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e62:	461e      	mov	r6, r3
 8009e64:	bfbb      	ittet	lt
 8009e66:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009e6a:	461e      	movlt	r6, r3
 8009e6c:	2300      	movge	r3, #0
 8009e6e:	232d      	movlt	r3, #45	; 0x2d
 8009e70:	b088      	sub	sp, #32
 8009e72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e74:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009e78:	f027 0720 	bic.w	r7, r7, #32
 8009e7c:	2f46      	cmp	r7, #70	; 0x46
 8009e7e:	4614      	mov	r4, r2
 8009e80:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009e82:	700b      	strb	r3, [r1, #0]
 8009e84:	d004      	beq.n	8009e90 <__cvt+0x34>
 8009e86:	2f45      	cmp	r7, #69	; 0x45
 8009e88:	d100      	bne.n	8009e8c <__cvt+0x30>
 8009e8a:	3501      	adds	r5, #1
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e000      	b.n	8009e92 <__cvt+0x36>
 8009e90:	2303      	movs	r3, #3
 8009e92:	aa07      	add	r2, sp, #28
 8009e94:	9204      	str	r2, [sp, #16]
 8009e96:	aa06      	add	r2, sp, #24
 8009e98:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009e9c:	e9cd 3500 	strd	r3, r5, [sp]
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	4633      	mov	r3, r6
 8009ea4:	f000 fcd8 	bl	800a858 <_dtoa_r>
 8009ea8:	2f47      	cmp	r7, #71	; 0x47
 8009eaa:	4680      	mov	r8, r0
 8009eac:	d102      	bne.n	8009eb4 <__cvt+0x58>
 8009eae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eb0:	07db      	lsls	r3, r3, #31
 8009eb2:	d526      	bpl.n	8009f02 <__cvt+0xa6>
 8009eb4:	2f46      	cmp	r7, #70	; 0x46
 8009eb6:	eb08 0905 	add.w	r9, r8, r5
 8009eba:	d111      	bne.n	8009ee0 <__cvt+0x84>
 8009ebc:	f898 3000 	ldrb.w	r3, [r8]
 8009ec0:	2b30      	cmp	r3, #48	; 0x30
 8009ec2:	d10a      	bne.n	8009eda <__cvt+0x7e>
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4620      	mov	r0, r4
 8009eca:	4631      	mov	r1, r6
 8009ecc:	f7f6 fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8009ed0:	b918      	cbnz	r0, 8009eda <__cvt+0x7e>
 8009ed2:	f1c5 0501 	rsb	r5, r5, #1
 8009ed6:	f8ca 5000 	str.w	r5, [sl]
 8009eda:	f8da 3000 	ldr.w	r3, [sl]
 8009ede:	4499      	add	r9, r3
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	4631      	mov	r1, r6
 8009ee8:	f7f6 fd5e 	bl	80009a8 <__aeabi_dcmpeq>
 8009eec:	b938      	cbnz	r0, 8009efe <__cvt+0xa2>
 8009eee:	2230      	movs	r2, #48	; 0x30
 8009ef0:	9b07      	ldr	r3, [sp, #28]
 8009ef2:	454b      	cmp	r3, r9
 8009ef4:	d205      	bcs.n	8009f02 <__cvt+0xa6>
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	9107      	str	r1, [sp, #28]
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e7f8      	b.n	8009ef0 <__cvt+0x94>
 8009efe:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f02:	4640      	mov	r0, r8
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f08:	eba3 0308 	sub.w	r3, r3, r8
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	b008      	add	sp, #32
 8009f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f14 <__exponent>:
 8009f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f16:	2900      	cmp	r1, #0
 8009f18:	bfb4      	ite	lt
 8009f1a:	232d      	movlt	r3, #45	; 0x2d
 8009f1c:	232b      	movge	r3, #43	; 0x2b
 8009f1e:	4604      	mov	r4, r0
 8009f20:	bfb8      	it	lt
 8009f22:	4249      	neglt	r1, r1
 8009f24:	2909      	cmp	r1, #9
 8009f26:	f804 2b02 	strb.w	r2, [r4], #2
 8009f2a:	7043      	strb	r3, [r0, #1]
 8009f2c:	dd21      	ble.n	8009f72 <__exponent+0x5e>
 8009f2e:	f10d 0307 	add.w	r3, sp, #7
 8009f32:	461f      	mov	r7, r3
 8009f34:	260a      	movs	r6, #10
 8009f36:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f3a:	fb06 1115 	mls	r1, r6, r5, r1
 8009f3e:	2d09      	cmp	r5, #9
 8009f40:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009f44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f48:	f103 32ff 	add.w	r2, r3, #4294967295
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	dc09      	bgt.n	8009f64 <__exponent+0x50>
 8009f50:	3130      	adds	r1, #48	; 0x30
 8009f52:	3b02      	subs	r3, #2
 8009f54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f58:	42bb      	cmp	r3, r7
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	d304      	bcc.n	8009f68 <__exponent+0x54>
 8009f5e:	1a10      	subs	r0, r2, r0
 8009f60:	b003      	add	sp, #12
 8009f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f64:	4613      	mov	r3, r2
 8009f66:	e7e6      	b.n	8009f36 <__exponent+0x22>
 8009f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f6c:	f804 2b01 	strb.w	r2, [r4], #1
 8009f70:	e7f2      	b.n	8009f58 <__exponent+0x44>
 8009f72:	2330      	movs	r3, #48	; 0x30
 8009f74:	4419      	add	r1, r3
 8009f76:	7083      	strb	r3, [r0, #2]
 8009f78:	1d02      	adds	r2, r0, #4
 8009f7a:	70c1      	strb	r1, [r0, #3]
 8009f7c:	e7ef      	b.n	8009f5e <__exponent+0x4a>
	...

08009f80 <_printf_float>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	b091      	sub	sp, #68	; 0x44
 8009f86:	460c      	mov	r4, r1
 8009f88:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8009f8a:	4693      	mov	fp, r2
 8009f8c:	461e      	mov	r6, r3
 8009f8e:	4605      	mov	r5, r0
 8009f90:	f001 fa16 	bl	800b3c0 <_localeconv_r>
 8009f94:	6803      	ldr	r3, [r0, #0]
 8009f96:	4618      	mov	r0, r3
 8009f98:	9309      	str	r3, [sp, #36]	; 0x24
 8009f9a:	f7f6 f8d9 	bl	8000150 <strlen>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	900a      	str	r0, [sp, #40]	; 0x28
 8009fa6:	3307      	adds	r3, #7
 8009fa8:	f023 0307 	bic.w	r3, r3, #7
 8009fac:	f103 0208 	add.w	r2, r3, #8
 8009fb0:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009fb4:	f8d4 a000 	ldr.w	sl, [r4]
 8009fb8:	603a      	str	r2, [r7, #0]
 8009fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009fc2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8009fc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fca:	930b      	str	r3, [sp, #44]	; 0x2c
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	4ba6      	ldr	r3, [pc, #664]	; (800a26c <_printf_float+0x2ec>)
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fd6:	f7f6 fd19 	bl	8000a0c <__aeabi_dcmpun>
 8009fda:	bb68      	cbnz	r0, 800a038 <_printf_float+0xb8>
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	4ba2      	ldr	r3, [pc, #648]	; (800a26c <_printf_float+0x2ec>)
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fe6:	f7f6 fcf3 	bl	80009d0 <__aeabi_dcmple>
 8009fea:	bb28      	cbnz	r0, 800a038 <_printf_float+0xb8>
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	f7f6 fce2 	bl	80009bc <__aeabi_dcmplt>
 8009ff8:	b110      	cbz	r0, 800a000 <_printf_float+0x80>
 8009ffa:	232d      	movs	r3, #45	; 0x2d
 8009ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a000:	4f9b      	ldr	r7, [pc, #620]	; (800a270 <_printf_float+0x2f0>)
 800a002:	4b9c      	ldr	r3, [pc, #624]	; (800a274 <_printf_float+0x2f4>)
 800a004:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a008:	bf98      	it	ls
 800a00a:	461f      	movls	r7, r3
 800a00c:	2303      	movs	r3, #3
 800a00e:	f04f 0900 	mov.w	r9, #0
 800a012:	6123      	str	r3, [r4, #16]
 800a014:	f02a 0304 	bic.w	r3, sl, #4
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	9600      	str	r6, [sp, #0]
 800a01c:	465b      	mov	r3, fp
 800a01e:	aa0f      	add	r2, sp, #60	; 0x3c
 800a020:	4621      	mov	r1, r4
 800a022:	4628      	mov	r0, r5
 800a024:	f000 f9e2 	bl	800a3ec <_printf_common>
 800a028:	3001      	adds	r0, #1
 800a02a:	f040 8090 	bne.w	800a14e <_printf_float+0x1ce>
 800a02e:	f04f 30ff 	mov.w	r0, #4294967295
 800a032:	b011      	add	sp, #68	; 0x44
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	463a      	mov	r2, r7
 800a03a:	464b      	mov	r3, r9
 800a03c:	4638      	mov	r0, r7
 800a03e:	4649      	mov	r1, r9
 800a040:	f7f6 fce4 	bl	8000a0c <__aeabi_dcmpun>
 800a044:	b110      	cbz	r0, 800a04c <_printf_float+0xcc>
 800a046:	4f8c      	ldr	r7, [pc, #560]	; (800a278 <_printf_float+0x2f8>)
 800a048:	4b8c      	ldr	r3, [pc, #560]	; (800a27c <_printf_float+0x2fc>)
 800a04a:	e7db      	b.n	800a004 <_printf_float+0x84>
 800a04c:	6863      	ldr	r3, [r4, #4]
 800a04e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800a052:	1c59      	adds	r1, r3, #1
 800a054:	a80d      	add	r0, sp, #52	; 0x34
 800a056:	a90e      	add	r1, sp, #56	; 0x38
 800a058:	d140      	bne.n	800a0dc <_printf_float+0x15c>
 800a05a:	2306      	movs	r3, #6
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	f04f 0c00 	mov.w	ip, #0
 800a062:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800a066:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800a06a:	6863      	ldr	r3, [r4, #4]
 800a06c:	6022      	str	r2, [r4, #0]
 800a06e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	463a      	mov	r2, r7
 800a076:	464b      	mov	r3, r9
 800a078:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a07c:	4628      	mov	r0, r5
 800a07e:	f7ff feed 	bl	8009e5c <__cvt>
 800a082:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800a086:	2b47      	cmp	r3, #71	; 0x47
 800a088:	4607      	mov	r7, r0
 800a08a:	d109      	bne.n	800a0a0 <_printf_float+0x120>
 800a08c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08e:	1cd8      	adds	r0, r3, #3
 800a090:	db02      	blt.n	800a098 <_printf_float+0x118>
 800a092:	6862      	ldr	r2, [r4, #4]
 800a094:	4293      	cmp	r3, r2
 800a096:	dd47      	ble.n	800a128 <_printf_float+0x1a8>
 800a098:	f1a8 0802 	sub.w	r8, r8, #2
 800a09c:	fa5f f888 	uxtb.w	r8, r8
 800a0a0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a0a4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0a6:	d824      	bhi.n	800a0f2 <_printf_float+0x172>
 800a0a8:	3901      	subs	r1, #1
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0b0:	910d      	str	r1, [sp, #52]	; 0x34
 800a0b2:	f7ff ff2f 	bl	8009f14 <__exponent>
 800a0b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	1813      	adds	r3, r2, r0
 800a0bc:	2a01      	cmp	r2, #1
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	dc02      	bgt.n	800a0c8 <_printf_float+0x148>
 800a0c2:	6822      	ldr	r2, [r4, #0]
 800a0c4:	07d1      	lsls	r1, r2, #31
 800a0c6:	d501      	bpl.n	800a0cc <_printf_float+0x14c>
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0a2      	beq.n	800a01a <_printf_float+0x9a>
 800a0d4:	232d      	movs	r3, #45	; 0x2d
 800a0d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0da:	e79e      	b.n	800a01a <_printf_float+0x9a>
 800a0dc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800a0e0:	f000 816e 	beq.w	800a3c0 <_printf_float+0x440>
 800a0e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a0e8:	d1b9      	bne.n	800a05e <_printf_float+0xde>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1b7      	bne.n	800a05e <_printf_float+0xde>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e7b4      	b.n	800a05c <_printf_float+0xdc>
 800a0f2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800a0f6:	d119      	bne.n	800a12c <_printf_float+0x1ac>
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	6863      	ldr	r3, [r4, #4]
 800a0fc:	dd0c      	ble.n	800a118 <_printf_float+0x198>
 800a0fe:	6121      	str	r1, [r4, #16]
 800a100:	b913      	cbnz	r3, 800a108 <_printf_float+0x188>
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	07d2      	lsls	r2, r2, #31
 800a106:	d502      	bpl.n	800a10e <_printf_float+0x18e>
 800a108:	3301      	adds	r3, #1
 800a10a:	440b      	add	r3, r1
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a110:	f04f 0900 	mov.w	r9, #0
 800a114:	65a3      	str	r3, [r4, #88]	; 0x58
 800a116:	e7d9      	b.n	800a0cc <_printf_float+0x14c>
 800a118:	b913      	cbnz	r3, 800a120 <_printf_float+0x1a0>
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	07d0      	lsls	r0, r2, #31
 800a11e:	d501      	bpl.n	800a124 <_printf_float+0x1a4>
 800a120:	3302      	adds	r3, #2
 800a122:	e7f3      	b.n	800a10c <_printf_float+0x18c>
 800a124:	2301      	movs	r3, #1
 800a126:	e7f1      	b.n	800a10c <_printf_float+0x18c>
 800a128:	f04f 0867 	mov.w	r8, #103	; 0x67
 800a12c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a130:	4293      	cmp	r3, r2
 800a132:	db05      	blt.n	800a140 <_printf_float+0x1c0>
 800a134:	6822      	ldr	r2, [r4, #0]
 800a136:	6123      	str	r3, [r4, #16]
 800a138:	07d1      	lsls	r1, r2, #31
 800a13a:	d5e8      	bpl.n	800a10e <_printf_float+0x18e>
 800a13c:	3301      	adds	r3, #1
 800a13e:	e7e5      	b.n	800a10c <_printf_float+0x18c>
 800a140:	2b00      	cmp	r3, #0
 800a142:	bfcc      	ite	gt
 800a144:	2301      	movgt	r3, #1
 800a146:	f1c3 0302 	rsble	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	e7de      	b.n	800a10c <_printf_float+0x18c>
 800a14e:	6823      	ldr	r3, [r4, #0]
 800a150:	055a      	lsls	r2, r3, #21
 800a152:	d407      	bmi.n	800a164 <_printf_float+0x1e4>
 800a154:	6923      	ldr	r3, [r4, #16]
 800a156:	463a      	mov	r2, r7
 800a158:	4659      	mov	r1, fp
 800a15a:	4628      	mov	r0, r5
 800a15c:	47b0      	blx	r6
 800a15e:	3001      	adds	r0, #1
 800a160:	d129      	bne.n	800a1b6 <_printf_float+0x236>
 800a162:	e764      	b.n	800a02e <_printf_float+0xae>
 800a164:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800a168:	f240 80d7 	bls.w	800a31a <_printf_float+0x39a>
 800a16c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a170:	2200      	movs	r2, #0
 800a172:	2300      	movs	r3, #0
 800a174:	f7f6 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 800a178:	b388      	cbz	r0, 800a1de <_printf_float+0x25e>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4a40      	ldr	r2, [pc, #256]	; (800a280 <_printf_float+0x300>)
 800a17e:	4659      	mov	r1, fp
 800a180:	4628      	mov	r0, r5
 800a182:	47b0      	blx	r6
 800a184:	3001      	adds	r0, #1
 800a186:	f43f af52 	beq.w	800a02e <_printf_float+0xae>
 800a18a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a18e:	429a      	cmp	r2, r3
 800a190:	db02      	blt.n	800a198 <_printf_float+0x218>
 800a192:	6823      	ldr	r3, [r4, #0]
 800a194:	07d8      	lsls	r0, r3, #31
 800a196:	d50e      	bpl.n	800a1b6 <_printf_float+0x236>
 800a198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a19c:	4659      	mov	r1, fp
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b0      	blx	r6
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f af43 	beq.w	800a02e <_printf_float+0xae>
 800a1a8:	2700      	movs	r7, #0
 800a1aa:	f104 081a 	add.w	r8, r4, #26
 800a1ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	42bb      	cmp	r3, r7
 800a1b4:	dc09      	bgt.n	800a1ca <_printf_float+0x24a>
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	079f      	lsls	r7, r3, #30
 800a1ba:	f100 80fd 	bmi.w	800a3b8 <_printf_float+0x438>
 800a1be:	68e0      	ldr	r0, [r4, #12]
 800a1c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1c2:	4298      	cmp	r0, r3
 800a1c4:	bfb8      	it	lt
 800a1c6:	4618      	movlt	r0, r3
 800a1c8:	e733      	b.n	800a032 <_printf_float+0xb2>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	4659      	mov	r1, fp
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b0      	blx	r6
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	f43f af2a 	beq.w	800a02e <_printf_float+0xae>
 800a1da:	3701      	adds	r7, #1
 800a1dc:	e7e7      	b.n	800a1ae <_printf_float+0x22e>
 800a1de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	dc2b      	bgt.n	800a23c <_printf_float+0x2bc>
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	4a26      	ldr	r2, [pc, #152]	; (800a280 <_printf_float+0x300>)
 800a1e8:	4659      	mov	r1, fp
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	47b0      	blx	r6
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	f43f af1d 	beq.w	800a02e <_printf_float+0xae>
 800a1f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f6:	b923      	cbnz	r3, 800a202 <_printf_float+0x282>
 800a1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1fa:	b913      	cbnz	r3, 800a202 <_printf_float+0x282>
 800a1fc:	6823      	ldr	r3, [r4, #0]
 800a1fe:	07d9      	lsls	r1, r3, #31
 800a200:	d5d9      	bpl.n	800a1b6 <_printf_float+0x236>
 800a202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a206:	4659      	mov	r1, fp
 800a208:	4628      	mov	r0, r5
 800a20a:	47b0      	blx	r6
 800a20c:	3001      	adds	r0, #1
 800a20e:	f43f af0e 	beq.w	800a02e <_printf_float+0xae>
 800a212:	f04f 0800 	mov.w	r8, #0
 800a216:	f104 091a 	add.w	r9, r4, #26
 800a21a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a21c:	425b      	negs	r3, r3
 800a21e:	4543      	cmp	r3, r8
 800a220:	dc01      	bgt.n	800a226 <_printf_float+0x2a6>
 800a222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a224:	e797      	b.n	800a156 <_printf_float+0x1d6>
 800a226:	2301      	movs	r3, #1
 800a228:	464a      	mov	r2, r9
 800a22a:	4659      	mov	r1, fp
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b0      	blx	r6
 800a230:	3001      	adds	r0, #1
 800a232:	f43f aefc 	beq.w	800a02e <_printf_float+0xae>
 800a236:	f108 0801 	add.w	r8, r8, #1
 800a23a:	e7ee      	b.n	800a21a <_printf_float+0x29a>
 800a23c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a23e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a240:	429a      	cmp	r2, r3
 800a242:	bfa8      	it	ge
 800a244:	461a      	movge	r2, r3
 800a246:	2a00      	cmp	r2, #0
 800a248:	4690      	mov	r8, r2
 800a24a:	dd07      	ble.n	800a25c <_printf_float+0x2dc>
 800a24c:	4613      	mov	r3, r2
 800a24e:	4659      	mov	r1, fp
 800a250:	463a      	mov	r2, r7
 800a252:	4628      	mov	r0, r5
 800a254:	47b0      	blx	r6
 800a256:	3001      	adds	r0, #1
 800a258:	f43f aee9 	beq.w	800a02e <_printf_float+0xae>
 800a25c:	f104 031a 	add.w	r3, r4, #26
 800a260:	f04f 0a00 	mov.w	sl, #0
 800a264:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800a268:	930b      	str	r3, [sp, #44]	; 0x2c
 800a26a:	e015      	b.n	800a298 <_printf_float+0x318>
 800a26c:	7fefffff 	.word	0x7fefffff
 800a270:	0800d62c 	.word	0x0800d62c
 800a274:	0800d628 	.word	0x0800d628
 800a278:	0800d634 	.word	0x0800d634
 800a27c:	0800d630 	.word	0x0800d630
 800a280:	0800d638 	.word	0x0800d638
 800a284:	2301      	movs	r3, #1
 800a286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a288:	4659      	mov	r1, fp
 800a28a:	4628      	mov	r0, r5
 800a28c:	47b0      	blx	r6
 800a28e:	3001      	adds	r0, #1
 800a290:	f43f aecd 	beq.w	800a02e <_printf_float+0xae>
 800a294:	f10a 0a01 	add.w	sl, sl, #1
 800a298:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800a29c:	eba9 0308 	sub.w	r3, r9, r8
 800a2a0:	4553      	cmp	r3, sl
 800a2a2:	dcef      	bgt.n	800a284 <_printf_float+0x304>
 800a2a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	444f      	add	r7, r9
 800a2ac:	db14      	blt.n	800a2d8 <_printf_float+0x358>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07da      	lsls	r2, r3, #31
 800a2b2:	d411      	bmi.n	800a2d8 <_printf_float+0x358>
 800a2b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a2b8:	eba3 0209 	sub.w	r2, r3, r9
 800a2bc:	eba3 0901 	sub.w	r9, r3, r1
 800a2c0:	4591      	cmp	r9, r2
 800a2c2:	bfa8      	it	ge
 800a2c4:	4691      	movge	r9, r2
 800a2c6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ca:	dc0d      	bgt.n	800a2e8 <_printf_float+0x368>
 800a2cc:	2700      	movs	r7, #0
 800a2ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2d2:	f104 081a 	add.w	r8, r4, #26
 800a2d6:	e018      	b.n	800a30a <_printf_float+0x38a>
 800a2d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2dc:	4659      	mov	r1, fp
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b0      	blx	r6
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	d1e6      	bne.n	800a2b4 <_printf_float+0x334>
 800a2e6:	e6a2      	b.n	800a02e <_printf_float+0xae>
 800a2e8:	464b      	mov	r3, r9
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b0      	blx	r6
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d1ea      	bne.n	800a2cc <_printf_float+0x34c>
 800a2f6:	e69a      	b.n	800a02e <_printf_float+0xae>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	4659      	mov	r1, fp
 800a2fe:	4628      	mov	r0, r5
 800a300:	47b0      	blx	r6
 800a302:	3001      	adds	r0, #1
 800a304:	f43f ae93 	beq.w	800a02e <_printf_float+0xae>
 800a308:	3701      	adds	r7, #1
 800a30a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a30e:	1a9b      	subs	r3, r3, r2
 800a310:	eba3 0309 	sub.w	r3, r3, r9
 800a314:	42bb      	cmp	r3, r7
 800a316:	dcef      	bgt.n	800a2f8 <_printf_float+0x378>
 800a318:	e74d      	b.n	800a1b6 <_printf_float+0x236>
 800a31a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a31c:	2a01      	cmp	r2, #1
 800a31e:	dc01      	bgt.n	800a324 <_printf_float+0x3a4>
 800a320:	07db      	lsls	r3, r3, #31
 800a322:	d538      	bpl.n	800a396 <_printf_float+0x416>
 800a324:	2301      	movs	r3, #1
 800a326:	463a      	mov	r2, r7
 800a328:	4659      	mov	r1, fp
 800a32a:	4628      	mov	r0, r5
 800a32c:	47b0      	blx	r6
 800a32e:	3001      	adds	r0, #1
 800a330:	f43f ae7d 	beq.w	800a02e <_printf_float+0xae>
 800a334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a338:	4659      	mov	r1, fp
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b0      	blx	r6
 800a33e:	3001      	adds	r0, #1
 800a340:	f107 0701 	add.w	r7, r7, #1
 800a344:	f43f ae73 	beq.w	800a02e <_printf_float+0xae>
 800a348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a34c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a34e:	2200      	movs	r2, #0
 800a350:	f103 38ff 	add.w	r8, r3, #4294967295
 800a354:	2300      	movs	r3, #0
 800a356:	f7f6 fb27 	bl	80009a8 <__aeabi_dcmpeq>
 800a35a:	b9c0      	cbnz	r0, 800a38e <_printf_float+0x40e>
 800a35c:	4643      	mov	r3, r8
 800a35e:	463a      	mov	r2, r7
 800a360:	4659      	mov	r1, fp
 800a362:	4628      	mov	r0, r5
 800a364:	47b0      	blx	r6
 800a366:	3001      	adds	r0, #1
 800a368:	d10d      	bne.n	800a386 <_printf_float+0x406>
 800a36a:	e660      	b.n	800a02e <_printf_float+0xae>
 800a36c:	2301      	movs	r3, #1
 800a36e:	4642      	mov	r2, r8
 800a370:	4659      	mov	r1, fp
 800a372:	4628      	mov	r0, r5
 800a374:	47b0      	blx	r6
 800a376:	3001      	adds	r0, #1
 800a378:	f43f ae59 	beq.w	800a02e <_printf_float+0xae>
 800a37c:	3701      	adds	r7, #1
 800a37e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a380:	3b01      	subs	r3, #1
 800a382:	42bb      	cmp	r3, r7
 800a384:	dcf2      	bgt.n	800a36c <_printf_float+0x3ec>
 800a386:	464b      	mov	r3, r9
 800a388:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a38c:	e6e4      	b.n	800a158 <_printf_float+0x1d8>
 800a38e:	2700      	movs	r7, #0
 800a390:	f104 081a 	add.w	r8, r4, #26
 800a394:	e7f3      	b.n	800a37e <_printf_float+0x3fe>
 800a396:	2301      	movs	r3, #1
 800a398:	e7e1      	b.n	800a35e <_printf_float+0x3de>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4642      	mov	r2, r8
 800a39e:	4659      	mov	r1, fp
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f ae42 	beq.w	800a02e <_printf_float+0xae>
 800a3aa:	3701      	adds	r7, #1
 800a3ac:	68e3      	ldr	r3, [r4, #12]
 800a3ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	42bb      	cmp	r3, r7
 800a3b4:	dcf1      	bgt.n	800a39a <_printf_float+0x41a>
 800a3b6:	e702      	b.n	800a1be <_printf_float+0x23e>
 800a3b8:	2700      	movs	r7, #0
 800a3ba:	f104 0819 	add.w	r8, r4, #25
 800a3be:	e7f5      	b.n	800a3ac <_printf_float+0x42c>
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f43f ae94 	beq.w	800a0ee <_printf_float+0x16e>
 800a3c6:	f04f 0c00 	mov.w	ip, #0
 800a3ca:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800a3ce:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800a3d2:	6022      	str	r2, [r4, #0]
 800a3d4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800a3d8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	463a      	mov	r2, r7
 800a3e0:	464b      	mov	r3, r9
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f7ff fd3a 	bl	8009e5c <__cvt>
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	e64f      	b.n	800a08c <_printf_float+0x10c>

0800a3ec <_printf_common>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	4691      	mov	r9, r2
 800a3f2:	461f      	mov	r7, r3
 800a3f4:	688a      	ldr	r2, [r1, #8]
 800a3f6:	690b      	ldr	r3, [r1, #16]
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	bfb8      	it	lt
 800a3fe:	4613      	movlt	r3, r2
 800a400:	f8c9 3000 	str.w	r3, [r9]
 800a404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a408:	460c      	mov	r4, r1
 800a40a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a40e:	b112      	cbz	r2, 800a416 <_printf_common+0x2a>
 800a410:	3301      	adds	r3, #1
 800a412:	f8c9 3000 	str.w	r3, [r9]
 800a416:	6823      	ldr	r3, [r4, #0]
 800a418:	0699      	lsls	r1, r3, #26
 800a41a:	bf42      	ittt	mi
 800a41c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a420:	3302      	addmi	r3, #2
 800a422:	f8c9 3000 	strmi.w	r3, [r9]
 800a426:	6825      	ldr	r5, [r4, #0]
 800a428:	f015 0506 	ands.w	r5, r5, #6
 800a42c:	d107      	bne.n	800a43e <_printf_common+0x52>
 800a42e:	f104 0a19 	add.w	sl, r4, #25
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	f8d9 2000 	ldr.w	r2, [r9]
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	42ab      	cmp	r3, r5
 800a43c:	dc29      	bgt.n	800a492 <_printf_common+0xa6>
 800a43e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	3300      	adds	r3, #0
 800a446:	bf18      	it	ne
 800a448:	2301      	movne	r3, #1
 800a44a:	0692      	lsls	r2, r2, #26
 800a44c:	d42e      	bmi.n	800a4ac <_printf_common+0xc0>
 800a44e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a452:	4639      	mov	r1, r7
 800a454:	4630      	mov	r0, r6
 800a456:	47c0      	blx	r8
 800a458:	3001      	adds	r0, #1
 800a45a:	d021      	beq.n	800a4a0 <_printf_common+0xb4>
 800a45c:	6823      	ldr	r3, [r4, #0]
 800a45e:	68e5      	ldr	r5, [r4, #12]
 800a460:	f003 0306 	and.w	r3, r3, #6
 800a464:	2b04      	cmp	r3, #4
 800a466:	bf18      	it	ne
 800a468:	2500      	movne	r5, #0
 800a46a:	f8d9 2000 	ldr.w	r2, [r9]
 800a46e:	f04f 0900 	mov.w	r9, #0
 800a472:	bf08      	it	eq
 800a474:	1aad      	subeq	r5, r5, r2
 800a476:	68a3      	ldr	r3, [r4, #8]
 800a478:	6922      	ldr	r2, [r4, #16]
 800a47a:	bf08      	it	eq
 800a47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a480:	4293      	cmp	r3, r2
 800a482:	bfc4      	itt	gt
 800a484:	1a9b      	subgt	r3, r3, r2
 800a486:	18ed      	addgt	r5, r5, r3
 800a488:	341a      	adds	r4, #26
 800a48a:	454d      	cmp	r5, r9
 800a48c:	d11a      	bne.n	800a4c4 <_printf_common+0xd8>
 800a48e:	2000      	movs	r0, #0
 800a490:	e008      	b.n	800a4a4 <_printf_common+0xb8>
 800a492:	2301      	movs	r3, #1
 800a494:	4652      	mov	r2, sl
 800a496:	4639      	mov	r1, r7
 800a498:	4630      	mov	r0, r6
 800a49a:	47c0      	blx	r8
 800a49c:	3001      	adds	r0, #1
 800a49e:	d103      	bne.n	800a4a8 <_printf_common+0xbc>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4a8:	3501      	adds	r5, #1
 800a4aa:	e7c2      	b.n	800a432 <_printf_common+0x46>
 800a4ac:	2030      	movs	r0, #48	; 0x30
 800a4ae:	18e1      	adds	r1, r4, r3
 800a4b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4ba:	4422      	add	r2, r4
 800a4bc:	3302      	adds	r3, #2
 800a4be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4c2:	e7c4      	b.n	800a44e <_printf_common+0x62>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	4630      	mov	r0, r6
 800a4cc:	47c0      	blx	r8
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	d0e6      	beq.n	800a4a0 <_printf_common+0xb4>
 800a4d2:	f109 0901 	add.w	r9, r9, #1
 800a4d6:	e7d8      	b.n	800a48a <_printf_common+0x9e>

0800a4d8 <_printf_i>:
 800a4d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	7e09      	ldrb	r1, [r1, #24]
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	296e      	cmp	r1, #110	; 0x6e
 800a4e8:	4617      	mov	r7, r2
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	4698      	mov	r8, r3
 800a4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4f0:	f000 80b3 	beq.w	800a65a <_printf_i+0x182>
 800a4f4:	d822      	bhi.n	800a53c <_printf_i+0x64>
 800a4f6:	2963      	cmp	r1, #99	; 0x63
 800a4f8:	d036      	beq.n	800a568 <_printf_i+0x90>
 800a4fa:	d80a      	bhi.n	800a512 <_printf_i+0x3a>
 800a4fc:	2900      	cmp	r1, #0
 800a4fe:	f000 80b9 	beq.w	800a674 <_printf_i+0x19c>
 800a502:	2958      	cmp	r1, #88	; 0x58
 800a504:	f000 8083 	beq.w	800a60e <_printf_i+0x136>
 800a508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a510:	e032      	b.n	800a578 <_printf_i+0xa0>
 800a512:	2964      	cmp	r1, #100	; 0x64
 800a514:	d001      	beq.n	800a51a <_printf_i+0x42>
 800a516:	2969      	cmp	r1, #105	; 0x69
 800a518:	d1f6      	bne.n	800a508 <_printf_i+0x30>
 800a51a:	6820      	ldr	r0, [r4, #0]
 800a51c:	6813      	ldr	r3, [r2, #0]
 800a51e:	0605      	lsls	r5, r0, #24
 800a520:	f103 0104 	add.w	r1, r3, #4
 800a524:	d52a      	bpl.n	800a57c <_printf_i+0xa4>
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6011      	str	r1, [r2, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da03      	bge.n	800a536 <_printf_i+0x5e>
 800a52e:	222d      	movs	r2, #45	; 0x2d
 800a530:	425b      	negs	r3, r3
 800a532:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a536:	486f      	ldr	r0, [pc, #444]	; (800a6f4 <_printf_i+0x21c>)
 800a538:	220a      	movs	r2, #10
 800a53a:	e039      	b.n	800a5b0 <_printf_i+0xd8>
 800a53c:	2973      	cmp	r1, #115	; 0x73
 800a53e:	f000 809d 	beq.w	800a67c <_printf_i+0x1a4>
 800a542:	d808      	bhi.n	800a556 <_printf_i+0x7e>
 800a544:	296f      	cmp	r1, #111	; 0x6f
 800a546:	d020      	beq.n	800a58a <_printf_i+0xb2>
 800a548:	2970      	cmp	r1, #112	; 0x70
 800a54a:	d1dd      	bne.n	800a508 <_printf_i+0x30>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	f043 0320 	orr.w	r3, r3, #32
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	e003      	b.n	800a55e <_printf_i+0x86>
 800a556:	2975      	cmp	r1, #117	; 0x75
 800a558:	d017      	beq.n	800a58a <_printf_i+0xb2>
 800a55a:	2978      	cmp	r1, #120	; 0x78
 800a55c:	d1d4      	bne.n	800a508 <_printf_i+0x30>
 800a55e:	2378      	movs	r3, #120	; 0x78
 800a560:	4865      	ldr	r0, [pc, #404]	; (800a6f8 <_printf_i+0x220>)
 800a562:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a566:	e055      	b.n	800a614 <_printf_i+0x13c>
 800a568:	6813      	ldr	r3, [r2, #0]
 800a56a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a56e:	1d19      	adds	r1, r3, #4
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	6011      	str	r1, [r2, #0]
 800a574:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a578:	2301      	movs	r3, #1
 800a57a:	e08c      	b.n	800a696 <_printf_i+0x1be>
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a582:	6011      	str	r1, [r2, #0]
 800a584:	bf18      	it	ne
 800a586:	b21b      	sxthne	r3, r3
 800a588:	e7cf      	b.n	800a52a <_printf_i+0x52>
 800a58a:	6813      	ldr	r3, [r2, #0]
 800a58c:	6825      	ldr	r5, [r4, #0]
 800a58e:	1d18      	adds	r0, r3, #4
 800a590:	6010      	str	r0, [r2, #0]
 800a592:	0628      	lsls	r0, r5, #24
 800a594:	d501      	bpl.n	800a59a <_printf_i+0xc2>
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	e002      	b.n	800a5a0 <_printf_i+0xc8>
 800a59a:	0668      	lsls	r0, r5, #25
 800a59c:	d5fb      	bpl.n	800a596 <_printf_i+0xbe>
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	296f      	cmp	r1, #111	; 0x6f
 800a5a2:	bf14      	ite	ne
 800a5a4:	220a      	movne	r2, #10
 800a5a6:	2208      	moveq	r2, #8
 800a5a8:	4852      	ldr	r0, [pc, #328]	; (800a6f4 <_printf_i+0x21c>)
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5b0:	6865      	ldr	r5, [r4, #4]
 800a5b2:	2d00      	cmp	r5, #0
 800a5b4:	60a5      	str	r5, [r4, #8]
 800a5b6:	f2c0 8095 	blt.w	800a6e4 <_printf_i+0x20c>
 800a5ba:	6821      	ldr	r1, [r4, #0]
 800a5bc:	f021 0104 	bic.w	r1, r1, #4
 800a5c0:	6021      	str	r1, [r4, #0]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d13d      	bne.n	800a642 <_printf_i+0x16a>
 800a5c6:	2d00      	cmp	r5, #0
 800a5c8:	f040 808e 	bne.w	800a6e8 <_printf_i+0x210>
 800a5cc:	4665      	mov	r5, ip
 800a5ce:	2a08      	cmp	r2, #8
 800a5d0:	d10b      	bne.n	800a5ea <_printf_i+0x112>
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	07db      	lsls	r3, r3, #31
 800a5d6:	d508      	bpl.n	800a5ea <_printf_i+0x112>
 800a5d8:	6923      	ldr	r3, [r4, #16]
 800a5da:	6862      	ldr	r2, [r4, #4]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	bfde      	ittt	le
 800a5e0:	2330      	movle	r3, #48	; 0x30
 800a5e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5ea:	ebac 0305 	sub.w	r3, ip, r5
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	f8cd 8000 	str.w	r8, [sp]
 800a5f4:	463b      	mov	r3, r7
 800a5f6:	aa03      	add	r2, sp, #12
 800a5f8:	4621      	mov	r1, r4
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	f7ff fef6 	bl	800a3ec <_printf_common>
 800a600:	3001      	adds	r0, #1
 800a602:	d14d      	bne.n	800a6a0 <_printf_i+0x1c8>
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	b005      	add	sp, #20
 800a60a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a60e:	4839      	ldr	r0, [pc, #228]	; (800a6f4 <_printf_i+0x21c>)
 800a610:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a614:	6813      	ldr	r3, [r2, #0]
 800a616:	6821      	ldr	r1, [r4, #0]
 800a618:	1d1d      	adds	r5, r3, #4
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6015      	str	r5, [r2, #0]
 800a61e:	060a      	lsls	r2, r1, #24
 800a620:	d50b      	bpl.n	800a63a <_printf_i+0x162>
 800a622:	07ca      	lsls	r2, r1, #31
 800a624:	bf44      	itt	mi
 800a626:	f041 0120 	orrmi.w	r1, r1, #32
 800a62a:	6021      	strmi	r1, [r4, #0]
 800a62c:	b91b      	cbnz	r3, 800a636 <_printf_i+0x15e>
 800a62e:	6822      	ldr	r2, [r4, #0]
 800a630:	f022 0220 	bic.w	r2, r2, #32
 800a634:	6022      	str	r2, [r4, #0]
 800a636:	2210      	movs	r2, #16
 800a638:	e7b7      	b.n	800a5aa <_printf_i+0xd2>
 800a63a:	064d      	lsls	r5, r1, #25
 800a63c:	bf48      	it	mi
 800a63e:	b29b      	uxthmi	r3, r3
 800a640:	e7ef      	b.n	800a622 <_printf_i+0x14a>
 800a642:	4665      	mov	r5, ip
 800a644:	fbb3 f1f2 	udiv	r1, r3, r2
 800a648:	fb02 3311 	mls	r3, r2, r1, r3
 800a64c:	5cc3      	ldrb	r3, [r0, r3]
 800a64e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a652:	460b      	mov	r3, r1
 800a654:	2900      	cmp	r1, #0
 800a656:	d1f5      	bne.n	800a644 <_printf_i+0x16c>
 800a658:	e7b9      	b.n	800a5ce <_printf_i+0xf6>
 800a65a:	6813      	ldr	r3, [r2, #0]
 800a65c:	6825      	ldr	r5, [r4, #0]
 800a65e:	1d18      	adds	r0, r3, #4
 800a660:	6961      	ldr	r1, [r4, #20]
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	0628      	lsls	r0, r5, #24
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	d501      	bpl.n	800a66e <_printf_i+0x196>
 800a66a:	6019      	str	r1, [r3, #0]
 800a66c:	e002      	b.n	800a674 <_printf_i+0x19c>
 800a66e:	066a      	lsls	r2, r5, #25
 800a670:	d5fb      	bpl.n	800a66a <_printf_i+0x192>
 800a672:	8019      	strh	r1, [r3, #0]
 800a674:	2300      	movs	r3, #0
 800a676:	4665      	mov	r5, ip
 800a678:	6123      	str	r3, [r4, #16]
 800a67a:	e7b9      	b.n	800a5f0 <_printf_i+0x118>
 800a67c:	6813      	ldr	r3, [r2, #0]
 800a67e:	1d19      	adds	r1, r3, #4
 800a680:	6011      	str	r1, [r2, #0]
 800a682:	681d      	ldr	r5, [r3, #0]
 800a684:	6862      	ldr	r2, [r4, #4]
 800a686:	2100      	movs	r1, #0
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 feaf 	bl	800b3ec <memchr>
 800a68e:	b108      	cbz	r0, 800a694 <_printf_i+0x1bc>
 800a690:	1b40      	subs	r0, r0, r5
 800a692:	6060      	str	r0, [r4, #4]
 800a694:	6863      	ldr	r3, [r4, #4]
 800a696:	6123      	str	r3, [r4, #16]
 800a698:	2300      	movs	r3, #0
 800a69a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a69e:	e7a7      	b.n	800a5f0 <_printf_i+0x118>
 800a6a0:	6923      	ldr	r3, [r4, #16]
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	47c0      	blx	r8
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d0aa      	beq.n	800a604 <_printf_i+0x12c>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	079b      	lsls	r3, r3, #30
 800a6b2:	d413      	bmi.n	800a6dc <_printf_i+0x204>
 800a6b4:	68e0      	ldr	r0, [r4, #12]
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	4298      	cmp	r0, r3
 800a6ba:	bfb8      	it	lt
 800a6bc:	4618      	movlt	r0, r3
 800a6be:	e7a3      	b.n	800a608 <_printf_i+0x130>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	464a      	mov	r2, r9
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	47c0      	blx	r8
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	d09a      	beq.n	800a604 <_printf_i+0x12c>
 800a6ce:	3501      	adds	r5, #1
 800a6d0:	68e3      	ldr	r3, [r4, #12]
 800a6d2:	9a03      	ldr	r2, [sp, #12]
 800a6d4:	1a9b      	subs	r3, r3, r2
 800a6d6:	42ab      	cmp	r3, r5
 800a6d8:	dcf2      	bgt.n	800a6c0 <_printf_i+0x1e8>
 800a6da:	e7eb      	b.n	800a6b4 <_printf_i+0x1dc>
 800a6dc:	2500      	movs	r5, #0
 800a6de:	f104 0919 	add.w	r9, r4, #25
 800a6e2:	e7f5      	b.n	800a6d0 <_printf_i+0x1f8>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1ac      	bne.n	800a642 <_printf_i+0x16a>
 800a6e8:	7803      	ldrb	r3, [r0, #0]
 800a6ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6f2:	e76c      	b.n	800a5ce <_printf_i+0xf6>
 800a6f4:	0800d63a 	.word	0x0800d63a
 800a6f8:	0800d64b 	.word	0x0800d64b

0800a6fc <siprintf>:
 800a6fc:	b40e      	push	{r1, r2, r3}
 800a6fe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a702:	b500      	push	{lr}
 800a704:	b09c      	sub	sp, #112	; 0x70
 800a706:	ab1d      	add	r3, sp, #116	; 0x74
 800a708:	9002      	str	r0, [sp, #8]
 800a70a:	9006      	str	r0, [sp, #24]
 800a70c:	9107      	str	r1, [sp, #28]
 800a70e:	9104      	str	r1, [sp, #16]
 800a710:	4808      	ldr	r0, [pc, #32]	; (800a734 <siprintf+0x38>)
 800a712:	4909      	ldr	r1, [pc, #36]	; (800a738 <siprintf+0x3c>)
 800a714:	f853 2b04 	ldr.w	r2, [r3], #4
 800a718:	9105      	str	r1, [sp, #20]
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	a902      	add	r1, sp, #8
 800a71e:	9301      	str	r3, [sp, #4]
 800a720:	f001 fa68 	bl	800bbf4 <_svfiprintf_r>
 800a724:	2200      	movs	r2, #0
 800a726:	9b02      	ldr	r3, [sp, #8]
 800a728:	701a      	strb	r2, [r3, #0]
 800a72a:	b01c      	add	sp, #112	; 0x70
 800a72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a730:	b003      	add	sp, #12
 800a732:	4770      	bx	lr
 800a734:	2000003c 	.word	0x2000003c
 800a738:	ffff0208 	.word	0xffff0208

0800a73c <quorem>:
 800a73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a740:	6903      	ldr	r3, [r0, #16]
 800a742:	690c      	ldr	r4, [r1, #16]
 800a744:	4680      	mov	r8, r0
 800a746:	42a3      	cmp	r3, r4
 800a748:	f2c0 8084 	blt.w	800a854 <quorem+0x118>
 800a74c:	3c01      	subs	r4, #1
 800a74e:	f101 0714 	add.w	r7, r1, #20
 800a752:	f100 0614 	add.w	r6, r0, #20
 800a756:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a75a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a75e:	3501      	adds	r5, #1
 800a760:	fbb0 f5f5 	udiv	r5, r0, r5
 800a764:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a768:	eb06 030c 	add.w	r3, r6, ip
 800a76c:	eb07 090c 	add.w	r9, r7, ip
 800a770:	9301      	str	r3, [sp, #4]
 800a772:	b39d      	cbz	r5, 800a7dc <quorem+0xa0>
 800a774:	f04f 0a00 	mov.w	sl, #0
 800a778:	4638      	mov	r0, r7
 800a77a:	46b6      	mov	lr, r6
 800a77c:	46d3      	mov	fp, sl
 800a77e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a782:	b293      	uxth	r3, r2
 800a784:	fb05 a303 	mla	r3, r5, r3, sl
 800a788:	0c12      	lsrs	r2, r2, #16
 800a78a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a78e:	fb05 a202 	mla	r2, r5, r2, sl
 800a792:	b29b      	uxth	r3, r3
 800a794:	ebab 0303 	sub.w	r3, fp, r3
 800a798:	f8de b000 	ldr.w	fp, [lr]
 800a79c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a7a0:	fa1f fb8b 	uxth.w	fp, fp
 800a7a4:	445b      	add	r3, fp
 800a7a6:	fa1f fb82 	uxth.w	fp, r2
 800a7aa:	f8de 2000 	ldr.w	r2, [lr]
 800a7ae:	4581      	cmp	r9, r0
 800a7b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7be:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a7c2:	f84e 3b04 	str.w	r3, [lr], #4
 800a7c6:	d2da      	bcs.n	800a77e <quorem+0x42>
 800a7c8:	f856 300c 	ldr.w	r3, [r6, ip]
 800a7cc:	b933      	cbnz	r3, 800a7dc <quorem+0xa0>
 800a7ce:	9b01      	ldr	r3, [sp, #4]
 800a7d0:	3b04      	subs	r3, #4
 800a7d2:	429e      	cmp	r6, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	d331      	bcc.n	800a83c <quorem+0x100>
 800a7d8:	f8c8 4010 	str.w	r4, [r8, #16]
 800a7dc:	4640      	mov	r0, r8
 800a7de:	f001 f833 	bl	800b848 <__mcmp>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	db26      	blt.n	800a834 <quorem+0xf8>
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f04f 0c00 	mov.w	ip, #0
 800a7ec:	3501      	adds	r5, #1
 800a7ee:	f857 1b04 	ldr.w	r1, [r7], #4
 800a7f2:	f8d0 e000 	ldr.w	lr, [r0]
 800a7f6:	b28b      	uxth	r3, r1
 800a7f8:	ebac 0303 	sub.w	r3, ip, r3
 800a7fc:	fa1f f28e 	uxth.w	r2, lr
 800a800:	4413      	add	r3, r2
 800a802:	0c0a      	lsrs	r2, r1, #16
 800a804:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a808:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a812:	45b9      	cmp	r9, r7
 800a814:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a818:	f840 3b04 	str.w	r3, [r0], #4
 800a81c:	d2e7      	bcs.n	800a7ee <quorem+0xb2>
 800a81e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a822:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a826:	b92a      	cbnz	r2, 800a834 <quorem+0xf8>
 800a828:	3b04      	subs	r3, #4
 800a82a:	429e      	cmp	r6, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	d30b      	bcc.n	800a848 <quorem+0x10c>
 800a830:	f8c8 4010 	str.w	r4, [r8, #16]
 800a834:	4628      	mov	r0, r5
 800a836:	b003      	add	sp, #12
 800a838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	3b04      	subs	r3, #4
 800a840:	2a00      	cmp	r2, #0
 800a842:	d1c9      	bne.n	800a7d8 <quorem+0x9c>
 800a844:	3c01      	subs	r4, #1
 800a846:	e7c4      	b.n	800a7d2 <quorem+0x96>
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	3b04      	subs	r3, #4
 800a84c:	2a00      	cmp	r2, #0
 800a84e:	d1ef      	bne.n	800a830 <quorem+0xf4>
 800a850:	3c01      	subs	r4, #1
 800a852:	e7ea      	b.n	800a82a <quorem+0xee>
 800a854:	2000      	movs	r0, #0
 800a856:	e7ee      	b.n	800a836 <quorem+0xfa>

0800a858 <_dtoa_r>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	4616      	mov	r6, r2
 800a85e:	461f      	mov	r7, r3
 800a860:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a862:	b095      	sub	sp, #84	; 0x54
 800a864:	4604      	mov	r4, r0
 800a866:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a86a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a86e:	b93d      	cbnz	r5, 800a880 <_dtoa_r+0x28>
 800a870:	2010      	movs	r0, #16
 800a872:	f000 fdb3 	bl	800b3dc <malloc>
 800a876:	6260      	str	r0, [r4, #36]	; 0x24
 800a878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a87c:	6005      	str	r5, [r0, #0]
 800a87e:	60c5      	str	r5, [r0, #12]
 800a880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	b151      	cbz	r1, 800a89c <_dtoa_r+0x44>
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	2301      	movs	r3, #1
 800a88a:	4093      	lsls	r3, r2
 800a88c:	604a      	str	r2, [r1, #4]
 800a88e:	608b      	str	r3, [r1, #8]
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fdf8 	bl	800b486 <_Bfree>
 800a896:	2200      	movs	r2, #0
 800a898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	1e3b      	subs	r3, r7, #0
 800a89e:	bfaf      	iteee	ge
 800a8a0:	2300      	movge	r3, #0
 800a8a2:	2201      	movlt	r2, #1
 800a8a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a8a8:	9303      	strlt	r3, [sp, #12]
 800a8aa:	bfac      	ite	ge
 800a8ac:	f8c8 3000 	strge.w	r3, [r8]
 800a8b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a8b4:	4bae      	ldr	r3, [pc, #696]	; (800ab70 <_dtoa_r+0x318>)
 800a8b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a8ba:	ea33 0308 	bics.w	r3, r3, r8
 800a8be:	d11b      	bne.n	800a8f8 <_dtoa_r+0xa0>
 800a8c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	9b02      	ldr	r3, [sp, #8]
 800a8ca:	b923      	cbnz	r3, 800a8d6 <_dtoa_r+0x7e>
 800a8cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f000 8545 	beq.w	800b360 <_dtoa_r+0xb08>
 800a8d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8d8:	b953      	cbnz	r3, 800a8f0 <_dtoa_r+0x98>
 800a8da:	4ba6      	ldr	r3, [pc, #664]	; (800ab74 <_dtoa_r+0x31c>)
 800a8dc:	e021      	b.n	800a922 <_dtoa_r+0xca>
 800a8de:	4ba6      	ldr	r3, [pc, #664]	; (800ab78 <_dtoa_r+0x320>)
 800a8e0:	9306      	str	r3, [sp, #24]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8e6:	6013      	str	r3, [r2, #0]
 800a8e8:	9806      	ldr	r0, [sp, #24]
 800a8ea:	b015      	add	sp, #84	; 0x54
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	4ba0      	ldr	r3, [pc, #640]	; (800ab74 <_dtoa_r+0x31c>)
 800a8f2:	9306      	str	r3, [sp, #24]
 800a8f4:	3303      	adds	r3, #3
 800a8f6:	e7f5      	b.n	800a8e4 <_dtoa_r+0x8c>
 800a8f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f6 f850 	bl	80009a8 <__aeabi_dcmpeq>
 800a908:	4682      	mov	sl, r0
 800a90a:	b160      	cbz	r0, 800a926 <_dtoa_r+0xce>
 800a90c:	2301      	movs	r3, #1
 800a90e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a914:	2b00      	cmp	r3, #0
 800a916:	f000 8520 	beq.w	800b35a <_dtoa_r+0xb02>
 800a91a:	4b98      	ldr	r3, [pc, #608]	; (800ab7c <_dtoa_r+0x324>)
 800a91c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	3b01      	subs	r3, #1
 800a922:	9306      	str	r3, [sp, #24]
 800a924:	e7e0      	b.n	800a8e8 <_dtoa_r+0x90>
 800a926:	ab12      	add	r3, sp, #72	; 0x48
 800a928:	9301      	str	r3, [sp, #4]
 800a92a:	ab13      	add	r3, sp, #76	; 0x4c
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4632      	mov	r2, r6
 800a930:	463b      	mov	r3, r7
 800a932:	4620      	mov	r0, r4
 800a934:	f001 f800 	bl	800b938 <__d2b>
 800a938:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a93c:	4683      	mov	fp, r0
 800a93e:	2d00      	cmp	r5, #0
 800a940:	d07d      	beq.n	800aa3e <_dtoa_r+0x1e6>
 800a942:	46b0      	mov	r8, r6
 800a944:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a948:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a94c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a950:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a954:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a958:	2200      	movs	r2, #0
 800a95a:	4b89      	ldr	r3, [pc, #548]	; (800ab80 <_dtoa_r+0x328>)
 800a95c:	4640      	mov	r0, r8
 800a95e:	4649      	mov	r1, r9
 800a960:	f7f5 fc02 	bl	8000168 <__aeabi_dsub>
 800a964:	a37c      	add	r3, pc, #496	; (adr r3, 800ab58 <_dtoa_r+0x300>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	f7f5 fdb5 	bl	80004d8 <__aeabi_dmul>
 800a96e:	a37c      	add	r3, pc, #496	; (adr r3, 800ab60 <_dtoa_r+0x308>)
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f7f5 fbfa 	bl	800016c <__adddf3>
 800a978:	4606      	mov	r6, r0
 800a97a:	4628      	mov	r0, r5
 800a97c:	460f      	mov	r7, r1
 800a97e:	f7f5 fd41 	bl	8000404 <__aeabi_i2d>
 800a982:	a379      	add	r3, pc, #484	; (adr r3, 800ab68 <_dtoa_r+0x310>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fda6 	bl	80004d8 <__aeabi_dmul>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	f7f5 fbea 	bl	800016c <__adddf3>
 800a998:	4606      	mov	r6, r0
 800a99a:	460f      	mov	r7, r1
 800a99c:	f7f6 f84c 	bl	8000a38 <__aeabi_d2iz>
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f6 f807 	bl	80009bc <__aeabi_dcmplt>
 800a9ae:	b148      	cbz	r0, 800a9c4 <_dtoa_r+0x16c>
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f7f5 fd27 	bl	8000404 <__aeabi_i2d>
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	463b      	mov	r3, r7
 800a9ba:	f7f5 fff5 	bl	80009a8 <__aeabi_dcmpeq>
 800a9be:	b908      	cbnz	r0, 800a9c4 <_dtoa_r+0x16c>
 800a9c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c4:	f1ba 0f16 	cmp.w	sl, #22
 800a9c8:	d85a      	bhi.n	800aa80 <_dtoa_r+0x228>
 800a9ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ce:	496d      	ldr	r1, [pc, #436]	; (800ab84 <_dtoa_r+0x32c>)
 800a9d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d8:	f7f6 f80e 	bl	80009f8 <__aeabi_dcmpgt>
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d051      	beq.n	800aa84 <_dtoa_r+0x22c>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9e6:	930d      	str	r3, [sp, #52]	; 0x34
 800a9e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ea:	1b5d      	subs	r5, r3, r5
 800a9ec:	1e6b      	subs	r3, r5, #1
 800a9ee:	9307      	str	r3, [sp, #28]
 800a9f0:	bf43      	ittte	mi
 800a9f2:	2300      	movmi	r3, #0
 800a9f4:	f1c5 0901 	rsbmi	r9, r5, #1
 800a9f8:	9307      	strmi	r3, [sp, #28]
 800a9fa:	f04f 0900 	movpl.w	r9, #0
 800a9fe:	f1ba 0f00 	cmp.w	sl, #0
 800aa02:	db41      	blt.n	800aa88 <_dtoa_r+0x230>
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800aa0a:	4453      	add	r3, sl
 800aa0c:	9307      	str	r3, [sp, #28]
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9308      	str	r3, [sp, #32]
 800aa12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa14:	2b09      	cmp	r3, #9
 800aa16:	f200 808f 	bhi.w	800ab38 <_dtoa_r+0x2e0>
 800aa1a:	2b05      	cmp	r3, #5
 800aa1c:	bfc4      	itt	gt
 800aa1e:	3b04      	subgt	r3, #4
 800aa20:	931e      	strgt	r3, [sp, #120]	; 0x78
 800aa22:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa24:	bfc8      	it	gt
 800aa26:	2500      	movgt	r5, #0
 800aa28:	f1a3 0302 	sub.w	r3, r3, #2
 800aa2c:	bfd8      	it	le
 800aa2e:	2501      	movle	r5, #1
 800aa30:	2b03      	cmp	r3, #3
 800aa32:	f200 808d 	bhi.w	800ab50 <_dtoa_r+0x2f8>
 800aa36:	e8df f003 	tbb	[pc, r3]
 800aa3a:	7d7b      	.short	0x7d7b
 800aa3c:	6f2f      	.short	0x6f2f
 800aa3e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800aa42:	441d      	add	r5, r3
 800aa44:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800aa48:	2820      	cmp	r0, #32
 800aa4a:	dd13      	ble.n	800aa74 <_dtoa_r+0x21c>
 800aa4c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	fa08 f800 	lsl.w	r8, r8, r0
 800aa56:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800aa5a:	fa23 f000 	lsr.w	r0, r3, r0
 800aa5e:	ea48 0000 	orr.w	r0, r8, r0
 800aa62:	f7f5 fcbf 	bl	80003e4 <__aeabi_ui2d>
 800aa66:	2301      	movs	r3, #1
 800aa68:	4680      	mov	r8, r0
 800aa6a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800aa6e:	3d01      	subs	r5, #1
 800aa70:	9310      	str	r3, [sp, #64]	; 0x40
 800aa72:	e771      	b.n	800a958 <_dtoa_r+0x100>
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	f1c0 0020 	rsb	r0, r0, #32
 800aa7a:	fa03 f000 	lsl.w	r0, r3, r0
 800aa7e:	e7f0      	b.n	800aa62 <_dtoa_r+0x20a>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e7b0      	b.n	800a9e6 <_dtoa_r+0x18e>
 800aa84:	900d      	str	r0, [sp, #52]	; 0x34
 800aa86:	e7af      	b.n	800a9e8 <_dtoa_r+0x190>
 800aa88:	f1ca 0300 	rsb	r3, sl, #0
 800aa8c:	9308      	str	r3, [sp, #32]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	eba9 090a 	sub.w	r9, r9, sl
 800aa94:	930c      	str	r3, [sp, #48]	; 0x30
 800aa96:	e7bc      	b.n	800aa12 <_dtoa_r+0x1ba>
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa9c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd74      	ble.n	800ab8c <_dtoa_r+0x334>
 800aaa2:	4698      	mov	r8, r3
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaaa:	6072      	str	r2, [r6, #4]
 800aaac:	2204      	movs	r2, #4
 800aaae:	f102 0014 	add.w	r0, r2, #20
 800aab2:	4298      	cmp	r0, r3
 800aab4:	6871      	ldr	r1, [r6, #4]
 800aab6:	d96e      	bls.n	800ab96 <_dtoa_r+0x33e>
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fcb0 	bl	800b41e <_Balloc>
 800aabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aac0:	6030      	str	r0, [r6, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f1b8 0f0e 	cmp.w	r8, #14
 800aac8:	9306      	str	r3, [sp, #24]
 800aaca:	f200 80ed 	bhi.w	800aca8 <_dtoa_r+0x450>
 800aace:	2d00      	cmp	r5, #0
 800aad0:	f000 80ea 	beq.w	800aca8 <_dtoa_r+0x450>
 800aad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad8:	f1ba 0f00 	cmp.w	sl, #0
 800aadc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aae0:	dd77      	ble.n	800abd2 <_dtoa_r+0x37a>
 800aae2:	4a28      	ldr	r2, [pc, #160]	; (800ab84 <_dtoa_r+0x32c>)
 800aae4:	f00a 030f 	and.w	r3, sl, #15
 800aae8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800aaec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aaf0:	06f0      	lsls	r0, r6, #27
 800aaf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aafa:	d568      	bpl.n	800abce <_dtoa_r+0x376>
 800aafc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab00:	4b21      	ldr	r3, [pc, #132]	; (800ab88 <_dtoa_r+0x330>)
 800ab02:	2503      	movs	r5, #3
 800ab04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab08:	f7f5 fe10 	bl	800072c <__aeabi_ddiv>
 800ab0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab10:	f006 060f 	and.w	r6, r6, #15
 800ab14:	4f1c      	ldr	r7, [pc, #112]	; (800ab88 <_dtoa_r+0x330>)
 800ab16:	e04f      	b.n	800abb8 <_dtoa_r+0x360>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ab1e:	4453      	add	r3, sl
 800ab20:	f103 0801 	add.w	r8, r3, #1
 800ab24:	9304      	str	r3, [sp, #16]
 800ab26:	4643      	mov	r3, r8
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	bfb8      	it	lt
 800ab2c:	2301      	movlt	r3, #1
 800ab2e:	e7ba      	b.n	800aaa6 <_dtoa_r+0x24e>
 800ab30:	2300      	movs	r3, #0
 800ab32:	e7b2      	b.n	800aa9a <_dtoa_r+0x242>
 800ab34:	2300      	movs	r3, #0
 800ab36:	e7f0      	b.n	800ab1a <_dtoa_r+0x2c2>
 800ab38:	2501      	movs	r5, #1
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab3e:	931e      	str	r3, [sp, #120]	; 0x78
 800ab40:	f04f 33ff 	mov.w	r3, #4294967295
 800ab44:	2200      	movs	r2, #0
 800ab46:	9304      	str	r3, [sp, #16]
 800ab48:	4698      	mov	r8, r3
 800ab4a:	2312      	movs	r3, #18
 800ab4c:	921f      	str	r2, [sp, #124]	; 0x7c
 800ab4e:	e7aa      	b.n	800aaa6 <_dtoa_r+0x24e>
 800ab50:	2301      	movs	r3, #1
 800ab52:	9309      	str	r3, [sp, #36]	; 0x24
 800ab54:	e7f4      	b.n	800ab40 <_dtoa_r+0x2e8>
 800ab56:	bf00      	nop
 800ab58:	636f4361 	.word	0x636f4361
 800ab5c:	3fd287a7 	.word	0x3fd287a7
 800ab60:	8b60c8b3 	.word	0x8b60c8b3
 800ab64:	3fc68a28 	.word	0x3fc68a28
 800ab68:	509f79fb 	.word	0x509f79fb
 800ab6c:	3fd34413 	.word	0x3fd34413
 800ab70:	7ff00000 	.word	0x7ff00000
 800ab74:	0800d665 	.word	0x0800d665
 800ab78:	0800d65c 	.word	0x0800d65c
 800ab7c:	0800d639 	.word	0x0800d639
 800ab80:	3ff80000 	.word	0x3ff80000
 800ab84:	0800d698 	.word	0x0800d698
 800ab88:	0800d670 	.word	0x0800d670
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	9304      	str	r3, [sp, #16]
 800ab90:	4698      	mov	r8, r3
 800ab92:	461a      	mov	r2, r3
 800ab94:	e7da      	b.n	800ab4c <_dtoa_r+0x2f4>
 800ab96:	3101      	adds	r1, #1
 800ab98:	6071      	str	r1, [r6, #4]
 800ab9a:	0052      	lsls	r2, r2, #1
 800ab9c:	e787      	b.n	800aaae <_dtoa_r+0x256>
 800ab9e:	07f1      	lsls	r1, r6, #31
 800aba0:	d508      	bpl.n	800abb4 <_dtoa_r+0x35c>
 800aba2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abaa:	f7f5 fc95 	bl	80004d8 <__aeabi_dmul>
 800abae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800abb2:	3501      	adds	r5, #1
 800abb4:	1076      	asrs	r6, r6, #1
 800abb6:	3708      	adds	r7, #8
 800abb8:	2e00      	cmp	r6, #0
 800abba:	d1f0      	bne.n	800ab9e <_dtoa_r+0x346>
 800abbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800abc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abc4:	f7f5 fdb2 	bl	800072c <__aeabi_ddiv>
 800abc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abcc:	e01b      	b.n	800ac06 <_dtoa_r+0x3ae>
 800abce:	2502      	movs	r5, #2
 800abd0:	e7a0      	b.n	800ab14 <_dtoa_r+0x2bc>
 800abd2:	f000 80a4 	beq.w	800ad1e <_dtoa_r+0x4c6>
 800abd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800abda:	f1ca 0600 	rsb	r6, sl, #0
 800abde:	4ba0      	ldr	r3, [pc, #640]	; (800ae60 <_dtoa_r+0x608>)
 800abe0:	f006 020f 	and.w	r2, r6, #15
 800abe4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abec:	f7f5 fc74 	bl	80004d8 <__aeabi_dmul>
 800abf0:	2502      	movs	r5, #2
 800abf2:	2300      	movs	r3, #0
 800abf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abf8:	4f9a      	ldr	r7, [pc, #616]	; (800ae64 <_dtoa_r+0x60c>)
 800abfa:	1136      	asrs	r6, r6, #4
 800abfc:	2e00      	cmp	r6, #0
 800abfe:	f040 8083 	bne.w	800ad08 <_dtoa_r+0x4b0>
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e0      	bne.n	800abc8 <_dtoa_r+0x370>
 800ac06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 808a 	beq.w	800ad22 <_dtoa_r+0x4ca>
 800ac0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac12:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4b92      	ldr	r3, [pc, #584]	; (800ae68 <_dtoa_r+0x610>)
 800ac1e:	f7f5 fecd 	bl	80009bc <__aeabi_dcmplt>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d07d      	beq.n	800ad22 <_dtoa_r+0x4ca>
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	d07a      	beq.n	800ad22 <_dtoa_r+0x4ca>
 800ac2c:	9b04      	ldr	r3, [sp, #16]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	dd36      	ble.n	800aca0 <_dtoa_r+0x448>
 800ac32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac36:	2200      	movs	r2, #0
 800ac38:	4b8c      	ldr	r3, [pc, #560]	; (800ae6c <_dtoa_r+0x614>)
 800ac3a:	f7f5 fc4d 	bl	80004d8 <__aeabi_dmul>
 800ac3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac42:	9e04      	ldr	r6, [sp, #16]
 800ac44:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ac48:	3501      	adds	r5, #1
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f7f5 fbda 	bl	8000404 <__aeabi_i2d>
 800ac50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac54:	f7f5 fc40 	bl	80004d8 <__aeabi_dmul>
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4b85      	ldr	r3, [pc, #532]	; (800ae70 <_dtoa_r+0x618>)
 800ac5c:	f7f5 fa86 	bl	800016c <__adddf3>
 800ac60:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ac64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ac68:	950b      	str	r5, [sp, #44]	; 0x2c
 800ac6a:	2e00      	cmp	r6, #0
 800ac6c:	d15c      	bne.n	800ad28 <_dtoa_r+0x4d0>
 800ac6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac72:	2200      	movs	r2, #0
 800ac74:	4b7f      	ldr	r3, [pc, #508]	; (800ae74 <_dtoa_r+0x61c>)
 800ac76:	f7f5 fa77 	bl	8000168 <__aeabi_dsub>
 800ac7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac82:	f7f5 feb9 	bl	80009f8 <__aeabi_dcmpgt>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	f040 8281 	bne.w	800b18e <_dtoa_r+0x936>
 800ac8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac92:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ac96:	f7f5 fe91 	bl	80009bc <__aeabi_dcmplt>
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	f040 8275 	bne.w	800b18a <_dtoa_r+0x932>
 800aca0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800aca4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aca8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f2c0 814b 	blt.w	800af46 <_dtoa_r+0x6ee>
 800acb0:	f1ba 0f0e 	cmp.w	sl, #14
 800acb4:	f300 8147 	bgt.w	800af46 <_dtoa_r+0x6ee>
 800acb8:	4b69      	ldr	r3, [pc, #420]	; (800ae60 <_dtoa_r+0x608>)
 800acba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800acc6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f280 80d7 	bge.w	800ae7c <_dtoa_r+0x624>
 800acce:	f1b8 0f00 	cmp.w	r8, #0
 800acd2:	f300 80d3 	bgt.w	800ae7c <_dtoa_r+0x624>
 800acd6:	f040 8257 	bne.w	800b188 <_dtoa_r+0x930>
 800acda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acde:	2200      	movs	r2, #0
 800ace0:	4b64      	ldr	r3, [pc, #400]	; (800ae74 <_dtoa_r+0x61c>)
 800ace2:	f7f5 fbf9 	bl	80004d8 <__aeabi_dmul>
 800ace6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800acea:	f7f5 fe7b 	bl	80009e4 <__aeabi_dcmpge>
 800acee:	4646      	mov	r6, r8
 800acf0:	4647      	mov	r7, r8
 800acf2:	2800      	cmp	r0, #0
 800acf4:	f040 822d 	bne.w	800b152 <_dtoa_r+0x8fa>
 800acf8:	9b06      	ldr	r3, [sp, #24]
 800acfa:	9a06      	ldr	r2, [sp, #24]
 800acfc:	1c5d      	adds	r5, r3, #1
 800acfe:	2331      	movs	r3, #49	; 0x31
 800ad00:	f10a 0a01 	add.w	sl, sl, #1
 800ad04:	7013      	strb	r3, [r2, #0]
 800ad06:	e228      	b.n	800b15a <_dtoa_r+0x902>
 800ad08:	07f2      	lsls	r2, r6, #31
 800ad0a:	d505      	bpl.n	800ad18 <_dtoa_r+0x4c0>
 800ad0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad10:	f7f5 fbe2 	bl	80004d8 <__aeabi_dmul>
 800ad14:	2301      	movs	r3, #1
 800ad16:	3501      	adds	r5, #1
 800ad18:	1076      	asrs	r6, r6, #1
 800ad1a:	3708      	adds	r7, #8
 800ad1c:	e76e      	b.n	800abfc <_dtoa_r+0x3a4>
 800ad1e:	2502      	movs	r5, #2
 800ad20:	e771      	b.n	800ac06 <_dtoa_r+0x3ae>
 800ad22:	4657      	mov	r7, sl
 800ad24:	4646      	mov	r6, r8
 800ad26:	e790      	b.n	800ac4a <_dtoa_r+0x3f2>
 800ad28:	4b4d      	ldr	r3, [pc, #308]	; (800ae60 <_dtoa_r+0x608>)
 800ad2a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ad32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d048      	beq.n	800adca <_dtoa_r+0x572>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	494e      	ldr	r1, [pc, #312]	; (800ae78 <_dtoa_r+0x620>)
 800ad40:	f7f5 fcf4 	bl	800072c <__aeabi_ddiv>
 800ad44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad48:	f7f5 fa0e 	bl	8000168 <__aeabi_dsub>
 800ad4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad50:	9d06      	ldr	r5, [sp, #24]
 800ad52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad56:	f7f5 fe6f 	bl	8000a38 <__aeabi_d2iz>
 800ad5a:	9011      	str	r0, [sp, #68]	; 0x44
 800ad5c:	f7f5 fb52 	bl	8000404 <__aeabi_i2d>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad68:	f7f5 f9fe 	bl	8000168 <__aeabi_dsub>
 800ad6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad72:	3330      	adds	r3, #48	; 0x30
 800ad74:	f805 3b01 	strb.w	r3, [r5], #1
 800ad78:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad7c:	f7f5 fe1e 	bl	80009bc <__aeabi_dcmplt>
 800ad80:	2800      	cmp	r0, #0
 800ad82:	d163      	bne.n	800ae4c <_dtoa_r+0x5f4>
 800ad84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad88:	2000      	movs	r0, #0
 800ad8a:	4937      	ldr	r1, [pc, #220]	; (800ae68 <_dtoa_r+0x610>)
 800ad8c:	f7f5 f9ec 	bl	8000168 <__aeabi_dsub>
 800ad90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad94:	f7f5 fe12 	bl	80009bc <__aeabi_dcmplt>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	f040 80b5 	bne.w	800af08 <_dtoa_r+0x6b0>
 800ad9e:	9b06      	ldr	r3, [sp, #24]
 800ada0:	1aeb      	subs	r3, r5, r3
 800ada2:	429e      	cmp	r6, r3
 800ada4:	f77f af7c 	ble.w	800aca0 <_dtoa_r+0x448>
 800ada8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800adac:	2200      	movs	r2, #0
 800adae:	4b2f      	ldr	r3, [pc, #188]	; (800ae6c <_dtoa_r+0x614>)
 800adb0:	f7f5 fb92 	bl	80004d8 <__aeabi_dmul>
 800adb4:	2200      	movs	r2, #0
 800adb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800adba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adbe:	4b2b      	ldr	r3, [pc, #172]	; (800ae6c <_dtoa_r+0x614>)
 800adc0:	f7f5 fb8a 	bl	80004d8 <__aeabi_dmul>
 800adc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc8:	e7c3      	b.n	800ad52 <_dtoa_r+0x4fa>
 800adca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800adce:	f7f5 fb83 	bl	80004d8 <__aeabi_dmul>
 800add2:	9b06      	ldr	r3, [sp, #24]
 800add4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800add8:	199d      	adds	r5, r3, r6
 800adda:	461e      	mov	r6, r3
 800addc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ade0:	f7f5 fe2a 	bl	8000a38 <__aeabi_d2iz>
 800ade4:	9011      	str	r0, [sp, #68]	; 0x44
 800ade6:	f7f5 fb0d 	bl	8000404 <__aeabi_i2d>
 800adea:	4602      	mov	r2, r0
 800adec:	460b      	mov	r3, r1
 800adee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf2:	f7f5 f9b9 	bl	8000168 <__aeabi_dsub>
 800adf6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800adf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adfc:	3330      	adds	r3, #48	; 0x30
 800adfe:	f806 3b01 	strb.w	r3, [r6], #1
 800ae02:	42ae      	cmp	r6, r5
 800ae04:	f04f 0200 	mov.w	r2, #0
 800ae08:	d124      	bne.n	800ae54 <_dtoa_r+0x5fc>
 800ae0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ae0e:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <_dtoa_r+0x620>)
 800ae10:	f7f5 f9ac 	bl	800016c <__adddf3>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae1c:	f7f5 fdec 	bl	80009f8 <__aeabi_dcmpgt>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	d171      	bne.n	800af08 <_dtoa_r+0x6b0>
 800ae24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ae28:	2000      	movs	r0, #0
 800ae2a:	4913      	ldr	r1, [pc, #76]	; (800ae78 <_dtoa_r+0x620>)
 800ae2c:	f7f5 f99c 	bl	8000168 <__aeabi_dsub>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae38:	f7f5 fdc0 	bl	80009bc <__aeabi_dcmplt>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f43f af2f 	beq.w	800aca0 <_dtoa_r+0x448>
 800ae42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae46:	1e6a      	subs	r2, r5, #1
 800ae48:	2b30      	cmp	r3, #48	; 0x30
 800ae4a:	d001      	beq.n	800ae50 <_dtoa_r+0x5f8>
 800ae4c:	46ba      	mov	sl, r7
 800ae4e:	e04a      	b.n	800aee6 <_dtoa_r+0x68e>
 800ae50:	4615      	mov	r5, r2
 800ae52:	e7f6      	b.n	800ae42 <_dtoa_r+0x5ea>
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <_dtoa_r+0x614>)
 800ae56:	f7f5 fb3f 	bl	80004d8 <__aeabi_dmul>
 800ae5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae5e:	e7bd      	b.n	800addc <_dtoa_r+0x584>
 800ae60:	0800d698 	.word	0x0800d698
 800ae64:	0800d670 	.word	0x0800d670
 800ae68:	3ff00000 	.word	0x3ff00000
 800ae6c:	40240000 	.word	0x40240000
 800ae70:	401c0000 	.word	0x401c0000
 800ae74:	40140000 	.word	0x40140000
 800ae78:	3fe00000 	.word	0x3fe00000
 800ae7c:	9d06      	ldr	r5, [sp, #24]
 800ae7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae86:	4630      	mov	r0, r6
 800ae88:	4639      	mov	r1, r7
 800ae8a:	f7f5 fc4f 	bl	800072c <__aeabi_ddiv>
 800ae8e:	f7f5 fdd3 	bl	8000a38 <__aeabi_d2iz>
 800ae92:	4681      	mov	r9, r0
 800ae94:	f7f5 fab6 	bl	8000404 <__aeabi_i2d>
 800ae98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae9c:	f7f5 fb1c 	bl	80004d8 <__aeabi_dmul>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4630      	mov	r0, r6
 800aea6:	4639      	mov	r1, r7
 800aea8:	f7f5 f95e 	bl	8000168 <__aeabi_dsub>
 800aeac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800aeb0:	f805 6b01 	strb.w	r6, [r5], #1
 800aeb4:	9e06      	ldr	r6, [sp, #24]
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	1bae      	subs	r6, r5, r6
 800aeba:	45b0      	cmp	r8, r6
 800aebc:	460b      	mov	r3, r1
 800aebe:	d135      	bne.n	800af2c <_dtoa_r+0x6d4>
 800aec0:	f7f5 f954 	bl	800016c <__adddf3>
 800aec4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	f7f5 fd94 	bl	80009f8 <__aeabi_dcmpgt>
 800aed0:	b9c8      	cbnz	r0, 800af06 <_dtoa_r+0x6ae>
 800aed2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aed6:	4630      	mov	r0, r6
 800aed8:	4639      	mov	r1, r7
 800aeda:	f7f5 fd65 	bl	80009a8 <__aeabi_dcmpeq>
 800aede:	b110      	cbz	r0, 800aee6 <_dtoa_r+0x68e>
 800aee0:	f019 0f01 	tst.w	r9, #1
 800aee4:	d10f      	bne.n	800af06 <_dtoa_r+0x6ae>
 800aee6:	4659      	mov	r1, fp
 800aee8:	4620      	mov	r0, r4
 800aeea:	f000 facc 	bl	800b486 <_Bfree>
 800aeee:	2300      	movs	r3, #0
 800aef0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aef2:	702b      	strb	r3, [r5, #0]
 800aef4:	f10a 0301 	add.w	r3, sl, #1
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f43f acf3 	beq.w	800a8e8 <_dtoa_r+0x90>
 800af02:	601d      	str	r5, [r3, #0]
 800af04:	e4f0      	b.n	800a8e8 <_dtoa_r+0x90>
 800af06:	4657      	mov	r7, sl
 800af08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800af0c:	1e6b      	subs	r3, r5, #1
 800af0e:	2a39      	cmp	r2, #57	; 0x39
 800af10:	d106      	bne.n	800af20 <_dtoa_r+0x6c8>
 800af12:	9a06      	ldr	r2, [sp, #24]
 800af14:	429a      	cmp	r2, r3
 800af16:	d107      	bne.n	800af28 <_dtoa_r+0x6d0>
 800af18:	2330      	movs	r3, #48	; 0x30
 800af1a:	7013      	strb	r3, [r2, #0]
 800af1c:	4613      	mov	r3, r2
 800af1e:	3701      	adds	r7, #1
 800af20:	781a      	ldrb	r2, [r3, #0]
 800af22:	3201      	adds	r2, #1
 800af24:	701a      	strb	r2, [r3, #0]
 800af26:	e791      	b.n	800ae4c <_dtoa_r+0x5f4>
 800af28:	461d      	mov	r5, r3
 800af2a:	e7ed      	b.n	800af08 <_dtoa_r+0x6b0>
 800af2c:	2200      	movs	r2, #0
 800af2e:	4b99      	ldr	r3, [pc, #612]	; (800b194 <_dtoa_r+0x93c>)
 800af30:	f7f5 fad2 	bl	80004d8 <__aeabi_dmul>
 800af34:	2200      	movs	r2, #0
 800af36:	2300      	movs	r3, #0
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	f7f5 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 800af40:	2800      	cmp	r0, #0
 800af42:	d09e      	beq.n	800ae82 <_dtoa_r+0x62a>
 800af44:	e7cf      	b.n	800aee6 <_dtoa_r+0x68e>
 800af46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af48:	2a00      	cmp	r2, #0
 800af4a:	f000 8088 	beq.w	800b05e <_dtoa_r+0x806>
 800af4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800af50:	2a01      	cmp	r2, #1
 800af52:	dc6d      	bgt.n	800b030 <_dtoa_r+0x7d8>
 800af54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af56:	2a00      	cmp	r2, #0
 800af58:	d066      	beq.n	800b028 <_dtoa_r+0x7d0>
 800af5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af5e:	464d      	mov	r5, r9
 800af60:	9e08      	ldr	r6, [sp, #32]
 800af62:	9a07      	ldr	r2, [sp, #28]
 800af64:	2101      	movs	r1, #1
 800af66:	441a      	add	r2, r3
 800af68:	4620      	mov	r0, r4
 800af6a:	4499      	add	r9, r3
 800af6c:	9207      	str	r2, [sp, #28]
 800af6e:	f000 fb2a 	bl	800b5c6 <__i2b>
 800af72:	4607      	mov	r7, r0
 800af74:	2d00      	cmp	r5, #0
 800af76:	dd0b      	ble.n	800af90 <_dtoa_r+0x738>
 800af78:	9b07      	ldr	r3, [sp, #28]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	dd08      	ble.n	800af90 <_dtoa_r+0x738>
 800af7e:	42ab      	cmp	r3, r5
 800af80:	bfa8      	it	ge
 800af82:	462b      	movge	r3, r5
 800af84:	9a07      	ldr	r2, [sp, #28]
 800af86:	eba9 0903 	sub.w	r9, r9, r3
 800af8a:	1aed      	subs	r5, r5, r3
 800af8c:	1ad3      	subs	r3, r2, r3
 800af8e:	9307      	str	r3, [sp, #28]
 800af90:	9b08      	ldr	r3, [sp, #32]
 800af92:	b1eb      	cbz	r3, 800afd0 <_dtoa_r+0x778>
 800af94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af96:	2b00      	cmp	r3, #0
 800af98:	d065      	beq.n	800b066 <_dtoa_r+0x80e>
 800af9a:	b18e      	cbz	r6, 800afc0 <_dtoa_r+0x768>
 800af9c:	4639      	mov	r1, r7
 800af9e:	4632      	mov	r2, r6
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 fbaf 	bl	800b704 <__pow5mult>
 800afa6:	465a      	mov	r2, fp
 800afa8:	4601      	mov	r1, r0
 800afaa:	4607      	mov	r7, r0
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fb13 	bl	800b5d8 <__multiply>
 800afb2:	4659      	mov	r1, fp
 800afb4:	900a      	str	r0, [sp, #40]	; 0x28
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 fa65 	bl	800b486 <_Bfree>
 800afbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbe:	469b      	mov	fp, r3
 800afc0:	9b08      	ldr	r3, [sp, #32]
 800afc2:	1b9a      	subs	r2, r3, r6
 800afc4:	d004      	beq.n	800afd0 <_dtoa_r+0x778>
 800afc6:	4659      	mov	r1, fp
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 fb9b 	bl	800b704 <__pow5mult>
 800afce:	4683      	mov	fp, r0
 800afd0:	2101      	movs	r1, #1
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 faf7 	bl	800b5c6 <__i2b>
 800afd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afda:	4606      	mov	r6, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f000 81c6 	beq.w	800b36e <_dtoa_r+0xb16>
 800afe2:	461a      	mov	r2, r3
 800afe4:	4601      	mov	r1, r0
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 fb8c 	bl	800b704 <__pow5mult>
 800afec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800afee:	4606      	mov	r6, r0
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	dc3e      	bgt.n	800b072 <_dtoa_r+0x81a>
 800aff4:	9b02      	ldr	r3, [sp, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d137      	bne.n	800b06a <_dtoa_r+0x812>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b000:	2b00      	cmp	r3, #0
 800b002:	d134      	bne.n	800b06e <_dtoa_r+0x816>
 800b004:	9b03      	ldr	r3, [sp, #12]
 800b006:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b00a:	0d1b      	lsrs	r3, r3, #20
 800b00c:	051b      	lsls	r3, r3, #20
 800b00e:	b12b      	cbz	r3, 800b01c <_dtoa_r+0x7c4>
 800b010:	9b07      	ldr	r3, [sp, #28]
 800b012:	f109 0901 	add.w	r9, r9, #1
 800b016:	3301      	adds	r3, #1
 800b018:	9307      	str	r3, [sp, #28]
 800b01a:	2301      	movs	r3, #1
 800b01c:	9308      	str	r3, [sp, #32]
 800b01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b020:	2b00      	cmp	r3, #0
 800b022:	d128      	bne.n	800b076 <_dtoa_r+0x81e>
 800b024:	2001      	movs	r0, #1
 800b026:	e02e      	b.n	800b086 <_dtoa_r+0x82e>
 800b028:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b02a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b02e:	e796      	b.n	800af5e <_dtoa_r+0x706>
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	f108 36ff 	add.w	r6, r8, #4294967295
 800b036:	42b3      	cmp	r3, r6
 800b038:	bfb7      	itett	lt
 800b03a:	9b08      	ldrlt	r3, [sp, #32]
 800b03c:	1b9e      	subge	r6, r3, r6
 800b03e:	1af2      	sublt	r2, r6, r3
 800b040:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800b042:	bfbf      	itttt	lt
 800b044:	9608      	strlt	r6, [sp, #32]
 800b046:	189b      	addlt	r3, r3, r2
 800b048:	930c      	strlt	r3, [sp, #48]	; 0x30
 800b04a:	2600      	movlt	r6, #0
 800b04c:	f1b8 0f00 	cmp.w	r8, #0
 800b050:	bfb9      	ittee	lt
 800b052:	eba9 0508 	sublt.w	r5, r9, r8
 800b056:	2300      	movlt	r3, #0
 800b058:	464d      	movge	r5, r9
 800b05a:	4643      	movge	r3, r8
 800b05c:	e781      	b.n	800af62 <_dtoa_r+0x70a>
 800b05e:	9e08      	ldr	r6, [sp, #32]
 800b060:	464d      	mov	r5, r9
 800b062:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b064:	e786      	b.n	800af74 <_dtoa_r+0x71c>
 800b066:	9a08      	ldr	r2, [sp, #32]
 800b068:	e7ad      	b.n	800afc6 <_dtoa_r+0x76e>
 800b06a:	2300      	movs	r3, #0
 800b06c:	e7d6      	b.n	800b01c <_dtoa_r+0x7c4>
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	e7d4      	b.n	800b01c <_dtoa_r+0x7c4>
 800b072:	2300      	movs	r3, #0
 800b074:	9308      	str	r3, [sp, #32]
 800b076:	6933      	ldr	r3, [r6, #16]
 800b078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b07c:	6918      	ldr	r0, [r3, #16]
 800b07e:	f000 fa54 	bl	800b52a <__hi0bits>
 800b082:	f1c0 0020 	rsb	r0, r0, #32
 800b086:	9b07      	ldr	r3, [sp, #28]
 800b088:	4418      	add	r0, r3
 800b08a:	f010 001f 	ands.w	r0, r0, #31
 800b08e:	d047      	beq.n	800b120 <_dtoa_r+0x8c8>
 800b090:	f1c0 0320 	rsb	r3, r0, #32
 800b094:	2b04      	cmp	r3, #4
 800b096:	dd3b      	ble.n	800b110 <_dtoa_r+0x8b8>
 800b098:	9b07      	ldr	r3, [sp, #28]
 800b09a:	f1c0 001c 	rsb	r0, r0, #28
 800b09e:	4481      	add	r9, r0
 800b0a0:	4405      	add	r5, r0
 800b0a2:	4403      	add	r3, r0
 800b0a4:	9307      	str	r3, [sp, #28]
 800b0a6:	f1b9 0f00 	cmp.w	r9, #0
 800b0aa:	dd05      	ble.n	800b0b8 <_dtoa_r+0x860>
 800b0ac:	4659      	mov	r1, fp
 800b0ae:	464a      	mov	r2, r9
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fb75 	bl	800b7a0 <__lshift>
 800b0b6:	4683      	mov	fp, r0
 800b0b8:	9b07      	ldr	r3, [sp, #28]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dd05      	ble.n	800b0ca <_dtoa_r+0x872>
 800b0be:	4631      	mov	r1, r6
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fb6c 	bl	800b7a0 <__lshift>
 800b0c8:	4606      	mov	r6, r0
 800b0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0cc:	b353      	cbz	r3, 800b124 <_dtoa_r+0x8cc>
 800b0ce:	4631      	mov	r1, r6
 800b0d0:	4658      	mov	r0, fp
 800b0d2:	f000 fbb9 	bl	800b848 <__mcmp>
 800b0d6:	2800      	cmp	r0, #0
 800b0d8:	da24      	bge.n	800b124 <_dtoa_r+0x8cc>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	4659      	mov	r1, fp
 800b0de:	220a      	movs	r2, #10
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 f9e7 	bl	800b4b4 <__multadd>
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0ec:	4683      	mov	fp, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 8144 	beq.w	800b37c <_dtoa_r+0xb24>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	220a      	movs	r2, #10
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 f9da 	bl	800b4b4 <__multadd>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	4607      	mov	r7, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	dc4d      	bgt.n	800b1a4 <_dtoa_r+0x94c>
 800b108:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	dd4a      	ble.n	800b1a4 <_dtoa_r+0x94c>
 800b10e:	e011      	b.n	800b134 <_dtoa_r+0x8dc>
 800b110:	d0c9      	beq.n	800b0a6 <_dtoa_r+0x84e>
 800b112:	9a07      	ldr	r2, [sp, #28]
 800b114:	331c      	adds	r3, #28
 800b116:	441a      	add	r2, r3
 800b118:	4499      	add	r9, r3
 800b11a:	441d      	add	r5, r3
 800b11c:	4613      	mov	r3, r2
 800b11e:	e7c1      	b.n	800b0a4 <_dtoa_r+0x84c>
 800b120:	4603      	mov	r3, r0
 800b122:	e7f6      	b.n	800b112 <_dtoa_r+0x8ba>
 800b124:	f1b8 0f00 	cmp.w	r8, #0
 800b128:	dc36      	bgt.n	800b198 <_dtoa_r+0x940>
 800b12a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b12c:	2b02      	cmp	r3, #2
 800b12e:	dd33      	ble.n	800b198 <_dtoa_r+0x940>
 800b130:	f8cd 8010 	str.w	r8, [sp, #16]
 800b134:	9b04      	ldr	r3, [sp, #16]
 800b136:	b963      	cbnz	r3, 800b152 <_dtoa_r+0x8fa>
 800b138:	4631      	mov	r1, r6
 800b13a:	2205      	movs	r2, #5
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 f9b9 	bl	800b4b4 <__multadd>
 800b142:	4601      	mov	r1, r0
 800b144:	4606      	mov	r6, r0
 800b146:	4658      	mov	r0, fp
 800b148:	f000 fb7e 	bl	800b848 <__mcmp>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f73f add3 	bgt.w	800acf8 <_dtoa_r+0x4a0>
 800b152:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b154:	9d06      	ldr	r5, [sp, #24]
 800b156:	ea6f 0a03 	mvn.w	sl, r3
 800b15a:	f04f 0900 	mov.w	r9, #0
 800b15e:	4631      	mov	r1, r6
 800b160:	4620      	mov	r0, r4
 800b162:	f000 f990 	bl	800b486 <_Bfree>
 800b166:	2f00      	cmp	r7, #0
 800b168:	f43f aebd 	beq.w	800aee6 <_dtoa_r+0x68e>
 800b16c:	f1b9 0f00 	cmp.w	r9, #0
 800b170:	d005      	beq.n	800b17e <_dtoa_r+0x926>
 800b172:	45b9      	cmp	r9, r7
 800b174:	d003      	beq.n	800b17e <_dtoa_r+0x926>
 800b176:	4649      	mov	r1, r9
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 f984 	bl	800b486 <_Bfree>
 800b17e:	4639      	mov	r1, r7
 800b180:	4620      	mov	r0, r4
 800b182:	f000 f980 	bl	800b486 <_Bfree>
 800b186:	e6ae      	b.n	800aee6 <_dtoa_r+0x68e>
 800b188:	2600      	movs	r6, #0
 800b18a:	4637      	mov	r7, r6
 800b18c:	e7e1      	b.n	800b152 <_dtoa_r+0x8fa>
 800b18e:	46ba      	mov	sl, r7
 800b190:	4637      	mov	r7, r6
 800b192:	e5b1      	b.n	800acf8 <_dtoa_r+0x4a0>
 800b194:	40240000 	.word	0x40240000
 800b198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b19a:	f8cd 8010 	str.w	r8, [sp, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	f000 80f3 	beq.w	800b38a <_dtoa_r+0xb32>
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	dd05      	ble.n	800b1b4 <_dtoa_r+0x95c>
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 faf7 	bl	800b7a0 <__lshift>
 800b1b2:	4607      	mov	r7, r0
 800b1b4:	9b08      	ldr	r3, [sp, #32]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d04c      	beq.n	800b254 <_dtoa_r+0x9fc>
 800b1ba:	6879      	ldr	r1, [r7, #4]
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 f92e 	bl	800b41e <_Balloc>
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	f107 010c 	add.w	r1, r7, #12
 800b1ca:	3202      	adds	r2, #2
 800b1cc:	0092      	lsls	r2, r2, #2
 800b1ce:	300c      	adds	r0, #12
 800b1d0:	f000 f91a 	bl	800b408 <memcpy>
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4620      	mov	r0, r4
 800b1da:	f000 fae1 	bl	800b7a0 <__lshift>
 800b1de:	46b9      	mov	r9, r7
 800b1e0:	4607      	mov	r7, r0
 800b1e2:	9b06      	ldr	r3, [sp, #24]
 800b1e4:	9307      	str	r3, [sp, #28]
 800b1e6:	9b02      	ldr	r3, [sp, #8]
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	9308      	str	r3, [sp, #32]
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4658      	mov	r0, fp
 800b1f2:	f7ff faa3 	bl	800a73c <quorem>
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b1fe:	4658      	mov	r0, fp
 800b200:	f000 fb22 	bl	800b848 <__mcmp>
 800b204:	463a      	mov	r2, r7
 800b206:	9002      	str	r0, [sp, #8]
 800b208:	4631      	mov	r1, r6
 800b20a:	4620      	mov	r0, r4
 800b20c:	f000 fb36 	bl	800b87c <__mdiff>
 800b210:	68c3      	ldr	r3, [r0, #12]
 800b212:	4602      	mov	r2, r0
 800b214:	bb03      	cbnz	r3, 800b258 <_dtoa_r+0xa00>
 800b216:	4601      	mov	r1, r0
 800b218:	9009      	str	r0, [sp, #36]	; 0x24
 800b21a:	4658      	mov	r0, fp
 800b21c:	f000 fb14 	bl	800b848 <__mcmp>
 800b220:	4603      	mov	r3, r0
 800b222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b224:	4611      	mov	r1, r2
 800b226:	4620      	mov	r0, r4
 800b228:	9309      	str	r3, [sp, #36]	; 0x24
 800b22a:	f000 f92c 	bl	800b486 <_Bfree>
 800b22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b230:	b9a3      	cbnz	r3, 800b25c <_dtoa_r+0xa04>
 800b232:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b234:	b992      	cbnz	r2, 800b25c <_dtoa_r+0xa04>
 800b236:	9a08      	ldr	r2, [sp, #32]
 800b238:	b982      	cbnz	r2, 800b25c <_dtoa_r+0xa04>
 800b23a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b23e:	d029      	beq.n	800b294 <_dtoa_r+0xa3c>
 800b240:	9b02      	ldr	r3, [sp, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	dd01      	ble.n	800b24a <_dtoa_r+0x9f2>
 800b246:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b24a:	9b07      	ldr	r3, [sp, #28]
 800b24c:	1c5d      	adds	r5, r3, #1
 800b24e:	f883 8000 	strb.w	r8, [r3]
 800b252:	e784      	b.n	800b15e <_dtoa_r+0x906>
 800b254:	4638      	mov	r0, r7
 800b256:	e7c2      	b.n	800b1de <_dtoa_r+0x986>
 800b258:	2301      	movs	r3, #1
 800b25a:	e7e3      	b.n	800b224 <_dtoa_r+0x9cc>
 800b25c:	9a02      	ldr	r2, [sp, #8]
 800b25e:	2a00      	cmp	r2, #0
 800b260:	db04      	blt.n	800b26c <_dtoa_r+0xa14>
 800b262:	d123      	bne.n	800b2ac <_dtoa_r+0xa54>
 800b264:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b266:	bb0a      	cbnz	r2, 800b2ac <_dtoa_r+0xa54>
 800b268:	9a08      	ldr	r2, [sp, #32]
 800b26a:	b9fa      	cbnz	r2, 800b2ac <_dtoa_r+0xa54>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	ddec      	ble.n	800b24a <_dtoa_r+0x9f2>
 800b270:	4659      	mov	r1, fp
 800b272:	2201      	movs	r2, #1
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fa93 	bl	800b7a0 <__lshift>
 800b27a:	4631      	mov	r1, r6
 800b27c:	4683      	mov	fp, r0
 800b27e:	f000 fae3 	bl	800b848 <__mcmp>
 800b282:	2800      	cmp	r0, #0
 800b284:	dc03      	bgt.n	800b28e <_dtoa_r+0xa36>
 800b286:	d1e0      	bne.n	800b24a <_dtoa_r+0x9f2>
 800b288:	f018 0f01 	tst.w	r8, #1
 800b28c:	d0dd      	beq.n	800b24a <_dtoa_r+0x9f2>
 800b28e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b292:	d1d8      	bne.n	800b246 <_dtoa_r+0x9ee>
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	9a07      	ldr	r2, [sp, #28]
 800b298:	1c5d      	adds	r5, r3, #1
 800b29a:	2339      	movs	r3, #57	; 0x39
 800b29c:	7013      	strb	r3, [r2, #0]
 800b29e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2a2:	1e6a      	subs	r2, r5, #1
 800b2a4:	2b39      	cmp	r3, #57	; 0x39
 800b2a6:	d04d      	beq.n	800b344 <_dtoa_r+0xaec>
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	e052      	b.n	800b352 <_dtoa_r+0xafa>
 800b2ac:	9a07      	ldr	r2, [sp, #28]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f102 0501 	add.w	r5, r2, #1
 800b2b4:	dd06      	ble.n	800b2c4 <_dtoa_r+0xa6c>
 800b2b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b2ba:	d0eb      	beq.n	800b294 <_dtoa_r+0xa3c>
 800b2bc:	f108 0801 	add.w	r8, r8, #1
 800b2c0:	9b07      	ldr	r3, [sp, #28]
 800b2c2:	e7c4      	b.n	800b24e <_dtoa_r+0x9f6>
 800b2c4:	9b06      	ldr	r3, [sp, #24]
 800b2c6:	9a04      	ldr	r2, [sp, #16]
 800b2c8:	1aeb      	subs	r3, r5, r3
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 800b2d0:	d021      	beq.n	800b316 <_dtoa_r+0xabe>
 800b2d2:	4659      	mov	r1, fp
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	220a      	movs	r2, #10
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 f8eb 	bl	800b4b4 <__multadd>
 800b2de:	45b9      	cmp	r9, r7
 800b2e0:	4683      	mov	fp, r0
 800b2e2:	f04f 0300 	mov.w	r3, #0
 800b2e6:	f04f 020a 	mov.w	r2, #10
 800b2ea:	4649      	mov	r1, r9
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	d105      	bne.n	800b2fc <_dtoa_r+0xaa4>
 800b2f0:	f000 f8e0 	bl	800b4b4 <__multadd>
 800b2f4:	4681      	mov	r9, r0
 800b2f6:	4607      	mov	r7, r0
 800b2f8:	9507      	str	r5, [sp, #28]
 800b2fa:	e778      	b.n	800b1ee <_dtoa_r+0x996>
 800b2fc:	f000 f8da 	bl	800b4b4 <__multadd>
 800b300:	4639      	mov	r1, r7
 800b302:	4681      	mov	r9, r0
 800b304:	2300      	movs	r3, #0
 800b306:	220a      	movs	r2, #10
 800b308:	4620      	mov	r0, r4
 800b30a:	f000 f8d3 	bl	800b4b4 <__multadd>
 800b30e:	4607      	mov	r7, r0
 800b310:	e7f2      	b.n	800b2f8 <_dtoa_r+0xaa0>
 800b312:	f04f 0900 	mov.w	r9, #0
 800b316:	4659      	mov	r1, fp
 800b318:	2201      	movs	r2, #1
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fa40 	bl	800b7a0 <__lshift>
 800b320:	4631      	mov	r1, r6
 800b322:	4683      	mov	fp, r0
 800b324:	f000 fa90 	bl	800b848 <__mcmp>
 800b328:	2800      	cmp	r0, #0
 800b32a:	dcb8      	bgt.n	800b29e <_dtoa_r+0xa46>
 800b32c:	d102      	bne.n	800b334 <_dtoa_r+0xadc>
 800b32e:	f018 0f01 	tst.w	r8, #1
 800b332:	d1b4      	bne.n	800b29e <_dtoa_r+0xa46>
 800b334:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b338:	1e6a      	subs	r2, r5, #1
 800b33a:	2b30      	cmp	r3, #48	; 0x30
 800b33c:	f47f af0f 	bne.w	800b15e <_dtoa_r+0x906>
 800b340:	4615      	mov	r5, r2
 800b342:	e7f7      	b.n	800b334 <_dtoa_r+0xadc>
 800b344:	9b06      	ldr	r3, [sp, #24]
 800b346:	4293      	cmp	r3, r2
 800b348:	d105      	bne.n	800b356 <_dtoa_r+0xafe>
 800b34a:	2331      	movs	r3, #49	; 0x31
 800b34c:	9a06      	ldr	r2, [sp, #24]
 800b34e:	f10a 0a01 	add.w	sl, sl, #1
 800b352:	7013      	strb	r3, [r2, #0]
 800b354:	e703      	b.n	800b15e <_dtoa_r+0x906>
 800b356:	4615      	mov	r5, r2
 800b358:	e7a1      	b.n	800b29e <_dtoa_r+0xa46>
 800b35a:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <_dtoa_r+0xb60>)
 800b35c:	f7ff bae1 	b.w	800a922 <_dtoa_r+0xca>
 800b360:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b362:	2b00      	cmp	r3, #0
 800b364:	f47f aabb 	bne.w	800a8de <_dtoa_r+0x86>
 800b368:	4b14      	ldr	r3, [pc, #80]	; (800b3bc <_dtoa_r+0xb64>)
 800b36a:	f7ff bada 	b.w	800a922 <_dtoa_r+0xca>
 800b36e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b370:	2b01      	cmp	r3, #1
 800b372:	f77f ae3f 	ble.w	800aff4 <_dtoa_r+0x79c>
 800b376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b378:	9308      	str	r3, [sp, #32]
 800b37a:	e653      	b.n	800b024 <_dtoa_r+0x7cc>
 800b37c:	9b04      	ldr	r3, [sp, #16]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	dc03      	bgt.n	800b38a <_dtoa_r+0xb32>
 800b382:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b384:	2b02      	cmp	r3, #2
 800b386:	f73f aed5 	bgt.w	800b134 <_dtoa_r+0x8dc>
 800b38a:	9d06      	ldr	r5, [sp, #24]
 800b38c:	4631      	mov	r1, r6
 800b38e:	4658      	mov	r0, fp
 800b390:	f7ff f9d4 	bl	800a73c <quorem>
 800b394:	9b06      	ldr	r3, [sp, #24]
 800b396:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b39a:	f805 8b01 	strb.w	r8, [r5], #1
 800b39e:	9a04      	ldr	r2, [sp, #16]
 800b3a0:	1aeb      	subs	r3, r5, r3
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	ddb5      	ble.n	800b312 <_dtoa_r+0xaba>
 800b3a6:	4659      	mov	r1, fp
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	220a      	movs	r2, #10
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 f881 	bl	800b4b4 <__multadd>
 800b3b2:	4683      	mov	fp, r0
 800b3b4:	e7ea      	b.n	800b38c <_dtoa_r+0xb34>
 800b3b6:	bf00      	nop
 800b3b8:	0800d638 	.word	0x0800d638
 800b3bc:	0800d65c 	.word	0x0800d65c

0800b3c0 <_localeconv_r>:
 800b3c0:	4b04      	ldr	r3, [pc, #16]	; (800b3d4 <_localeconv_r+0x14>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	6a18      	ldr	r0, [r3, #32]
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <_localeconv_r+0x18>)
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	bf08      	it	eq
 800b3cc:	4618      	moveq	r0, r3
 800b3ce:	30f0      	adds	r0, #240	; 0xf0
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	2000003c 	.word	0x2000003c
 800b3d8:	200000a0 	.word	0x200000a0

0800b3dc <malloc>:
 800b3dc:	4b02      	ldr	r3, [pc, #8]	; (800b3e8 <malloc+0xc>)
 800b3de:	4601      	mov	r1, r0
 800b3e0:	6818      	ldr	r0, [r3, #0]
 800b3e2:	f000 bb53 	b.w	800ba8c <_malloc_r>
 800b3e6:	bf00      	nop
 800b3e8:	2000003c 	.word	0x2000003c

0800b3ec <memchr>:
 800b3ec:	b510      	push	{r4, lr}
 800b3ee:	b2c9      	uxtb	r1, r1
 800b3f0:	4402      	add	r2, r0
 800b3f2:	4290      	cmp	r0, r2
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	d101      	bne.n	800b3fc <memchr+0x10>
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e003      	b.n	800b404 <memchr+0x18>
 800b3fc:	781c      	ldrb	r4, [r3, #0]
 800b3fe:	3001      	adds	r0, #1
 800b400:	428c      	cmp	r4, r1
 800b402:	d1f6      	bne.n	800b3f2 <memchr+0x6>
 800b404:	4618      	mov	r0, r3
 800b406:	bd10      	pop	{r4, pc}

0800b408 <memcpy>:
 800b408:	b510      	push	{r4, lr}
 800b40a:	1e43      	subs	r3, r0, #1
 800b40c:	440a      	add	r2, r1
 800b40e:	4291      	cmp	r1, r2
 800b410:	d100      	bne.n	800b414 <memcpy+0xc>
 800b412:	bd10      	pop	{r4, pc}
 800b414:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b41c:	e7f7      	b.n	800b40e <memcpy+0x6>

0800b41e <_Balloc>:
 800b41e:	b570      	push	{r4, r5, r6, lr}
 800b420:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b422:	4604      	mov	r4, r0
 800b424:	460e      	mov	r6, r1
 800b426:	b93d      	cbnz	r5, 800b438 <_Balloc+0x1a>
 800b428:	2010      	movs	r0, #16
 800b42a:	f7ff ffd7 	bl	800b3dc <malloc>
 800b42e:	6260      	str	r0, [r4, #36]	; 0x24
 800b430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b434:	6005      	str	r5, [r0, #0]
 800b436:	60c5      	str	r5, [r0, #12]
 800b438:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b43a:	68eb      	ldr	r3, [r5, #12]
 800b43c:	b183      	cbz	r3, 800b460 <_Balloc+0x42>
 800b43e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b446:	b9b8      	cbnz	r0, 800b478 <_Balloc+0x5a>
 800b448:	2101      	movs	r1, #1
 800b44a:	fa01 f506 	lsl.w	r5, r1, r6
 800b44e:	1d6a      	adds	r2, r5, #5
 800b450:	0092      	lsls	r2, r2, #2
 800b452:	4620      	mov	r0, r4
 800b454:	f000 fabf 	bl	800b9d6 <_calloc_r>
 800b458:	b160      	cbz	r0, 800b474 <_Balloc+0x56>
 800b45a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b45e:	e00e      	b.n	800b47e <_Balloc+0x60>
 800b460:	2221      	movs	r2, #33	; 0x21
 800b462:	2104      	movs	r1, #4
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fab6 	bl	800b9d6 <_calloc_r>
 800b46a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b46c:	60e8      	str	r0, [r5, #12]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e4      	bne.n	800b43e <_Balloc+0x20>
 800b474:	2000      	movs	r0, #0
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	6802      	ldr	r2, [r0, #0]
 800b47a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b47e:	2300      	movs	r3, #0
 800b480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b484:	e7f7      	b.n	800b476 <_Balloc+0x58>

0800b486 <_Bfree>:
 800b486:	b570      	push	{r4, r5, r6, lr}
 800b488:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b48a:	4606      	mov	r6, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	b93c      	cbnz	r4, 800b4a0 <_Bfree+0x1a>
 800b490:	2010      	movs	r0, #16
 800b492:	f7ff ffa3 	bl	800b3dc <malloc>
 800b496:	6270      	str	r0, [r6, #36]	; 0x24
 800b498:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b49c:	6004      	str	r4, [r0, #0]
 800b49e:	60c4      	str	r4, [r0, #12]
 800b4a0:	b13d      	cbz	r5, 800b4b2 <_Bfree+0x2c>
 800b4a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b4a4:	686a      	ldr	r2, [r5, #4]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4ac:	6029      	str	r1, [r5, #0]
 800b4ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b4b2:	bd70      	pop	{r4, r5, r6, pc}

0800b4b4 <__multadd>:
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	461f      	mov	r7, r3
 800b4ba:	4606      	mov	r6, r0
 800b4bc:	460c      	mov	r4, r1
 800b4be:	2300      	movs	r3, #0
 800b4c0:	690d      	ldr	r5, [r1, #16]
 800b4c2:	f101 0c14 	add.w	ip, r1, #20
 800b4c6:	f8dc 0000 	ldr.w	r0, [ip]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	b281      	uxth	r1, r0
 800b4ce:	fb02 7101 	mla	r1, r2, r1, r7
 800b4d2:	0c00      	lsrs	r0, r0, #16
 800b4d4:	0c0f      	lsrs	r7, r1, #16
 800b4d6:	fb02 7000 	mla	r0, r2, r0, r7
 800b4da:	b289      	uxth	r1, r1
 800b4dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b4e0:	429d      	cmp	r5, r3
 800b4e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b4e6:	f84c 1b04 	str.w	r1, [ip], #4
 800b4ea:	dcec      	bgt.n	800b4c6 <__multadd+0x12>
 800b4ec:	b1d7      	cbz	r7, 800b524 <__multadd+0x70>
 800b4ee:	68a3      	ldr	r3, [r4, #8]
 800b4f0:	42ab      	cmp	r3, r5
 800b4f2:	dc12      	bgt.n	800b51a <__multadd+0x66>
 800b4f4:	6861      	ldr	r1, [r4, #4]
 800b4f6:	4630      	mov	r0, r6
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	f7ff ff90 	bl	800b41e <_Balloc>
 800b4fe:	4680      	mov	r8, r0
 800b500:	6922      	ldr	r2, [r4, #16]
 800b502:	f104 010c 	add.w	r1, r4, #12
 800b506:	3202      	adds	r2, #2
 800b508:	0092      	lsls	r2, r2, #2
 800b50a:	300c      	adds	r0, #12
 800b50c:	f7ff ff7c 	bl	800b408 <memcpy>
 800b510:	4621      	mov	r1, r4
 800b512:	4630      	mov	r0, r6
 800b514:	f7ff ffb7 	bl	800b486 <_Bfree>
 800b518:	4644      	mov	r4, r8
 800b51a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b51e:	3501      	adds	r5, #1
 800b520:	615f      	str	r7, [r3, #20]
 800b522:	6125      	str	r5, [r4, #16]
 800b524:	4620      	mov	r0, r4
 800b526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b52a <__hi0bits>:
 800b52a:	0c02      	lsrs	r2, r0, #16
 800b52c:	0412      	lsls	r2, r2, #16
 800b52e:	4603      	mov	r3, r0
 800b530:	b9b2      	cbnz	r2, 800b560 <__hi0bits+0x36>
 800b532:	0403      	lsls	r3, r0, #16
 800b534:	2010      	movs	r0, #16
 800b536:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b53a:	bf04      	itt	eq
 800b53c:	021b      	lsleq	r3, r3, #8
 800b53e:	3008      	addeq	r0, #8
 800b540:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b544:	bf04      	itt	eq
 800b546:	011b      	lsleq	r3, r3, #4
 800b548:	3004      	addeq	r0, #4
 800b54a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b54e:	bf04      	itt	eq
 800b550:	009b      	lsleq	r3, r3, #2
 800b552:	3002      	addeq	r0, #2
 800b554:	2b00      	cmp	r3, #0
 800b556:	db06      	blt.n	800b566 <__hi0bits+0x3c>
 800b558:	005b      	lsls	r3, r3, #1
 800b55a:	d503      	bpl.n	800b564 <__hi0bits+0x3a>
 800b55c:	3001      	adds	r0, #1
 800b55e:	4770      	bx	lr
 800b560:	2000      	movs	r0, #0
 800b562:	e7e8      	b.n	800b536 <__hi0bits+0xc>
 800b564:	2020      	movs	r0, #32
 800b566:	4770      	bx	lr

0800b568 <__lo0bits>:
 800b568:	6803      	ldr	r3, [r0, #0]
 800b56a:	4601      	mov	r1, r0
 800b56c:	f013 0207 	ands.w	r2, r3, #7
 800b570:	d00b      	beq.n	800b58a <__lo0bits+0x22>
 800b572:	07da      	lsls	r2, r3, #31
 800b574:	d423      	bmi.n	800b5be <__lo0bits+0x56>
 800b576:	0798      	lsls	r0, r3, #30
 800b578:	bf49      	itett	mi
 800b57a:	085b      	lsrmi	r3, r3, #1
 800b57c:	089b      	lsrpl	r3, r3, #2
 800b57e:	2001      	movmi	r0, #1
 800b580:	600b      	strmi	r3, [r1, #0]
 800b582:	bf5c      	itt	pl
 800b584:	600b      	strpl	r3, [r1, #0]
 800b586:	2002      	movpl	r0, #2
 800b588:	4770      	bx	lr
 800b58a:	b298      	uxth	r0, r3
 800b58c:	b9a8      	cbnz	r0, 800b5ba <__lo0bits+0x52>
 800b58e:	2010      	movs	r0, #16
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b596:	bf04      	itt	eq
 800b598:	0a1b      	lsreq	r3, r3, #8
 800b59a:	3008      	addeq	r0, #8
 800b59c:	071a      	lsls	r2, r3, #28
 800b59e:	bf04      	itt	eq
 800b5a0:	091b      	lsreq	r3, r3, #4
 800b5a2:	3004      	addeq	r0, #4
 800b5a4:	079a      	lsls	r2, r3, #30
 800b5a6:	bf04      	itt	eq
 800b5a8:	089b      	lsreq	r3, r3, #2
 800b5aa:	3002      	addeq	r0, #2
 800b5ac:	07da      	lsls	r2, r3, #31
 800b5ae:	d402      	bmi.n	800b5b6 <__lo0bits+0x4e>
 800b5b0:	085b      	lsrs	r3, r3, #1
 800b5b2:	d006      	beq.n	800b5c2 <__lo0bits+0x5a>
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	600b      	str	r3, [r1, #0]
 800b5b8:	4770      	bx	lr
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	e7e9      	b.n	800b592 <__lo0bits+0x2a>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	4770      	bx	lr
 800b5c2:	2020      	movs	r0, #32
 800b5c4:	4770      	bx	lr

0800b5c6 <__i2b>:
 800b5c6:	b510      	push	{r4, lr}
 800b5c8:	460c      	mov	r4, r1
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	f7ff ff27 	bl	800b41e <_Balloc>
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	6144      	str	r4, [r0, #20]
 800b5d4:	6102      	str	r2, [r0, #16]
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <__multiply>:
 800b5d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	4614      	mov	r4, r2
 800b5de:	690a      	ldr	r2, [r1, #16]
 800b5e0:	6923      	ldr	r3, [r4, #16]
 800b5e2:	4688      	mov	r8, r1
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	bfbe      	ittt	lt
 800b5e8:	460b      	movlt	r3, r1
 800b5ea:	46a0      	movlt	r8, r4
 800b5ec:	461c      	movlt	r4, r3
 800b5ee:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b5f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b5fe:	eb07 0609 	add.w	r6, r7, r9
 800b602:	42b3      	cmp	r3, r6
 800b604:	bfb8      	it	lt
 800b606:	3101      	addlt	r1, #1
 800b608:	f7ff ff09 	bl	800b41e <_Balloc>
 800b60c:	f100 0514 	add.w	r5, r0, #20
 800b610:	462b      	mov	r3, r5
 800b612:	2200      	movs	r2, #0
 800b614:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b618:	4573      	cmp	r3, lr
 800b61a:	d316      	bcc.n	800b64a <__multiply+0x72>
 800b61c:	f104 0214 	add.w	r2, r4, #20
 800b620:	f108 0114 	add.w	r1, r8, #20
 800b624:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b628:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	9b00      	ldr	r3, [sp, #0]
 800b630:	9201      	str	r2, [sp, #4]
 800b632:	4293      	cmp	r3, r2
 800b634:	d80c      	bhi.n	800b650 <__multiply+0x78>
 800b636:	2e00      	cmp	r6, #0
 800b638:	dd03      	ble.n	800b642 <__multiply+0x6a>
 800b63a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d05d      	beq.n	800b6fe <__multiply+0x126>
 800b642:	6106      	str	r6, [r0, #16]
 800b644:	b003      	add	sp, #12
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	f843 2b04 	str.w	r2, [r3], #4
 800b64e:	e7e3      	b.n	800b618 <__multiply+0x40>
 800b650:	f8b2 b000 	ldrh.w	fp, [r2]
 800b654:	f1bb 0f00 	cmp.w	fp, #0
 800b658:	d023      	beq.n	800b6a2 <__multiply+0xca>
 800b65a:	4689      	mov	r9, r1
 800b65c:	46ac      	mov	ip, r5
 800b65e:	f04f 0800 	mov.w	r8, #0
 800b662:	f859 4b04 	ldr.w	r4, [r9], #4
 800b666:	f8dc a000 	ldr.w	sl, [ip]
 800b66a:	b2a3      	uxth	r3, r4
 800b66c:	fa1f fa8a 	uxth.w	sl, sl
 800b670:	fb0b a303 	mla	r3, fp, r3, sl
 800b674:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b678:	f8dc 4000 	ldr.w	r4, [ip]
 800b67c:	4443      	add	r3, r8
 800b67e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b682:	fb0b 840a 	mla	r4, fp, sl, r8
 800b686:	46e2      	mov	sl, ip
 800b688:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b692:	454f      	cmp	r7, r9
 800b694:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b698:	f84a 3b04 	str.w	r3, [sl], #4
 800b69c:	d82b      	bhi.n	800b6f6 <__multiply+0x11e>
 800b69e:	f8cc 8004 	str.w	r8, [ip, #4]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	3204      	adds	r2, #4
 800b6a6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b6aa:	f1ba 0f00 	cmp.w	sl, #0
 800b6ae:	d020      	beq.n	800b6f2 <__multiply+0x11a>
 800b6b0:	4689      	mov	r9, r1
 800b6b2:	46a8      	mov	r8, r5
 800b6b4:	f04f 0b00 	mov.w	fp, #0
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	f8b9 c000 	ldrh.w	ip, [r9]
 800b6be:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	fb0a 440c 	mla	r4, sl, ip, r4
 800b6c8:	46c4      	mov	ip, r8
 800b6ca:	445c      	add	r4, fp
 800b6cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b6d0:	f84c 3b04 	str.w	r3, [ip], #4
 800b6d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6d8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b6dc:	0c1b      	lsrs	r3, r3, #16
 800b6de:	fb0a b303 	mla	r3, sl, r3, fp
 800b6e2:	454f      	cmp	r7, r9
 800b6e4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b6e8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b6ec:	d805      	bhi.n	800b6fa <__multiply+0x122>
 800b6ee:	f8c8 3004 	str.w	r3, [r8, #4]
 800b6f2:	3504      	adds	r5, #4
 800b6f4:	e79b      	b.n	800b62e <__multiply+0x56>
 800b6f6:	46d4      	mov	ip, sl
 800b6f8:	e7b3      	b.n	800b662 <__multiply+0x8a>
 800b6fa:	46e0      	mov	r8, ip
 800b6fc:	e7dd      	b.n	800b6ba <__multiply+0xe2>
 800b6fe:	3e01      	subs	r6, #1
 800b700:	e799      	b.n	800b636 <__multiply+0x5e>
	...

0800b704 <__pow5mult>:
 800b704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b708:	4615      	mov	r5, r2
 800b70a:	f012 0203 	ands.w	r2, r2, #3
 800b70e:	4606      	mov	r6, r0
 800b710:	460f      	mov	r7, r1
 800b712:	d007      	beq.n	800b724 <__pow5mult+0x20>
 800b714:	4c21      	ldr	r4, [pc, #132]	; (800b79c <__pow5mult+0x98>)
 800b716:	3a01      	subs	r2, #1
 800b718:	2300      	movs	r3, #0
 800b71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b71e:	f7ff fec9 	bl	800b4b4 <__multadd>
 800b722:	4607      	mov	r7, r0
 800b724:	10ad      	asrs	r5, r5, #2
 800b726:	d035      	beq.n	800b794 <__pow5mult+0x90>
 800b728:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b72a:	b93c      	cbnz	r4, 800b73c <__pow5mult+0x38>
 800b72c:	2010      	movs	r0, #16
 800b72e:	f7ff fe55 	bl	800b3dc <malloc>
 800b732:	6270      	str	r0, [r6, #36]	; 0x24
 800b734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b738:	6004      	str	r4, [r0, #0]
 800b73a:	60c4      	str	r4, [r0, #12]
 800b73c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b744:	b94c      	cbnz	r4, 800b75a <__pow5mult+0x56>
 800b746:	f240 2171 	movw	r1, #625	; 0x271
 800b74a:	4630      	mov	r0, r6
 800b74c:	f7ff ff3b 	bl	800b5c6 <__i2b>
 800b750:	2300      	movs	r3, #0
 800b752:	4604      	mov	r4, r0
 800b754:	f8c8 0008 	str.w	r0, [r8, #8]
 800b758:	6003      	str	r3, [r0, #0]
 800b75a:	f04f 0800 	mov.w	r8, #0
 800b75e:	07eb      	lsls	r3, r5, #31
 800b760:	d50a      	bpl.n	800b778 <__pow5mult+0x74>
 800b762:	4639      	mov	r1, r7
 800b764:	4622      	mov	r2, r4
 800b766:	4630      	mov	r0, r6
 800b768:	f7ff ff36 	bl	800b5d8 <__multiply>
 800b76c:	4681      	mov	r9, r0
 800b76e:	4639      	mov	r1, r7
 800b770:	4630      	mov	r0, r6
 800b772:	f7ff fe88 	bl	800b486 <_Bfree>
 800b776:	464f      	mov	r7, r9
 800b778:	106d      	asrs	r5, r5, #1
 800b77a:	d00b      	beq.n	800b794 <__pow5mult+0x90>
 800b77c:	6820      	ldr	r0, [r4, #0]
 800b77e:	b938      	cbnz	r0, 800b790 <__pow5mult+0x8c>
 800b780:	4622      	mov	r2, r4
 800b782:	4621      	mov	r1, r4
 800b784:	4630      	mov	r0, r6
 800b786:	f7ff ff27 	bl	800b5d8 <__multiply>
 800b78a:	6020      	str	r0, [r4, #0]
 800b78c:	f8c0 8000 	str.w	r8, [r0]
 800b790:	4604      	mov	r4, r0
 800b792:	e7e4      	b.n	800b75e <__pow5mult+0x5a>
 800b794:	4638      	mov	r0, r7
 800b796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79a:	bf00      	nop
 800b79c:	0800d760 	.word	0x0800d760

0800b7a0 <__lshift>:
 800b7a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	4607      	mov	r7, r0
 800b7a8:	4616      	mov	r6, r2
 800b7aa:	6923      	ldr	r3, [r4, #16]
 800b7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7b0:	eb0a 0903 	add.w	r9, sl, r3
 800b7b4:	6849      	ldr	r1, [r1, #4]
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	f109 0501 	add.w	r5, r9, #1
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	db32      	blt.n	800b826 <__lshift+0x86>
 800b7c0:	4638      	mov	r0, r7
 800b7c2:	f7ff fe2c 	bl	800b41e <_Balloc>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4680      	mov	r8, r0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f100 0114 	add.w	r1, r0, #20
 800b7d0:	4553      	cmp	r3, sl
 800b7d2:	db2b      	blt.n	800b82c <__lshift+0x8c>
 800b7d4:	6920      	ldr	r0, [r4, #16]
 800b7d6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7da:	f104 0314 	add.w	r3, r4, #20
 800b7de:	f016 021f 	ands.w	r2, r6, #31
 800b7e2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7ea:	d025      	beq.n	800b838 <__lshift+0x98>
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f1c2 0e20 	rsb	lr, r2, #32
 800b7f2:	468a      	mov	sl, r1
 800b7f4:	681e      	ldr	r6, [r3, #0]
 800b7f6:	4096      	lsls	r6, r2
 800b7f8:	4330      	orrs	r0, r6
 800b7fa:	f84a 0b04 	str.w	r0, [sl], #4
 800b7fe:	f853 0b04 	ldr.w	r0, [r3], #4
 800b802:	459c      	cmp	ip, r3
 800b804:	fa20 f00e 	lsr.w	r0, r0, lr
 800b808:	d814      	bhi.n	800b834 <__lshift+0x94>
 800b80a:	6048      	str	r0, [r1, #4]
 800b80c:	b108      	cbz	r0, 800b812 <__lshift+0x72>
 800b80e:	f109 0502 	add.w	r5, r9, #2
 800b812:	3d01      	subs	r5, #1
 800b814:	4638      	mov	r0, r7
 800b816:	f8c8 5010 	str.w	r5, [r8, #16]
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7ff fe33 	bl	800b486 <_Bfree>
 800b820:	4640      	mov	r0, r8
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b826:	3101      	adds	r1, #1
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	e7c7      	b.n	800b7bc <__lshift+0x1c>
 800b82c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b830:	3301      	adds	r3, #1
 800b832:	e7cd      	b.n	800b7d0 <__lshift+0x30>
 800b834:	4651      	mov	r1, sl
 800b836:	e7dc      	b.n	800b7f2 <__lshift+0x52>
 800b838:	3904      	subs	r1, #4
 800b83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b83e:	459c      	cmp	ip, r3
 800b840:	f841 2f04 	str.w	r2, [r1, #4]!
 800b844:	d8f9      	bhi.n	800b83a <__lshift+0x9a>
 800b846:	e7e4      	b.n	800b812 <__lshift+0x72>

0800b848 <__mcmp>:
 800b848:	6903      	ldr	r3, [r0, #16]
 800b84a:	690a      	ldr	r2, [r1, #16]
 800b84c:	b530      	push	{r4, r5, lr}
 800b84e:	1a9b      	subs	r3, r3, r2
 800b850:	d10c      	bne.n	800b86c <__mcmp+0x24>
 800b852:	0092      	lsls	r2, r2, #2
 800b854:	3014      	adds	r0, #20
 800b856:	3114      	adds	r1, #20
 800b858:	1884      	adds	r4, r0, r2
 800b85a:	4411      	add	r1, r2
 800b85c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b860:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b864:	4295      	cmp	r5, r2
 800b866:	d003      	beq.n	800b870 <__mcmp+0x28>
 800b868:	d305      	bcc.n	800b876 <__mcmp+0x2e>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4618      	mov	r0, r3
 800b86e:	bd30      	pop	{r4, r5, pc}
 800b870:	42a0      	cmp	r0, r4
 800b872:	d3f3      	bcc.n	800b85c <__mcmp+0x14>
 800b874:	e7fa      	b.n	800b86c <__mcmp+0x24>
 800b876:	f04f 33ff 	mov.w	r3, #4294967295
 800b87a:	e7f7      	b.n	800b86c <__mcmp+0x24>

0800b87c <__mdiff>:
 800b87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	460d      	mov	r5, r1
 800b882:	4607      	mov	r7, r0
 800b884:	4611      	mov	r1, r2
 800b886:	4628      	mov	r0, r5
 800b888:	4614      	mov	r4, r2
 800b88a:	f7ff ffdd 	bl	800b848 <__mcmp>
 800b88e:	1e06      	subs	r6, r0, #0
 800b890:	d108      	bne.n	800b8a4 <__mdiff+0x28>
 800b892:	4631      	mov	r1, r6
 800b894:	4638      	mov	r0, r7
 800b896:	f7ff fdc2 	bl	800b41e <_Balloc>
 800b89a:	2301      	movs	r3, #1
 800b89c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b8a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a4:	bfa4      	itt	ge
 800b8a6:	4623      	movge	r3, r4
 800b8a8:	462c      	movge	r4, r5
 800b8aa:	4638      	mov	r0, r7
 800b8ac:	6861      	ldr	r1, [r4, #4]
 800b8ae:	bfa6      	itte	ge
 800b8b0:	461d      	movge	r5, r3
 800b8b2:	2600      	movge	r6, #0
 800b8b4:	2601      	movlt	r6, #1
 800b8b6:	f7ff fdb2 	bl	800b41e <_Balloc>
 800b8ba:	f04f 0e00 	mov.w	lr, #0
 800b8be:	60c6      	str	r6, [r0, #12]
 800b8c0:	692b      	ldr	r3, [r5, #16]
 800b8c2:	6926      	ldr	r6, [r4, #16]
 800b8c4:	f104 0214 	add.w	r2, r4, #20
 800b8c8:	f105 0914 	add.w	r9, r5, #20
 800b8cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b8d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b8d4:	f100 0114 	add.w	r1, r0, #20
 800b8d8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b8dc:	f859 5b04 	ldr.w	r5, [r9], #4
 800b8e0:	fa1f f38a 	uxth.w	r3, sl
 800b8e4:	4473      	add	r3, lr
 800b8e6:	b2ac      	uxth	r4, r5
 800b8e8:	1b1b      	subs	r3, r3, r4
 800b8ea:	0c2c      	lsrs	r4, r5, #16
 800b8ec:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b8f0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b8fa:	45c8      	cmp	r8, r9
 800b8fc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b900:	4694      	mov	ip, r2
 800b902:	f841 4b04 	str.w	r4, [r1], #4
 800b906:	d8e7      	bhi.n	800b8d8 <__mdiff+0x5c>
 800b908:	45bc      	cmp	ip, r7
 800b90a:	d304      	bcc.n	800b916 <__mdiff+0x9a>
 800b90c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b910:	b183      	cbz	r3, 800b934 <__mdiff+0xb8>
 800b912:	6106      	str	r6, [r0, #16]
 800b914:	e7c4      	b.n	800b8a0 <__mdiff+0x24>
 800b916:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b91a:	b2a2      	uxth	r2, r4
 800b91c:	4472      	add	r2, lr
 800b91e:	1413      	asrs	r3, r2, #16
 800b920:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b924:	b292      	uxth	r2, r2
 800b926:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b92a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b92e:	f841 2b04 	str.w	r2, [r1], #4
 800b932:	e7e9      	b.n	800b908 <__mdiff+0x8c>
 800b934:	3e01      	subs	r6, #1
 800b936:	e7e9      	b.n	800b90c <__mdiff+0x90>

0800b938 <__d2b>:
 800b938:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b93c:	461c      	mov	r4, r3
 800b93e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b942:	2101      	movs	r1, #1
 800b944:	4690      	mov	r8, r2
 800b946:	f7ff fd6a 	bl	800b41e <_Balloc>
 800b94a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b94e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b952:	4607      	mov	r7, r0
 800b954:	bb34      	cbnz	r4, 800b9a4 <__d2b+0x6c>
 800b956:	9201      	str	r2, [sp, #4]
 800b958:	f1b8 0200 	subs.w	r2, r8, #0
 800b95c:	d027      	beq.n	800b9ae <__d2b+0x76>
 800b95e:	a802      	add	r0, sp, #8
 800b960:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b964:	f7ff fe00 	bl	800b568 <__lo0bits>
 800b968:	9900      	ldr	r1, [sp, #0]
 800b96a:	b1f0      	cbz	r0, 800b9aa <__d2b+0x72>
 800b96c:	9a01      	ldr	r2, [sp, #4]
 800b96e:	f1c0 0320 	rsb	r3, r0, #32
 800b972:	fa02 f303 	lsl.w	r3, r2, r3
 800b976:	430b      	orrs	r3, r1
 800b978:	40c2      	lsrs	r2, r0
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	9201      	str	r2, [sp, #4]
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	2b00      	cmp	r3, #0
 800b982:	bf14      	ite	ne
 800b984:	2102      	movne	r1, #2
 800b986:	2101      	moveq	r1, #1
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	6139      	str	r1, [r7, #16]
 800b98c:	b1c4      	cbz	r4, 800b9c0 <__d2b+0x88>
 800b98e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b992:	4404      	add	r4, r0
 800b994:	6034      	str	r4, [r6, #0]
 800b996:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b99a:	6028      	str	r0, [r5, #0]
 800b99c:	4638      	mov	r0, r7
 800b99e:	b002      	add	sp, #8
 800b9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9a8:	e7d5      	b.n	800b956 <__d2b+0x1e>
 800b9aa:	6179      	str	r1, [r7, #20]
 800b9ac:	e7e7      	b.n	800b97e <__d2b+0x46>
 800b9ae:	a801      	add	r0, sp, #4
 800b9b0:	f7ff fdda 	bl	800b568 <__lo0bits>
 800b9b4:	2101      	movs	r1, #1
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	6139      	str	r1, [r7, #16]
 800b9ba:	617b      	str	r3, [r7, #20]
 800b9bc:	3020      	adds	r0, #32
 800b9be:	e7e5      	b.n	800b98c <__d2b+0x54>
 800b9c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9c4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b9c8:	6030      	str	r0, [r6, #0]
 800b9ca:	6918      	ldr	r0, [r3, #16]
 800b9cc:	f7ff fdad 	bl	800b52a <__hi0bits>
 800b9d0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b9d4:	e7e1      	b.n	800b99a <__d2b+0x62>

0800b9d6 <_calloc_r>:
 800b9d6:	b538      	push	{r3, r4, r5, lr}
 800b9d8:	fb02 f401 	mul.w	r4, r2, r1
 800b9dc:	4621      	mov	r1, r4
 800b9de:	f000 f855 	bl	800ba8c <_malloc_r>
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	b118      	cbz	r0, 800b9ee <_calloc_r+0x18>
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	f7fe fa2f 	bl	8009e4c <memset>
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b9f4 <_free_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4605      	mov	r5, r0
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	d043      	beq.n	800ba84 <_free_r+0x90>
 800b9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba00:	1f0c      	subs	r4, r1, #4
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfb8      	it	lt
 800ba06:	18e4      	addlt	r4, r4, r3
 800ba08:	f000 fa27 	bl	800be5a <__malloc_lock>
 800ba0c:	4a1e      	ldr	r2, [pc, #120]	; (800ba88 <_free_r+0x94>)
 800ba0e:	6813      	ldr	r3, [r2, #0]
 800ba10:	4610      	mov	r0, r2
 800ba12:	b933      	cbnz	r3, 800ba22 <_free_r+0x2e>
 800ba14:	6063      	str	r3, [r4, #4]
 800ba16:	6014      	str	r4, [r2, #0]
 800ba18:	4628      	mov	r0, r5
 800ba1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba1e:	f000 ba1d 	b.w	800be5c <__malloc_unlock>
 800ba22:	42a3      	cmp	r3, r4
 800ba24:	d90b      	bls.n	800ba3e <_free_r+0x4a>
 800ba26:	6821      	ldr	r1, [r4, #0]
 800ba28:	1862      	adds	r2, r4, r1
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	bf01      	itttt	eq
 800ba2e:	681a      	ldreq	r2, [r3, #0]
 800ba30:	685b      	ldreq	r3, [r3, #4]
 800ba32:	1852      	addeq	r2, r2, r1
 800ba34:	6022      	streq	r2, [r4, #0]
 800ba36:	6063      	str	r3, [r4, #4]
 800ba38:	6004      	str	r4, [r0, #0]
 800ba3a:	e7ed      	b.n	800ba18 <_free_r+0x24>
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	b10a      	cbz	r2, 800ba46 <_free_r+0x52>
 800ba42:	42a2      	cmp	r2, r4
 800ba44:	d9fa      	bls.n	800ba3c <_free_r+0x48>
 800ba46:	6819      	ldr	r1, [r3, #0]
 800ba48:	1858      	adds	r0, r3, r1
 800ba4a:	42a0      	cmp	r0, r4
 800ba4c:	d10b      	bne.n	800ba66 <_free_r+0x72>
 800ba4e:	6820      	ldr	r0, [r4, #0]
 800ba50:	4401      	add	r1, r0
 800ba52:	1858      	adds	r0, r3, r1
 800ba54:	4282      	cmp	r2, r0
 800ba56:	6019      	str	r1, [r3, #0]
 800ba58:	d1de      	bne.n	800ba18 <_free_r+0x24>
 800ba5a:	6810      	ldr	r0, [r2, #0]
 800ba5c:	6852      	ldr	r2, [r2, #4]
 800ba5e:	4401      	add	r1, r0
 800ba60:	6019      	str	r1, [r3, #0]
 800ba62:	605a      	str	r2, [r3, #4]
 800ba64:	e7d8      	b.n	800ba18 <_free_r+0x24>
 800ba66:	d902      	bls.n	800ba6e <_free_r+0x7a>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	602b      	str	r3, [r5, #0]
 800ba6c:	e7d4      	b.n	800ba18 <_free_r+0x24>
 800ba6e:	6820      	ldr	r0, [r4, #0]
 800ba70:	1821      	adds	r1, r4, r0
 800ba72:	428a      	cmp	r2, r1
 800ba74:	bf01      	itttt	eq
 800ba76:	6811      	ldreq	r1, [r2, #0]
 800ba78:	6852      	ldreq	r2, [r2, #4]
 800ba7a:	1809      	addeq	r1, r1, r0
 800ba7c:	6021      	streq	r1, [r4, #0]
 800ba7e:	6062      	str	r2, [r4, #4]
 800ba80:	605c      	str	r4, [r3, #4]
 800ba82:	e7c9      	b.n	800ba18 <_free_r+0x24>
 800ba84:	bd38      	pop	{r3, r4, r5, pc}
 800ba86:	bf00      	nop
 800ba88:	20000564 	.word	0x20000564

0800ba8c <_malloc_r>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	1ccd      	adds	r5, r1, #3
 800ba90:	f025 0503 	bic.w	r5, r5, #3
 800ba94:	3508      	adds	r5, #8
 800ba96:	2d0c      	cmp	r5, #12
 800ba98:	bf38      	it	cc
 800ba9a:	250c      	movcc	r5, #12
 800ba9c:	2d00      	cmp	r5, #0
 800ba9e:	4606      	mov	r6, r0
 800baa0:	db01      	blt.n	800baa6 <_malloc_r+0x1a>
 800baa2:	42a9      	cmp	r1, r5
 800baa4:	d903      	bls.n	800baae <_malloc_r+0x22>
 800baa6:	230c      	movs	r3, #12
 800baa8:	6033      	str	r3, [r6, #0]
 800baaa:	2000      	movs	r0, #0
 800baac:	bd70      	pop	{r4, r5, r6, pc}
 800baae:	f000 f9d4 	bl	800be5a <__malloc_lock>
 800bab2:	4a21      	ldr	r2, [pc, #132]	; (800bb38 <_malloc_r+0xac>)
 800bab4:	6814      	ldr	r4, [r2, #0]
 800bab6:	4621      	mov	r1, r4
 800bab8:	b991      	cbnz	r1, 800bae0 <_malloc_r+0x54>
 800baba:	4c20      	ldr	r4, [pc, #128]	; (800bb3c <_malloc_r+0xb0>)
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	b91b      	cbnz	r3, 800bac8 <_malloc_r+0x3c>
 800bac0:	4630      	mov	r0, r6
 800bac2:	f000 f98f 	bl	800bde4 <_sbrk_r>
 800bac6:	6020      	str	r0, [r4, #0]
 800bac8:	4629      	mov	r1, r5
 800baca:	4630      	mov	r0, r6
 800bacc:	f000 f98a 	bl	800bde4 <_sbrk_r>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d124      	bne.n	800bb1e <_malloc_r+0x92>
 800bad4:	230c      	movs	r3, #12
 800bad6:	4630      	mov	r0, r6
 800bad8:	6033      	str	r3, [r6, #0]
 800bada:	f000 f9bf 	bl	800be5c <__malloc_unlock>
 800bade:	e7e4      	b.n	800baaa <_malloc_r+0x1e>
 800bae0:	680b      	ldr	r3, [r1, #0]
 800bae2:	1b5b      	subs	r3, r3, r5
 800bae4:	d418      	bmi.n	800bb18 <_malloc_r+0x8c>
 800bae6:	2b0b      	cmp	r3, #11
 800bae8:	d90f      	bls.n	800bb0a <_malloc_r+0x7e>
 800baea:	600b      	str	r3, [r1, #0]
 800baec:	18cc      	adds	r4, r1, r3
 800baee:	50cd      	str	r5, [r1, r3]
 800baf0:	4630      	mov	r0, r6
 800baf2:	f000 f9b3 	bl	800be5c <__malloc_unlock>
 800baf6:	f104 000b 	add.w	r0, r4, #11
 800bafa:	1d23      	adds	r3, r4, #4
 800bafc:	f020 0007 	bic.w	r0, r0, #7
 800bb00:	1ac3      	subs	r3, r0, r3
 800bb02:	d0d3      	beq.n	800baac <_malloc_r+0x20>
 800bb04:	425a      	negs	r2, r3
 800bb06:	50e2      	str	r2, [r4, r3]
 800bb08:	e7d0      	b.n	800baac <_malloc_r+0x20>
 800bb0a:	684b      	ldr	r3, [r1, #4]
 800bb0c:	428c      	cmp	r4, r1
 800bb0e:	bf16      	itet	ne
 800bb10:	6063      	strne	r3, [r4, #4]
 800bb12:	6013      	streq	r3, [r2, #0]
 800bb14:	460c      	movne	r4, r1
 800bb16:	e7eb      	b.n	800baf0 <_malloc_r+0x64>
 800bb18:	460c      	mov	r4, r1
 800bb1a:	6849      	ldr	r1, [r1, #4]
 800bb1c:	e7cc      	b.n	800bab8 <_malloc_r+0x2c>
 800bb1e:	1cc4      	adds	r4, r0, #3
 800bb20:	f024 0403 	bic.w	r4, r4, #3
 800bb24:	42a0      	cmp	r0, r4
 800bb26:	d005      	beq.n	800bb34 <_malloc_r+0xa8>
 800bb28:	1a21      	subs	r1, r4, r0
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f000 f95a 	bl	800bde4 <_sbrk_r>
 800bb30:	3001      	adds	r0, #1
 800bb32:	d0cf      	beq.n	800bad4 <_malloc_r+0x48>
 800bb34:	6025      	str	r5, [r4, #0]
 800bb36:	e7db      	b.n	800baf0 <_malloc_r+0x64>
 800bb38:	20000564 	.word	0x20000564
 800bb3c:	20000568 	.word	0x20000568

0800bb40 <__ssputs_r>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	688e      	ldr	r6, [r1, #8]
 800bb46:	4682      	mov	sl, r0
 800bb48:	429e      	cmp	r6, r3
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	4690      	mov	r8, r2
 800bb4e:	4699      	mov	r9, r3
 800bb50:	d837      	bhi.n	800bbc2 <__ssputs_r+0x82>
 800bb52:	898a      	ldrh	r2, [r1, #12]
 800bb54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb58:	d031      	beq.n	800bbbe <__ssputs_r+0x7e>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	6825      	ldr	r5, [r4, #0]
 800bb5e:	6909      	ldr	r1, [r1, #16]
 800bb60:	1a6f      	subs	r7, r5, r1
 800bb62:	6965      	ldr	r5, [r4, #20]
 800bb64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb68:	fb95 f5f3 	sdiv	r5, r5, r3
 800bb6c:	f109 0301 	add.w	r3, r9, #1
 800bb70:	443b      	add	r3, r7
 800bb72:	429d      	cmp	r5, r3
 800bb74:	bf38      	it	cc
 800bb76:	461d      	movcc	r5, r3
 800bb78:	0553      	lsls	r3, r2, #21
 800bb7a:	d530      	bpl.n	800bbde <__ssputs_r+0x9e>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7ff ff85 	bl	800ba8c <_malloc_r>
 800bb82:	4606      	mov	r6, r0
 800bb84:	b950      	cbnz	r0, 800bb9c <__ssputs_r+0x5c>
 800bb86:	230c      	movs	r3, #12
 800bb88:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8c:	f8ca 3000 	str.w	r3, [sl]
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9c:	463a      	mov	r2, r7
 800bb9e:	6921      	ldr	r1, [r4, #16]
 800bba0:	f7ff fc32 	bl	800b408 <memcpy>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	6126      	str	r6, [r4, #16]
 800bbb2:	443e      	add	r6, r7
 800bbb4:	6026      	str	r6, [r4, #0]
 800bbb6:	464e      	mov	r6, r9
 800bbb8:	6165      	str	r5, [r4, #20]
 800bbba:	1bed      	subs	r5, r5, r7
 800bbbc:	60a5      	str	r5, [r4, #8]
 800bbbe:	454e      	cmp	r6, r9
 800bbc0:	d900      	bls.n	800bbc4 <__ssputs_r+0x84>
 800bbc2:	464e      	mov	r6, r9
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	4641      	mov	r1, r8
 800bbc8:	6820      	ldr	r0, [r4, #0]
 800bbca:	f000 f92d 	bl	800be28 <memmove>
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	2000      	movs	r0, #0
 800bbd2:	1b9b      	subs	r3, r3, r6
 800bbd4:	60a3      	str	r3, [r4, #8]
 800bbd6:	6823      	ldr	r3, [r4, #0]
 800bbd8:	441e      	add	r6, r3
 800bbda:	6026      	str	r6, [r4, #0]
 800bbdc:	e7dc      	b.n	800bb98 <__ssputs_r+0x58>
 800bbde:	462a      	mov	r2, r5
 800bbe0:	f000 f93d 	bl	800be5e <_realloc_r>
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	d1e2      	bne.n	800bbb0 <__ssputs_r+0x70>
 800bbea:	6921      	ldr	r1, [r4, #16]
 800bbec:	4650      	mov	r0, sl
 800bbee:	f7ff ff01 	bl	800b9f4 <_free_r>
 800bbf2:	e7c8      	b.n	800bb86 <__ssputs_r+0x46>

0800bbf4 <_svfiprintf_r>:
 800bbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	898b      	ldrh	r3, [r1, #12]
 800bbfc:	b09d      	sub	sp, #116	; 0x74
 800bbfe:	061f      	lsls	r7, r3, #24
 800bc00:	4680      	mov	r8, r0
 800bc02:	460c      	mov	r4, r1
 800bc04:	4616      	mov	r6, r2
 800bc06:	d50f      	bpl.n	800bc28 <_svfiprintf_r+0x34>
 800bc08:	690b      	ldr	r3, [r1, #16]
 800bc0a:	b96b      	cbnz	r3, 800bc28 <_svfiprintf_r+0x34>
 800bc0c:	2140      	movs	r1, #64	; 0x40
 800bc0e:	f7ff ff3d 	bl	800ba8c <_malloc_r>
 800bc12:	6020      	str	r0, [r4, #0]
 800bc14:	6120      	str	r0, [r4, #16]
 800bc16:	b928      	cbnz	r0, 800bc24 <_svfiprintf_r+0x30>
 800bc18:	230c      	movs	r3, #12
 800bc1a:	f8c8 3000 	str.w	r3, [r8]
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	e0c8      	b.n	800bdb6 <_svfiprintf_r+0x1c2>
 800bc24:	2340      	movs	r3, #64	; 0x40
 800bc26:	6163      	str	r3, [r4, #20]
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2c:	2320      	movs	r3, #32
 800bc2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc32:	2330      	movs	r3, #48	; 0x30
 800bc34:	f04f 0b01 	mov.w	fp, #1
 800bc38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc3c:	9503      	str	r5, [sp, #12]
 800bc3e:	4637      	mov	r7, r6
 800bc40:	463d      	mov	r5, r7
 800bc42:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc46:	b10b      	cbz	r3, 800bc4c <_svfiprintf_r+0x58>
 800bc48:	2b25      	cmp	r3, #37	; 0x25
 800bc4a:	d13e      	bne.n	800bcca <_svfiprintf_r+0xd6>
 800bc4c:	ebb7 0a06 	subs.w	sl, r7, r6
 800bc50:	d00b      	beq.n	800bc6a <_svfiprintf_r+0x76>
 800bc52:	4653      	mov	r3, sl
 800bc54:	4632      	mov	r2, r6
 800bc56:	4621      	mov	r1, r4
 800bc58:	4640      	mov	r0, r8
 800bc5a:	f7ff ff71 	bl	800bb40 <__ssputs_r>
 800bc5e:	3001      	adds	r0, #1
 800bc60:	f000 80a4 	beq.w	800bdac <_svfiprintf_r+0x1b8>
 800bc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc66:	4453      	add	r3, sl
 800bc68:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6a:	783b      	ldrb	r3, [r7, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 809d 	beq.w	800bdac <_svfiprintf_r+0x1b8>
 800bc72:	2300      	movs	r3, #0
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	9307      	str	r3, [sp, #28]
 800bc80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc84:	931a      	str	r3, [sp, #104]	; 0x68
 800bc86:	462f      	mov	r7, r5
 800bc88:	2205      	movs	r2, #5
 800bc8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bc8e:	4850      	ldr	r0, [pc, #320]	; (800bdd0 <_svfiprintf_r+0x1dc>)
 800bc90:	f7ff fbac 	bl	800b3ec <memchr>
 800bc94:	9b04      	ldr	r3, [sp, #16]
 800bc96:	b9d0      	cbnz	r0, 800bcce <_svfiprintf_r+0xda>
 800bc98:	06d9      	lsls	r1, r3, #27
 800bc9a:	bf44      	itt	mi
 800bc9c:	2220      	movmi	r2, #32
 800bc9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bca2:	071a      	lsls	r2, r3, #28
 800bca4:	bf44      	itt	mi
 800bca6:	222b      	movmi	r2, #43	; 0x2b
 800bca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bcac:	782a      	ldrb	r2, [r5, #0]
 800bcae:	2a2a      	cmp	r2, #42	; 0x2a
 800bcb0:	d015      	beq.n	800bcde <_svfiprintf_r+0xea>
 800bcb2:	462f      	mov	r7, r5
 800bcb4:	2000      	movs	r0, #0
 800bcb6:	250a      	movs	r5, #10
 800bcb8:	9a07      	ldr	r2, [sp, #28]
 800bcba:	4639      	mov	r1, r7
 800bcbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc0:	3b30      	subs	r3, #48	; 0x30
 800bcc2:	2b09      	cmp	r3, #9
 800bcc4:	d94d      	bls.n	800bd62 <_svfiprintf_r+0x16e>
 800bcc6:	b1b8      	cbz	r0, 800bcf8 <_svfiprintf_r+0x104>
 800bcc8:	e00f      	b.n	800bcea <_svfiprintf_r+0xf6>
 800bcca:	462f      	mov	r7, r5
 800bccc:	e7b8      	b.n	800bc40 <_svfiprintf_r+0x4c>
 800bcce:	4a40      	ldr	r2, [pc, #256]	; (800bdd0 <_svfiprintf_r+0x1dc>)
 800bcd0:	463d      	mov	r5, r7
 800bcd2:	1a80      	subs	r0, r0, r2
 800bcd4:	fa0b f000 	lsl.w	r0, fp, r0
 800bcd8:	4318      	orrs	r0, r3
 800bcda:	9004      	str	r0, [sp, #16]
 800bcdc:	e7d3      	b.n	800bc86 <_svfiprintf_r+0x92>
 800bcde:	9a03      	ldr	r2, [sp, #12]
 800bce0:	1d11      	adds	r1, r2, #4
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	9103      	str	r1, [sp, #12]
 800bce6:	2a00      	cmp	r2, #0
 800bce8:	db01      	blt.n	800bcee <_svfiprintf_r+0xfa>
 800bcea:	9207      	str	r2, [sp, #28]
 800bcec:	e004      	b.n	800bcf8 <_svfiprintf_r+0x104>
 800bcee:	4252      	negs	r2, r2
 800bcf0:	f043 0302 	orr.w	r3, r3, #2
 800bcf4:	9207      	str	r2, [sp, #28]
 800bcf6:	9304      	str	r3, [sp, #16]
 800bcf8:	783b      	ldrb	r3, [r7, #0]
 800bcfa:	2b2e      	cmp	r3, #46	; 0x2e
 800bcfc:	d10c      	bne.n	800bd18 <_svfiprintf_r+0x124>
 800bcfe:	787b      	ldrb	r3, [r7, #1]
 800bd00:	2b2a      	cmp	r3, #42	; 0x2a
 800bd02:	d133      	bne.n	800bd6c <_svfiprintf_r+0x178>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	3702      	adds	r7, #2
 800bd08:	1d1a      	adds	r2, r3, #4
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	9203      	str	r2, [sp, #12]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bfb8      	it	lt
 800bd12:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd16:	9305      	str	r3, [sp, #20]
 800bd18:	4d2e      	ldr	r5, [pc, #184]	; (800bdd4 <_svfiprintf_r+0x1e0>)
 800bd1a:	2203      	movs	r2, #3
 800bd1c:	7839      	ldrb	r1, [r7, #0]
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f7ff fb64 	bl	800b3ec <memchr>
 800bd24:	b138      	cbz	r0, 800bd36 <_svfiprintf_r+0x142>
 800bd26:	2340      	movs	r3, #64	; 0x40
 800bd28:	1b40      	subs	r0, r0, r5
 800bd2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd2e:	9b04      	ldr	r3, [sp, #16]
 800bd30:	3701      	adds	r7, #1
 800bd32:	4303      	orrs	r3, r0
 800bd34:	9304      	str	r3, [sp, #16]
 800bd36:	7839      	ldrb	r1, [r7, #0]
 800bd38:	2206      	movs	r2, #6
 800bd3a:	4827      	ldr	r0, [pc, #156]	; (800bdd8 <_svfiprintf_r+0x1e4>)
 800bd3c:	1c7e      	adds	r6, r7, #1
 800bd3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd42:	f7ff fb53 	bl	800b3ec <memchr>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d038      	beq.n	800bdbc <_svfiprintf_r+0x1c8>
 800bd4a:	4b24      	ldr	r3, [pc, #144]	; (800bddc <_svfiprintf_r+0x1e8>)
 800bd4c:	bb13      	cbnz	r3, 800bd94 <_svfiprintf_r+0x1a0>
 800bd4e:	9b03      	ldr	r3, [sp, #12]
 800bd50:	3307      	adds	r3, #7
 800bd52:	f023 0307 	bic.w	r3, r3, #7
 800bd56:	3308      	adds	r3, #8
 800bd58:	9303      	str	r3, [sp, #12]
 800bd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5c:	444b      	add	r3, r9
 800bd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd60:	e76d      	b.n	800bc3e <_svfiprintf_r+0x4a>
 800bd62:	fb05 3202 	mla	r2, r5, r2, r3
 800bd66:	2001      	movs	r0, #1
 800bd68:	460f      	mov	r7, r1
 800bd6a:	e7a6      	b.n	800bcba <_svfiprintf_r+0xc6>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	250a      	movs	r5, #10
 800bd70:	4619      	mov	r1, r3
 800bd72:	3701      	adds	r7, #1
 800bd74:	9305      	str	r3, [sp, #20]
 800bd76:	4638      	mov	r0, r7
 800bd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7c:	3a30      	subs	r2, #48	; 0x30
 800bd7e:	2a09      	cmp	r2, #9
 800bd80:	d903      	bls.n	800bd8a <_svfiprintf_r+0x196>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0c8      	beq.n	800bd18 <_svfiprintf_r+0x124>
 800bd86:	9105      	str	r1, [sp, #20]
 800bd88:	e7c6      	b.n	800bd18 <_svfiprintf_r+0x124>
 800bd8a:	fb05 2101 	mla	r1, r5, r1, r2
 800bd8e:	2301      	movs	r3, #1
 800bd90:	4607      	mov	r7, r0
 800bd92:	e7f0      	b.n	800bd76 <_svfiprintf_r+0x182>
 800bd94:	ab03      	add	r3, sp, #12
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	4622      	mov	r2, r4
 800bd9a:	4b11      	ldr	r3, [pc, #68]	; (800bde0 <_svfiprintf_r+0x1ec>)
 800bd9c:	a904      	add	r1, sp, #16
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7fe f8ee 	bl	8009f80 <_printf_float>
 800bda4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bda8:	4681      	mov	r9, r0
 800bdaa:	d1d6      	bne.n	800bd5a <_svfiprintf_r+0x166>
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	065b      	lsls	r3, r3, #25
 800bdb0:	f53f af35 	bmi.w	800bc1e <_svfiprintf_r+0x2a>
 800bdb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdb6:	b01d      	add	sp, #116	; 0x74
 800bdb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbc:	ab03      	add	r3, sp, #12
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	4b07      	ldr	r3, [pc, #28]	; (800bde0 <_svfiprintf_r+0x1ec>)
 800bdc4:	a904      	add	r1, sp, #16
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	f7fe fb86 	bl	800a4d8 <_printf_i>
 800bdcc:	e7ea      	b.n	800bda4 <_svfiprintf_r+0x1b0>
 800bdce:	bf00      	nop
 800bdd0:	0800d76c 	.word	0x0800d76c
 800bdd4:	0800d772 	.word	0x0800d772
 800bdd8:	0800d776 	.word	0x0800d776
 800bddc:	08009f81 	.word	0x08009f81
 800bde0:	0800bb41 	.word	0x0800bb41

0800bde4 <_sbrk_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	2300      	movs	r3, #0
 800bde8:	4c05      	ldr	r4, [pc, #20]	; (800be00 <_sbrk_r+0x1c>)
 800bdea:	4605      	mov	r5, r0
 800bdec:	4608      	mov	r0, r1
 800bdee:	6023      	str	r3, [r4, #0]
 800bdf0:	f7f7 f81e 	bl	8002e30 <_sbrk>
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	d102      	bne.n	800bdfe <_sbrk_r+0x1a>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	b103      	cbz	r3, 800bdfe <_sbrk_r+0x1a>
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	200013cc 	.word	0x200013cc

0800be04 <__ascii_mbtowc>:
 800be04:	b082      	sub	sp, #8
 800be06:	b901      	cbnz	r1, 800be0a <__ascii_mbtowc+0x6>
 800be08:	a901      	add	r1, sp, #4
 800be0a:	b142      	cbz	r2, 800be1e <__ascii_mbtowc+0x1a>
 800be0c:	b14b      	cbz	r3, 800be22 <__ascii_mbtowc+0x1e>
 800be0e:	7813      	ldrb	r3, [r2, #0]
 800be10:	600b      	str	r3, [r1, #0]
 800be12:	7812      	ldrb	r2, [r2, #0]
 800be14:	1c10      	adds	r0, r2, #0
 800be16:	bf18      	it	ne
 800be18:	2001      	movne	r0, #1
 800be1a:	b002      	add	sp, #8
 800be1c:	4770      	bx	lr
 800be1e:	4610      	mov	r0, r2
 800be20:	e7fb      	b.n	800be1a <__ascii_mbtowc+0x16>
 800be22:	f06f 0001 	mvn.w	r0, #1
 800be26:	e7f8      	b.n	800be1a <__ascii_mbtowc+0x16>

0800be28 <memmove>:
 800be28:	4288      	cmp	r0, r1
 800be2a:	b510      	push	{r4, lr}
 800be2c:	eb01 0302 	add.w	r3, r1, r2
 800be30:	d807      	bhi.n	800be42 <memmove+0x1a>
 800be32:	1e42      	subs	r2, r0, #1
 800be34:	4299      	cmp	r1, r3
 800be36:	d00a      	beq.n	800be4e <memmove+0x26>
 800be38:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800be40:	e7f8      	b.n	800be34 <memmove+0xc>
 800be42:	4283      	cmp	r3, r0
 800be44:	d9f5      	bls.n	800be32 <memmove+0xa>
 800be46:	1881      	adds	r1, r0, r2
 800be48:	1ad2      	subs	r2, r2, r3
 800be4a:	42d3      	cmn	r3, r2
 800be4c:	d100      	bne.n	800be50 <memmove+0x28>
 800be4e:	bd10      	pop	{r4, pc}
 800be50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800be58:	e7f7      	b.n	800be4a <memmove+0x22>

0800be5a <__malloc_lock>:
 800be5a:	4770      	bx	lr

0800be5c <__malloc_unlock>:
 800be5c:	4770      	bx	lr

0800be5e <_realloc_r>:
 800be5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be60:	4607      	mov	r7, r0
 800be62:	4614      	mov	r4, r2
 800be64:	460e      	mov	r6, r1
 800be66:	b921      	cbnz	r1, 800be72 <_realloc_r+0x14>
 800be68:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800be6c:	4611      	mov	r1, r2
 800be6e:	f7ff be0d 	b.w	800ba8c <_malloc_r>
 800be72:	b922      	cbnz	r2, 800be7e <_realloc_r+0x20>
 800be74:	f7ff fdbe 	bl	800b9f4 <_free_r>
 800be78:	4625      	mov	r5, r4
 800be7a:	4628      	mov	r0, r5
 800be7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be7e:	f000 f821 	bl	800bec4 <_malloc_usable_size_r>
 800be82:	42a0      	cmp	r0, r4
 800be84:	d20f      	bcs.n	800bea6 <_realloc_r+0x48>
 800be86:	4621      	mov	r1, r4
 800be88:	4638      	mov	r0, r7
 800be8a:	f7ff fdff 	bl	800ba8c <_malloc_r>
 800be8e:	4605      	mov	r5, r0
 800be90:	2800      	cmp	r0, #0
 800be92:	d0f2      	beq.n	800be7a <_realloc_r+0x1c>
 800be94:	4631      	mov	r1, r6
 800be96:	4622      	mov	r2, r4
 800be98:	f7ff fab6 	bl	800b408 <memcpy>
 800be9c:	4631      	mov	r1, r6
 800be9e:	4638      	mov	r0, r7
 800bea0:	f7ff fda8 	bl	800b9f4 <_free_r>
 800bea4:	e7e9      	b.n	800be7a <_realloc_r+0x1c>
 800bea6:	4635      	mov	r5, r6
 800bea8:	e7e7      	b.n	800be7a <_realloc_r+0x1c>

0800beaa <__ascii_wctomb>:
 800beaa:	b149      	cbz	r1, 800bec0 <__ascii_wctomb+0x16>
 800beac:	2aff      	cmp	r2, #255	; 0xff
 800beae:	bf8b      	itete	hi
 800beb0:	238a      	movhi	r3, #138	; 0x8a
 800beb2:	700a      	strbls	r2, [r1, #0]
 800beb4:	6003      	strhi	r3, [r0, #0]
 800beb6:	2001      	movls	r0, #1
 800beb8:	bf88      	it	hi
 800beba:	f04f 30ff 	movhi.w	r0, #4294967295
 800bebe:	4770      	bx	lr
 800bec0:	4608      	mov	r0, r1
 800bec2:	4770      	bx	lr

0800bec4 <_malloc_usable_size_r>:
 800bec4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bec8:	1f18      	subs	r0, r3, #4
 800beca:	2b00      	cmp	r3, #0
 800becc:	bfbc      	itt	lt
 800bece:	580b      	ldrlt	r3, [r1, r0]
 800bed0:	18c0      	addlt	r0, r0, r3
 800bed2:	4770      	bx	lr

0800bed4 <pow>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	b08f      	sub	sp, #60	; 0x3c
 800beda:	461d      	mov	r5, r3
 800bedc:	4680      	mov	r8, r0
 800bede:	4689      	mov	r9, r1
 800bee0:	4614      	mov	r4, r2
 800bee2:	f000 f955 	bl	800c190 <__ieee754_pow>
 800bee6:	4fa1      	ldr	r7, [pc, #644]	; (800c16c <pow+0x298>)
 800bee8:	e9cd 0100 	strd	r0, r1, [sp]
 800beec:	f997 3000 	ldrsb.w	r3, [r7]
 800bef0:	463e      	mov	r6, r7
 800bef2:	9302      	str	r3, [sp, #8]
 800bef4:	3301      	adds	r3, #1
 800bef6:	d05f      	beq.n	800bfb8 <pow+0xe4>
 800bef8:	4622      	mov	r2, r4
 800befa:	462b      	mov	r3, r5
 800befc:	4620      	mov	r0, r4
 800befe:	4629      	mov	r1, r5
 800bf00:	f7f4 fd84 	bl	8000a0c <__aeabi_dcmpun>
 800bf04:	4682      	mov	sl, r0
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d156      	bne.n	800bfb8 <pow+0xe4>
 800bf0a:	4642      	mov	r2, r8
 800bf0c:	464b      	mov	r3, r9
 800bf0e:	4640      	mov	r0, r8
 800bf10:	4649      	mov	r1, r9
 800bf12:	f7f4 fd7b 	bl	8000a0c <__aeabi_dcmpun>
 800bf16:	9003      	str	r0, [sp, #12]
 800bf18:	b1e8      	cbz	r0, 800bf56 <pow+0x82>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7f4 fd41 	bl	80009a8 <__aeabi_dcmpeq>
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d046      	beq.n	800bfb8 <pow+0xe4>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	4b8f      	ldr	r3, [pc, #572]	; (800c170 <pow+0x29c>)
 800bf32:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800bf36:	9305      	str	r3, [sp, #20]
 800bf38:	4b8e      	ldr	r3, [pc, #568]	; (800c174 <pow+0x2a0>)
 800bf3a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bf3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bf42:	9b02      	ldr	r3, [sp, #8]
 800bf44:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bf48:	2b02      	cmp	r3, #2
 800bf4a:	d031      	beq.n	800bfb0 <pow+0xdc>
 800bf4c:	a804      	add	r0, sp, #16
 800bf4e:	f000 fedf 	bl	800cd10 <matherr>
 800bf52:	bb38      	cbnz	r0, 800bfa4 <pow+0xd0>
 800bf54:	e058      	b.n	800c008 <pow+0x134>
 800bf56:	f04f 0a00 	mov.w	sl, #0
 800bf5a:	f04f 0b00 	mov.w	fp, #0
 800bf5e:	4652      	mov	r2, sl
 800bf60:	465b      	mov	r3, fp
 800bf62:	4640      	mov	r0, r8
 800bf64:	4649      	mov	r1, r9
 800bf66:	f7f4 fd1f 	bl	80009a8 <__aeabi_dcmpeq>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d051      	beq.n	800c012 <pow+0x13e>
 800bf6e:	4652      	mov	r2, sl
 800bf70:	465b      	mov	r3, fp
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 fd17 	bl	80009a8 <__aeabi_dcmpeq>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	b308      	cbz	r0, 800bfc2 <pow+0xee>
 800bf7e:	2301      	movs	r3, #1
 800bf80:	9304      	str	r3, [sp, #16]
 800bf82:	4b7b      	ldr	r3, [pc, #492]	; (800c170 <pow+0x29c>)
 800bf84:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bf88:	9305      	str	r3, [sp, #20]
 800bf8a:	9b03      	ldr	r3, [sp, #12]
 800bf8c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bf90:	930c      	str	r3, [sp, #48]	; 0x30
 800bf92:	9b02      	ldr	r3, [sp, #8]
 800bf94:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0d7      	beq.n	800bf4c <pow+0x78>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4b75      	ldr	r3, [pc, #468]	; (800c174 <pow+0x2a0>)
 800bfa0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bfa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfa6:	b11b      	cbz	r3, 800bfb0 <pow+0xdc>
 800bfa8:	f7fd ff26 	bl	8009df8 <__errno>
 800bfac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfae:	6003      	str	r3, [r0, #0]
 800bfb0:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800bfb4:	e9cd 3400 	strd	r3, r4, [sp]
 800bfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfbc:	b00f      	add	sp, #60	; 0x3c
 800bfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f000 fe9d 	bl	800cd04 <finite>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d0f4      	beq.n	800bfb8 <pow+0xe4>
 800bfce:	4652      	mov	r2, sl
 800bfd0:	465b      	mov	r3, fp
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	4629      	mov	r1, r5
 800bfd6:	f7f4 fcf1 	bl	80009bc <__aeabi_dcmplt>
 800bfda:	2800      	cmp	r0, #0
 800bfdc:	d0ec      	beq.n	800bfb8 <pow+0xe4>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	4b63      	ldr	r3, [pc, #396]	; (800c170 <pow+0x29c>)
 800bfe4:	960c      	str	r6, [sp, #48]	; 0x30
 800bfe6:	9305      	str	r3, [sp, #20]
 800bfe8:	f997 3000 	ldrsb.w	r3, [r7]
 800bfec:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800bff0:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800bff4:	b913      	cbnz	r3, 800bffc <pow+0x128>
 800bff6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800bffa:	e7a7      	b.n	800bf4c <pow+0x78>
 800bffc:	2000      	movs	r0, #0
 800bffe:	495e      	ldr	r1, [pc, #376]	; (800c178 <pow+0x2a4>)
 800c000:	2b02      	cmp	r3, #2
 800c002:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c006:	d1a1      	bne.n	800bf4c <pow+0x78>
 800c008:	f7fd fef6 	bl	8009df8 <__errno>
 800c00c:	2321      	movs	r3, #33	; 0x21
 800c00e:	6003      	str	r3, [r0, #0]
 800c010:	e7c8      	b.n	800bfa4 <pow+0xd0>
 800c012:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c016:	f000 fe75 	bl	800cd04 <finite>
 800c01a:	9002      	str	r0, [sp, #8]
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d177      	bne.n	800c110 <pow+0x23c>
 800c020:	4640      	mov	r0, r8
 800c022:	4649      	mov	r1, r9
 800c024:	f000 fe6e 	bl	800cd04 <finite>
 800c028:	2800      	cmp	r0, #0
 800c02a:	d071      	beq.n	800c110 <pow+0x23c>
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f000 fe68 	bl	800cd04 <finite>
 800c034:	2800      	cmp	r0, #0
 800c036:	d06b      	beq.n	800c110 <pow+0x23c>
 800c038:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c03c:	4619      	mov	r1, r3
 800c03e:	4610      	mov	r0, r2
 800c040:	f7f4 fce4 	bl	8000a0c <__aeabi_dcmpun>
 800c044:	f997 7000 	ldrsb.w	r7, [r7]
 800c048:	4b49      	ldr	r3, [pc, #292]	; (800c170 <pow+0x29c>)
 800c04a:	b1a0      	cbz	r0, 800c076 <pow+0x1a2>
 800c04c:	2201      	movs	r2, #1
 800c04e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c052:	9b02      	ldr	r3, [sp, #8]
 800c054:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c058:	930c      	str	r3, [sp, #48]	; 0x30
 800c05a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c05e:	2f00      	cmp	r7, #0
 800c060:	d0c9      	beq.n	800bff6 <pow+0x122>
 800c062:	4652      	mov	r2, sl
 800c064:	465b      	mov	r3, fp
 800c066:	4650      	mov	r0, sl
 800c068:	4659      	mov	r1, fp
 800c06a:	f7f4 fb5f 	bl	800072c <__aeabi_ddiv>
 800c06e:	2f02      	cmp	r7, #2
 800c070:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c074:	e7c7      	b.n	800c006 <pow+0x132>
 800c076:	2203      	movs	r2, #3
 800c078:	900c      	str	r0, [sp, #48]	; 0x30
 800c07a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	2200      	movs	r2, #0
 800c084:	4b3d      	ldr	r3, [pc, #244]	; (800c17c <pow+0x2a8>)
 800c086:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c08a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c08e:	f7f4 fa23 	bl	80004d8 <__aeabi_dmul>
 800c092:	4604      	mov	r4, r0
 800c094:	460d      	mov	r5, r1
 800c096:	bb17      	cbnz	r7, 800c0de <pow+0x20a>
 800c098:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c09c:	4b38      	ldr	r3, [pc, #224]	; (800c180 <pow+0x2ac>)
 800c09e:	4640      	mov	r0, r8
 800c0a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	4652      	mov	r2, sl
 800c0a8:	465b      	mov	r3, fp
 800c0aa:	f7f4 fc87 	bl	80009bc <__aeabi_dcmplt>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d054      	beq.n	800c15c <pow+0x288>
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	f000 fe33 	bl	800cd20 <rint>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	f7f4 fc73 	bl	80009a8 <__aeabi_dcmpeq>
 800c0c2:	b920      	cbnz	r0, 800c0ce <pow+0x1fa>
 800c0c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c0c8:	4b2e      	ldr	r3, [pc, #184]	; (800c184 <pow+0x2b0>)
 800c0ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0ce:	f996 3000 	ldrsb.w	r3, [r6]
 800c0d2:	2b02      	cmp	r3, #2
 800c0d4:	d142      	bne.n	800c15c <pow+0x288>
 800c0d6:	f7fd fe8f 	bl	8009df8 <__errno>
 800c0da:	2322      	movs	r3, #34	; 0x22
 800c0dc:	e797      	b.n	800c00e <pow+0x13a>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4b29      	ldr	r3, [pc, #164]	; (800c188 <pow+0x2b4>)
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	4652      	mov	r2, sl
 800c0ec:	465b      	mov	r3, fp
 800c0ee:	f7f4 fc65 	bl	80009bc <__aeabi_dcmplt>
 800c0f2:	2800      	cmp	r0, #0
 800c0f4:	d0eb      	beq.n	800c0ce <pow+0x1fa>
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f000 fe11 	bl	800cd20 <rint>
 800c0fe:	4622      	mov	r2, r4
 800c100:	462b      	mov	r3, r5
 800c102:	f7f4 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 800c106:	2800      	cmp	r0, #0
 800c108:	d1e1      	bne.n	800c0ce <pow+0x1fa>
 800c10a:	2200      	movs	r2, #0
 800c10c:	4b1a      	ldr	r3, [pc, #104]	; (800c178 <pow+0x2a4>)
 800c10e:	e7dc      	b.n	800c0ca <pow+0x1f6>
 800c110:	2200      	movs	r2, #0
 800c112:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c116:	2300      	movs	r3, #0
 800c118:	f7f4 fc46 	bl	80009a8 <__aeabi_dcmpeq>
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f43f af4b 	beq.w	800bfb8 <pow+0xe4>
 800c122:	4640      	mov	r0, r8
 800c124:	4649      	mov	r1, r9
 800c126:	f000 fded 	bl	800cd04 <finite>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	f43f af44 	beq.w	800bfb8 <pow+0xe4>
 800c130:	4620      	mov	r0, r4
 800c132:	4629      	mov	r1, r5
 800c134:	f000 fde6 	bl	800cd04 <finite>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f43f af3d 	beq.w	800bfb8 <pow+0xe4>
 800c13e:	2304      	movs	r3, #4
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	4b0b      	ldr	r3, [pc, #44]	; (800c170 <pow+0x29c>)
 800c144:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800c148:	9305      	str	r3, [sp, #20]
 800c14a:	2300      	movs	r3, #0
 800c14c:	2400      	movs	r4, #0
 800c14e:	930c      	str	r3, [sp, #48]	; 0x30
 800c150:	2300      	movs	r3, #0
 800c152:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c156:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800c15a:	e7b8      	b.n	800c0ce <pow+0x1fa>
 800c15c:	a804      	add	r0, sp, #16
 800c15e:	f000 fdd7 	bl	800cd10 <matherr>
 800c162:	2800      	cmp	r0, #0
 800c164:	f47f af1e 	bne.w	800bfa4 <pow+0xd0>
 800c168:	e7b5      	b.n	800c0d6 <pow+0x202>
 800c16a:	bf00      	nop
 800c16c:	2000020c 	.word	0x2000020c
 800c170:	0800d888 	.word	0x0800d888
 800c174:	3ff00000 	.word	0x3ff00000
 800c178:	fff00000 	.word	0xfff00000
 800c17c:	3fe00000 	.word	0x3fe00000
 800c180:	47efffff 	.word	0x47efffff
 800c184:	c7efffff 	.word	0xc7efffff
 800c188:	7ff00000 	.word	0x7ff00000
 800c18c:	00000000 	.word	0x00000000

0800c190 <__ieee754_pow>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	b091      	sub	sp, #68	; 0x44
 800c196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c19a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800c19e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c1a2:	ea55 0302 	orrs.w	r3, r5, r2
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	4688      	mov	r8, r1
 800c1aa:	f000 84b7 	beq.w	800cb1c <__ieee754_pow+0x98c>
 800c1ae:	4b80      	ldr	r3, [pc, #512]	; (800c3b0 <__ieee754_pow+0x220>)
 800c1b0:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	4689      	mov	r9, r1
 800c1b8:	4682      	mov	sl, r0
 800c1ba:	dc09      	bgt.n	800c1d0 <__ieee754_pow+0x40>
 800c1bc:	d103      	bne.n	800c1c6 <__ieee754_pow+0x36>
 800c1be:	b938      	cbnz	r0, 800c1d0 <__ieee754_pow+0x40>
 800c1c0:	42a5      	cmp	r5, r4
 800c1c2:	dc0d      	bgt.n	800c1e0 <__ieee754_pow+0x50>
 800c1c4:	e001      	b.n	800c1ca <__ieee754_pow+0x3a>
 800c1c6:	429d      	cmp	r5, r3
 800c1c8:	dc02      	bgt.n	800c1d0 <__ieee754_pow+0x40>
 800c1ca:	429d      	cmp	r5, r3
 800c1cc:	d10e      	bne.n	800c1ec <__ieee754_pow+0x5c>
 800c1ce:	b16a      	cbz	r2, 800c1ec <__ieee754_pow+0x5c>
 800c1d0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c1d4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c1d8:	ea54 030a 	orrs.w	r3, r4, sl
 800c1dc:	f000 849e 	beq.w	800cb1c <__ieee754_pow+0x98c>
 800c1e0:	4874      	ldr	r0, [pc, #464]	; (800c3b4 <__ieee754_pow+0x224>)
 800c1e2:	b011      	add	sp, #68	; 0x44
 800c1e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	f000 bd94 	b.w	800cd14 <nan>
 800c1ec:	f1b9 0f00 	cmp.w	r9, #0
 800c1f0:	da53      	bge.n	800c29a <__ieee754_pow+0x10a>
 800c1f2:	4b71      	ldr	r3, [pc, #452]	; (800c3b8 <__ieee754_pow+0x228>)
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	dc4e      	bgt.n	800c296 <__ieee754_pow+0x106>
 800c1f8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c1fc:	429d      	cmp	r5, r3
 800c1fe:	dd4c      	ble.n	800c29a <__ieee754_pow+0x10a>
 800c200:	152b      	asrs	r3, r5, #20
 800c202:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c206:	2b14      	cmp	r3, #20
 800c208:	dd28      	ble.n	800c25c <__ieee754_pow+0xcc>
 800c20a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c20e:	fa22 f103 	lsr.w	r1, r2, r3
 800c212:	fa01 f303 	lsl.w	r3, r1, r3
 800c216:	4293      	cmp	r3, r2
 800c218:	d13f      	bne.n	800c29a <__ieee754_pow+0x10a>
 800c21a:	f001 0101 	and.w	r1, r1, #1
 800c21e:	f1c1 0302 	rsb	r3, r1, #2
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	2a00      	cmp	r2, #0
 800c226:	d15c      	bne.n	800c2e2 <__ieee754_pow+0x152>
 800c228:	4b61      	ldr	r3, [pc, #388]	; (800c3b0 <__ieee754_pow+0x220>)
 800c22a:	429d      	cmp	r5, r3
 800c22c:	d126      	bne.n	800c27c <__ieee754_pow+0xec>
 800c22e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c232:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c236:	ea53 030a 	orrs.w	r3, r3, sl
 800c23a:	f000 846f 	beq.w	800cb1c <__ieee754_pow+0x98c>
 800c23e:	4b5f      	ldr	r3, [pc, #380]	; (800c3bc <__ieee754_pow+0x22c>)
 800c240:	429c      	cmp	r4, r3
 800c242:	dd2c      	ble.n	800c29e <__ieee754_pow+0x10e>
 800c244:	2e00      	cmp	r6, #0
 800c246:	f280 846f 	bge.w	800cb28 <__ieee754_pow+0x998>
 800c24a:	f04f 0b00 	mov.w	fp, #0
 800c24e:	f04f 0c00 	mov.w	ip, #0
 800c252:	4658      	mov	r0, fp
 800c254:	4661      	mov	r1, ip
 800c256:	b011      	add	sp, #68	; 0x44
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	2a00      	cmp	r2, #0
 800c25e:	d13e      	bne.n	800c2de <__ieee754_pow+0x14e>
 800c260:	f1c3 0314 	rsb	r3, r3, #20
 800c264:	fa45 f103 	asr.w	r1, r5, r3
 800c268:	fa01 f303 	lsl.w	r3, r1, r3
 800c26c:	42ab      	cmp	r3, r5
 800c26e:	f040 8463 	bne.w	800cb38 <__ieee754_pow+0x9a8>
 800c272:	f001 0101 	and.w	r1, r1, #1
 800c276:	f1c1 0302 	rsb	r3, r1, #2
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	4b50      	ldr	r3, [pc, #320]	; (800c3c0 <__ieee754_pow+0x230>)
 800c27e:	429d      	cmp	r5, r3
 800c280:	d114      	bne.n	800c2ac <__ieee754_pow+0x11c>
 800c282:	2e00      	cmp	r6, #0
 800c284:	f280 8454 	bge.w	800cb30 <__ieee754_pow+0x9a0>
 800c288:	463a      	mov	r2, r7
 800c28a:	4643      	mov	r3, r8
 800c28c:	2000      	movs	r0, #0
 800c28e:	494c      	ldr	r1, [pc, #304]	; (800c3c0 <__ieee754_pow+0x230>)
 800c290:	f7f4 fa4c 	bl	800072c <__aeabi_ddiv>
 800c294:	e013      	b.n	800c2be <__ieee754_pow+0x12e>
 800c296:	2302      	movs	r3, #2
 800c298:	e7c3      	b.n	800c222 <__ieee754_pow+0x92>
 800c29a:	2300      	movs	r3, #0
 800c29c:	e7c1      	b.n	800c222 <__ieee754_pow+0x92>
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	dad3      	bge.n	800c24a <__ieee754_pow+0xba>
 800c2a2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800c2a6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800c2aa:	e7d2      	b.n	800c252 <__ieee754_pow+0xc2>
 800c2ac:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800c2b0:	d108      	bne.n	800c2c4 <__ieee754_pow+0x134>
 800c2b2:	463a      	mov	r2, r7
 800c2b4:	4643      	mov	r3, r8
 800c2b6:	4638      	mov	r0, r7
 800c2b8:	4641      	mov	r1, r8
 800c2ba:	f7f4 f90d 	bl	80004d8 <__aeabi_dmul>
 800c2be:	4683      	mov	fp, r0
 800c2c0:	468c      	mov	ip, r1
 800c2c2:	e7c6      	b.n	800c252 <__ieee754_pow+0xc2>
 800c2c4:	4b3f      	ldr	r3, [pc, #252]	; (800c3c4 <__ieee754_pow+0x234>)
 800c2c6:	429e      	cmp	r6, r3
 800c2c8:	d10b      	bne.n	800c2e2 <__ieee754_pow+0x152>
 800c2ca:	f1b9 0f00 	cmp.w	r9, #0
 800c2ce:	db08      	blt.n	800c2e2 <__ieee754_pow+0x152>
 800c2d0:	4638      	mov	r0, r7
 800c2d2:	4641      	mov	r1, r8
 800c2d4:	b011      	add	sp, #68	; 0x44
 800c2d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2da:	f000 bc63 	b.w	800cba4 <__ieee754_sqrt>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	4638      	mov	r0, r7
 800c2e4:	4641      	mov	r1, r8
 800c2e6:	f000 fd09 	bl	800ccfc <fabs>
 800c2ea:	4683      	mov	fp, r0
 800c2ec:	468c      	mov	ip, r1
 800c2ee:	f1ba 0f00 	cmp.w	sl, #0
 800c2f2:	d12b      	bne.n	800c34c <__ieee754_pow+0x1bc>
 800c2f4:	b124      	cbz	r4, 800c300 <__ieee754_pow+0x170>
 800c2f6:	4b32      	ldr	r3, [pc, #200]	; (800c3c0 <__ieee754_pow+0x230>)
 800c2f8:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d125      	bne.n	800c34c <__ieee754_pow+0x1bc>
 800c300:	2e00      	cmp	r6, #0
 800c302:	da07      	bge.n	800c314 <__ieee754_pow+0x184>
 800c304:	465a      	mov	r2, fp
 800c306:	4663      	mov	r3, ip
 800c308:	2000      	movs	r0, #0
 800c30a:	492d      	ldr	r1, [pc, #180]	; (800c3c0 <__ieee754_pow+0x230>)
 800c30c:	f7f4 fa0e 	bl	800072c <__aeabi_ddiv>
 800c310:	4683      	mov	fp, r0
 800c312:	468c      	mov	ip, r1
 800c314:	f1b9 0f00 	cmp.w	r9, #0
 800c318:	da9b      	bge.n	800c252 <__ieee754_pow+0xc2>
 800c31a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c31e:	9b00      	ldr	r3, [sp, #0]
 800c320:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c324:	4323      	orrs	r3, r4
 800c326:	d108      	bne.n	800c33a <__ieee754_pow+0x1aa>
 800c328:	465a      	mov	r2, fp
 800c32a:	4663      	mov	r3, ip
 800c32c:	4658      	mov	r0, fp
 800c32e:	4661      	mov	r1, ip
 800c330:	f7f3 ff1a 	bl	8000168 <__aeabi_dsub>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	e7aa      	b.n	800c290 <__ieee754_pow+0x100>
 800c33a:	9b00      	ldr	r3, [sp, #0]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d188      	bne.n	800c252 <__ieee754_pow+0xc2>
 800c340:	4658      	mov	r0, fp
 800c342:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800c346:	4683      	mov	fp, r0
 800c348:	469c      	mov	ip, r3
 800c34a:	e782      	b.n	800c252 <__ieee754_pow+0xc2>
 800c34c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800c350:	f109 33ff 	add.w	r3, r9, #4294967295
 800c354:	930d      	str	r3, [sp, #52]	; 0x34
 800c356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c358:	9b00      	ldr	r3, [sp, #0]
 800c35a:	4313      	orrs	r3, r2
 800c35c:	d104      	bne.n	800c368 <__ieee754_pow+0x1d8>
 800c35e:	463a      	mov	r2, r7
 800c360:	4643      	mov	r3, r8
 800c362:	4638      	mov	r0, r7
 800c364:	4641      	mov	r1, r8
 800c366:	e7e3      	b.n	800c330 <__ieee754_pow+0x1a0>
 800c368:	4b17      	ldr	r3, [pc, #92]	; (800c3c8 <__ieee754_pow+0x238>)
 800c36a:	429d      	cmp	r5, r3
 800c36c:	f340 80fe 	ble.w	800c56c <__ieee754_pow+0x3dc>
 800c370:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c374:	429d      	cmp	r5, r3
 800c376:	dd0b      	ble.n	800c390 <__ieee754_pow+0x200>
 800c378:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <__ieee754_pow+0x22c>)
 800c37a:	429c      	cmp	r4, r3
 800c37c:	dc0e      	bgt.n	800c39c <__ieee754_pow+0x20c>
 800c37e:	2e00      	cmp	r6, #0
 800c380:	f6bf af63 	bge.w	800c24a <__ieee754_pow+0xba>
 800c384:	a308      	add	r3, pc, #32	; (adr r3, 800c3a8 <__ieee754_pow+0x218>)
 800c386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38a:	4610      	mov	r0, r2
 800c38c:	4619      	mov	r1, r3
 800c38e:	e794      	b.n	800c2ba <__ieee754_pow+0x12a>
 800c390:	4b0e      	ldr	r3, [pc, #56]	; (800c3cc <__ieee754_pow+0x23c>)
 800c392:	429c      	cmp	r4, r3
 800c394:	ddf3      	ble.n	800c37e <__ieee754_pow+0x1ee>
 800c396:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <__ieee754_pow+0x230>)
 800c398:	429c      	cmp	r4, r3
 800c39a:	dd19      	ble.n	800c3d0 <__ieee754_pow+0x240>
 800c39c:	2e00      	cmp	r6, #0
 800c39e:	dcf1      	bgt.n	800c384 <__ieee754_pow+0x1f4>
 800c3a0:	e753      	b.n	800c24a <__ieee754_pow+0xba>
 800c3a2:	bf00      	nop
 800c3a4:	f3af 8000 	nop.w
 800c3a8:	8800759c 	.word	0x8800759c
 800c3ac:	7e37e43c 	.word	0x7e37e43c
 800c3b0:	7ff00000 	.word	0x7ff00000
 800c3b4:	0800d771 	.word	0x0800d771
 800c3b8:	433fffff 	.word	0x433fffff
 800c3bc:	3fefffff 	.word	0x3fefffff
 800c3c0:	3ff00000 	.word	0x3ff00000
 800c3c4:	3fe00000 	.word	0x3fe00000
 800c3c8:	41e00000 	.word	0x41e00000
 800c3cc:	3feffffe 	.word	0x3feffffe
 800c3d0:	4661      	mov	r1, ip
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	4b60      	ldr	r3, [pc, #384]	; (800c558 <__ieee754_pow+0x3c8>)
 800c3d6:	4658      	mov	r0, fp
 800c3d8:	f7f3 fec6 	bl	8000168 <__aeabi_dsub>
 800c3dc:	a354      	add	r3, pc, #336	; (adr r3, 800c530 <__ieee754_pow+0x3a0>)
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	f7f4 f877 	bl	80004d8 <__aeabi_dmul>
 800c3ea:	a353      	add	r3, pc, #332	; (adr r3, 800c538 <__ieee754_pow+0x3a8>)
 800c3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	460f      	mov	r7, r1
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	4629      	mov	r1, r5
 800c3f8:	f7f4 f86e 	bl	80004d8 <__aeabi_dmul>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4682      	mov	sl, r0
 800c400:	468b      	mov	fp, r1
 800c402:	4b56      	ldr	r3, [pc, #344]	; (800c55c <__ieee754_pow+0x3cc>)
 800c404:	4620      	mov	r0, r4
 800c406:	4629      	mov	r1, r5
 800c408:	f7f4 f866 	bl	80004d8 <__aeabi_dmul>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	a14b      	add	r1, pc, #300	; (adr r1, 800c540 <__ieee754_pow+0x3b0>)
 800c412:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c416:	f7f3 fea7 	bl	8000168 <__aeabi_dsub>
 800c41a:	4622      	mov	r2, r4
 800c41c:	462b      	mov	r3, r5
 800c41e:	f7f4 f85b 	bl	80004d8 <__aeabi_dmul>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	2000      	movs	r0, #0
 800c428:	494d      	ldr	r1, [pc, #308]	; (800c560 <__ieee754_pow+0x3d0>)
 800c42a:	f7f3 fe9d 	bl	8000168 <__aeabi_dsub>
 800c42e:	4622      	mov	r2, r4
 800c430:	462b      	mov	r3, r5
 800c432:	4680      	mov	r8, r0
 800c434:	4689      	mov	r9, r1
 800c436:	4620      	mov	r0, r4
 800c438:	4629      	mov	r1, r5
 800c43a:	f7f4 f84d 	bl	80004d8 <__aeabi_dmul>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4640      	mov	r0, r8
 800c444:	4649      	mov	r1, r9
 800c446:	f7f4 f847 	bl	80004d8 <__aeabi_dmul>
 800c44a:	a33f      	add	r3, pc, #252	; (adr r3, 800c548 <__ieee754_pow+0x3b8>)
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f4 f842 	bl	80004d8 <__aeabi_dmul>
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	4650      	mov	r0, sl
 800c45a:	4659      	mov	r1, fp
 800c45c:	f7f3 fe84 	bl	8000168 <__aeabi_dsub>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4604      	mov	r4, r0
 800c466:	460d      	mov	r5, r1
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	f7f3 fe7e 	bl	800016c <__adddf3>
 800c470:	2000      	movs	r0, #0
 800c472:	468b      	mov	fp, r1
 800c474:	4682      	mov	sl, r0
 800c476:	4632      	mov	r2, r6
 800c478:	463b      	mov	r3, r7
 800c47a:	f7f3 fe75 	bl	8000168 <__aeabi_dsub>
 800c47e:	4602      	mov	r2, r0
 800c480:	460b      	mov	r3, r1
 800c482:	4620      	mov	r0, r4
 800c484:	4629      	mov	r1, r5
 800c486:	f7f3 fe6f 	bl	8000168 <__aeabi_dsub>
 800c48a:	9b00      	ldr	r3, [sp, #0]
 800c48c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c48e:	3b01      	subs	r3, #1
 800c490:	4313      	orrs	r3, r2
 800c492:	f04f 0300 	mov.w	r3, #0
 800c496:	bf0c      	ite	eq
 800c498:	4c32      	ldreq	r4, [pc, #200]	; (800c564 <__ieee754_pow+0x3d4>)
 800c49a:	4c2f      	ldrne	r4, [pc, #188]	; (800c558 <__ieee754_pow+0x3c8>)
 800c49c:	4606      	mov	r6, r0
 800c49e:	e9cd 3400 	strd	r3, r4, [sp]
 800c4a2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c4a6:	2400      	movs	r4, #0
 800c4a8:	460f      	mov	r7, r1
 800c4aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	f7f3 fe59 	bl	8000168 <__aeabi_dsub>
 800c4b6:	4652      	mov	r2, sl
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	f7f4 f80d 	bl	80004d8 <__aeabi_dmul>
 800c4be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	4689      	mov	r9, r1
 800c4c6:	4630      	mov	r0, r6
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	f7f4 f805 	bl	80004d8 <__aeabi_dmul>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	460b      	mov	r3, r1
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	f7f3 fe49 	bl	800016c <__adddf3>
 800c4da:	4622      	mov	r2, r4
 800c4dc:	462b      	mov	r3, r5
 800c4de:	4680      	mov	r8, r0
 800c4e0:	4689      	mov	r9, r1
 800c4e2:	4650      	mov	r0, sl
 800c4e4:	4659      	mov	r1, fp
 800c4e6:	f7f3 fff7 	bl	80004d8 <__aeabi_dmul>
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	460d      	mov	r5, r1
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c4fa:	f7f3 fe37 	bl	800016c <__adddf3>
 800c4fe:	4b1a      	ldr	r3, [pc, #104]	; (800c568 <__ieee754_pow+0x3d8>)
 800c500:	4682      	mov	sl, r0
 800c502:	4299      	cmp	r1, r3
 800c504:	460f      	mov	r7, r1
 800c506:	460e      	mov	r6, r1
 800c508:	f340 82e1 	ble.w	800cace <__ieee754_pow+0x93e>
 800c50c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c510:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c514:	4303      	orrs	r3, r0
 800c516:	f000 81db 	beq.w	800c8d0 <__ieee754_pow+0x740>
 800c51a:	a30d      	add	r3, pc, #52	; (adr r3, 800c550 <__ieee754_pow+0x3c0>)
 800c51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c524:	f7f3 ffd8 	bl	80004d8 <__aeabi_dmul>
 800c528:	a309      	add	r3, pc, #36	; (adr r3, 800c550 <__ieee754_pow+0x3c0>)
 800c52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c52e:	e6c4      	b.n	800c2ba <__ieee754_pow+0x12a>
 800c530:	60000000 	.word	0x60000000
 800c534:	3ff71547 	.word	0x3ff71547
 800c538:	f85ddf44 	.word	0xf85ddf44
 800c53c:	3e54ae0b 	.word	0x3e54ae0b
 800c540:	55555555 	.word	0x55555555
 800c544:	3fd55555 	.word	0x3fd55555
 800c548:	652b82fe 	.word	0x652b82fe
 800c54c:	3ff71547 	.word	0x3ff71547
 800c550:	8800759c 	.word	0x8800759c
 800c554:	7e37e43c 	.word	0x7e37e43c
 800c558:	3ff00000 	.word	0x3ff00000
 800c55c:	3fd00000 	.word	0x3fd00000
 800c560:	3fe00000 	.word	0x3fe00000
 800c564:	bff00000 	.word	0xbff00000
 800c568:	408fffff 	.word	0x408fffff
 800c56c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	da08      	bge.n	800c588 <__ieee754_pow+0x3f8>
 800c576:	4658      	mov	r0, fp
 800c578:	4bcd      	ldr	r3, [pc, #820]	; (800c8b0 <__ieee754_pow+0x720>)
 800c57a:	4661      	mov	r1, ip
 800c57c:	f7f3 ffac 	bl	80004d8 <__aeabi_dmul>
 800c580:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c584:	4683      	mov	fp, r0
 800c586:	460c      	mov	r4, r1
 800c588:	1523      	asrs	r3, r4, #20
 800c58a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c58e:	4413      	add	r3, r2
 800c590:	930c      	str	r3, [sp, #48]	; 0x30
 800c592:	4bc8      	ldr	r3, [pc, #800]	; (800c8b4 <__ieee754_pow+0x724>)
 800c594:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c598:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c59c:	429c      	cmp	r4, r3
 800c59e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c5a2:	dd08      	ble.n	800c5b6 <__ieee754_pow+0x426>
 800c5a4:	4bc4      	ldr	r3, [pc, #784]	; (800c8b8 <__ieee754_pow+0x728>)
 800c5a6:	429c      	cmp	r4, r3
 800c5a8:	f340 815b 	ble.w	800c862 <__ieee754_pow+0x6d2>
 800c5ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	930c      	str	r3, [sp, #48]	; 0x30
 800c5b6:	f04f 0800 	mov.w	r8, #0
 800c5ba:	4658      	mov	r0, fp
 800c5bc:	4629      	mov	r1, r5
 800c5be:	4bbf      	ldr	r3, [pc, #764]	; (800c8bc <__ieee754_pow+0x72c>)
 800c5c0:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800c5c4:	444b      	add	r3, r9
 800c5c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5ca:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800c5ce:	461a      	mov	r2, r3
 800c5d0:	4623      	mov	r3, r4
 800c5d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c5d6:	f7f3 fdc7 	bl	8000168 <__aeabi_dsub>
 800c5da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c5de:	4606      	mov	r6, r0
 800c5e0:	460f      	mov	r7, r1
 800c5e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5e6:	f7f3 fdc1 	bl	800016c <__adddf3>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	49b3      	ldr	r1, [pc, #716]	; (800c8c0 <__ieee754_pow+0x730>)
 800c5f2:	f7f4 f89b 	bl	800072c <__aeabi_ddiv>
 800c5f6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f3 ff69 	bl	80004d8 <__aeabi_dmul>
 800c606:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c60a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800c60e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c612:	2300      	movs	r3, #0
 800c614:	2200      	movs	r2, #0
 800c616:	106d      	asrs	r5, r5, #1
 800c618:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800c61c:	9304      	str	r3, [sp, #16]
 800c61e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800c622:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c626:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800c62a:	4650      	mov	r0, sl
 800c62c:	4659      	mov	r1, fp
 800c62e:	4614      	mov	r4, r2
 800c630:	461d      	mov	r5, r3
 800c632:	f7f3 ff51 	bl	80004d8 <__aeabi_dmul>
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4630      	mov	r0, r6
 800c63c:	4639      	mov	r1, r7
 800c63e:	f7f3 fd93 	bl	8000168 <__aeabi_dsub>
 800c642:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	4620      	mov	r0, r4
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7f3 fd8b 	bl	8000168 <__aeabi_dsub>
 800c652:	4602      	mov	r2, r0
 800c654:	460b      	mov	r3, r1
 800c656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c65a:	f7f3 fd85 	bl	8000168 <__aeabi_dsub>
 800c65e:	4652      	mov	r2, sl
 800c660:	465b      	mov	r3, fp
 800c662:	f7f3 ff39 	bl	80004d8 <__aeabi_dmul>
 800c666:	4602      	mov	r2, r0
 800c668:	460b      	mov	r3, r1
 800c66a:	4630      	mov	r0, r6
 800c66c:	4639      	mov	r1, r7
 800c66e:	f7f3 fd7b 	bl	8000168 <__aeabi_dsub>
 800c672:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c676:	f7f3 ff2f 	bl	80004d8 <__aeabi_dmul>
 800c67a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c67e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c682:	4610      	mov	r0, r2
 800c684:	4619      	mov	r1, r3
 800c686:	f7f3 ff27 	bl	80004d8 <__aeabi_dmul>
 800c68a:	a377      	add	r3, pc, #476	; (adr r3, 800c868 <__ieee754_pow+0x6d8>)
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	4604      	mov	r4, r0
 800c692:	460d      	mov	r5, r1
 800c694:	f7f3 ff20 	bl	80004d8 <__aeabi_dmul>
 800c698:	a375      	add	r3, pc, #468	; (adr r3, 800c870 <__ieee754_pow+0x6e0>)
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f7f3 fd65 	bl	800016c <__adddf3>
 800c6a2:	4622      	mov	r2, r4
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	f7f3 ff17 	bl	80004d8 <__aeabi_dmul>
 800c6aa:	a373      	add	r3, pc, #460	; (adr r3, 800c878 <__ieee754_pow+0x6e8>)
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f7f3 fd5c 	bl	800016c <__adddf3>
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	462b      	mov	r3, r5
 800c6b8:	f7f3 ff0e 	bl	80004d8 <__aeabi_dmul>
 800c6bc:	a370      	add	r3, pc, #448	; (adr r3, 800c880 <__ieee754_pow+0x6f0>)
 800c6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c2:	f7f3 fd53 	bl	800016c <__adddf3>
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	462b      	mov	r3, r5
 800c6ca:	f7f3 ff05 	bl	80004d8 <__aeabi_dmul>
 800c6ce:	a36e      	add	r3, pc, #440	; (adr r3, 800c888 <__ieee754_pow+0x6f8>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	f7f3 fd4a 	bl	800016c <__adddf3>
 800c6d8:	4622      	mov	r2, r4
 800c6da:	462b      	mov	r3, r5
 800c6dc:	f7f3 fefc 	bl	80004d8 <__aeabi_dmul>
 800c6e0:	a36b      	add	r3, pc, #428	; (adr r3, 800c890 <__ieee754_pow+0x700>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	f7f3 fd41 	bl	800016c <__adddf3>
 800c6ea:	4622      	mov	r2, r4
 800c6ec:	4606      	mov	r6, r0
 800c6ee:	460f      	mov	r7, r1
 800c6f0:	462b      	mov	r3, r5
 800c6f2:	4620      	mov	r0, r4
 800c6f4:	4629      	mov	r1, r5
 800c6f6:	f7f3 feef 	bl	80004d8 <__aeabi_dmul>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4630      	mov	r0, r6
 800c700:	4639      	mov	r1, r7
 800c702:	f7f3 fee9 	bl	80004d8 <__aeabi_dmul>
 800c706:	4604      	mov	r4, r0
 800c708:	460d      	mov	r5, r1
 800c70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c70e:	4652      	mov	r2, sl
 800c710:	465b      	mov	r3, fp
 800c712:	f7f3 fd2b 	bl	800016c <__adddf3>
 800c716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c71a:	f7f3 fedd 	bl	80004d8 <__aeabi_dmul>
 800c71e:	4622      	mov	r2, r4
 800c720:	462b      	mov	r3, r5
 800c722:	f7f3 fd23 	bl	800016c <__adddf3>
 800c726:	4652      	mov	r2, sl
 800c728:	4606      	mov	r6, r0
 800c72a:	460f      	mov	r7, r1
 800c72c:	465b      	mov	r3, fp
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f3 fed1 	bl	80004d8 <__aeabi_dmul>
 800c736:	2200      	movs	r2, #0
 800c738:	4b62      	ldr	r3, [pc, #392]	; (800c8c4 <__ieee754_pow+0x734>)
 800c73a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c73e:	f7f3 fd15 	bl	800016c <__adddf3>
 800c742:	4632      	mov	r2, r6
 800c744:	463b      	mov	r3, r7
 800c746:	f7f3 fd11 	bl	800016c <__adddf3>
 800c74a:	9804      	ldr	r0, [sp, #16]
 800c74c:	460d      	mov	r5, r1
 800c74e:	4604      	mov	r4, r0
 800c750:	4602      	mov	r2, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4650      	mov	r0, sl
 800c756:	4659      	mov	r1, fp
 800c758:	f7f3 febe 	bl	80004d8 <__aeabi_dmul>
 800c75c:	2200      	movs	r2, #0
 800c75e:	4682      	mov	sl, r0
 800c760:	468b      	mov	fp, r1
 800c762:	4b58      	ldr	r3, [pc, #352]	; (800c8c4 <__ieee754_pow+0x734>)
 800c764:	4620      	mov	r0, r4
 800c766:	4629      	mov	r1, r5
 800c768:	f7f3 fcfe 	bl	8000168 <__aeabi_dsub>
 800c76c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c770:	f7f3 fcfa 	bl	8000168 <__aeabi_dsub>
 800c774:	4602      	mov	r2, r0
 800c776:	460b      	mov	r3, r1
 800c778:	4630      	mov	r0, r6
 800c77a:	4639      	mov	r1, r7
 800c77c:	f7f3 fcf4 	bl	8000168 <__aeabi_dsub>
 800c780:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c784:	f7f3 fea8 	bl	80004d8 <__aeabi_dmul>
 800c788:	4622      	mov	r2, r4
 800c78a:	4606      	mov	r6, r0
 800c78c:	460f      	mov	r7, r1
 800c78e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c792:	462b      	mov	r3, r5
 800c794:	f7f3 fea0 	bl	80004d8 <__aeabi_dmul>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4630      	mov	r0, r6
 800c79e:	4639      	mov	r1, r7
 800c7a0:	f7f3 fce4 	bl	800016c <__adddf3>
 800c7a4:	4606      	mov	r6, r0
 800c7a6:	460f      	mov	r7, r1
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	460b      	mov	r3, r1
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	4659      	mov	r1, fp
 800c7b0:	f7f3 fcdc 	bl	800016c <__adddf3>
 800c7b4:	a338      	add	r3, pc, #224	; (adr r3, 800c898 <__ieee754_pow+0x708>)
 800c7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ba:	9804      	ldr	r0, [sp, #16]
 800c7bc:	460d      	mov	r5, r1
 800c7be:	4604      	mov	r4, r0
 800c7c0:	f7f3 fe8a 	bl	80004d8 <__aeabi_dmul>
 800c7c4:	4652      	mov	r2, sl
 800c7c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7ca:	465b      	mov	r3, fp
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	4629      	mov	r1, r5
 800c7d0:	f7f3 fcca 	bl	8000168 <__aeabi_dsub>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	460b      	mov	r3, r1
 800c7d8:	4630      	mov	r0, r6
 800c7da:	4639      	mov	r1, r7
 800c7dc:	f7f3 fcc4 	bl	8000168 <__aeabi_dsub>
 800c7e0:	a32f      	add	r3, pc, #188	; (adr r3, 800c8a0 <__ieee754_pow+0x710>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 fe77 	bl	80004d8 <__aeabi_dmul>
 800c7ea:	a32f      	add	r3, pc, #188	; (adr r3, 800c8a8 <__ieee754_pow+0x718>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	460f      	mov	r7, r1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 fe6e 	bl	80004d8 <__aeabi_dmul>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f3 fcb2 	bl	800016c <__adddf3>
 800c808:	4b2f      	ldr	r3, [pc, #188]	; (800c8c8 <__ieee754_pow+0x738>)
 800c80a:	444b      	add	r3, r9
 800c80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c810:	f7f3 fcac 	bl	800016c <__adddf3>
 800c814:	4604      	mov	r4, r0
 800c816:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c818:	460d      	mov	r5, r1
 800c81a:	f7f3 fdf3 	bl	8000404 <__aeabi_i2d>
 800c81e:	4606      	mov	r6, r0
 800c820:	460f      	mov	r7, r1
 800c822:	4b2a      	ldr	r3, [pc, #168]	; (800c8cc <__ieee754_pow+0x73c>)
 800c824:	4622      	mov	r2, r4
 800c826:	444b      	add	r3, r9
 800c828:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c82c:	462b      	mov	r3, r5
 800c82e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c832:	f7f3 fc9b 	bl	800016c <__adddf3>
 800c836:	4642      	mov	r2, r8
 800c838:	464b      	mov	r3, r9
 800c83a:	f7f3 fc97 	bl	800016c <__adddf3>
 800c83e:	4632      	mov	r2, r6
 800c840:	463b      	mov	r3, r7
 800c842:	f7f3 fc93 	bl	800016c <__adddf3>
 800c846:	9804      	ldr	r0, [sp, #16]
 800c848:	4632      	mov	r2, r6
 800c84a:	463b      	mov	r3, r7
 800c84c:	4682      	mov	sl, r0
 800c84e:	468b      	mov	fp, r1
 800c850:	f7f3 fc8a 	bl	8000168 <__aeabi_dsub>
 800c854:	4642      	mov	r2, r8
 800c856:	464b      	mov	r3, r9
 800c858:	f7f3 fc86 	bl	8000168 <__aeabi_dsub>
 800c85c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c860:	e60b      	b.n	800c47a <__ieee754_pow+0x2ea>
 800c862:	f04f 0801 	mov.w	r8, #1
 800c866:	e6a8      	b.n	800c5ba <__ieee754_pow+0x42a>
 800c868:	4a454eef 	.word	0x4a454eef
 800c86c:	3fca7e28 	.word	0x3fca7e28
 800c870:	93c9db65 	.word	0x93c9db65
 800c874:	3fcd864a 	.word	0x3fcd864a
 800c878:	a91d4101 	.word	0xa91d4101
 800c87c:	3fd17460 	.word	0x3fd17460
 800c880:	518f264d 	.word	0x518f264d
 800c884:	3fd55555 	.word	0x3fd55555
 800c888:	db6fabff 	.word	0xdb6fabff
 800c88c:	3fdb6db6 	.word	0x3fdb6db6
 800c890:	33333303 	.word	0x33333303
 800c894:	3fe33333 	.word	0x3fe33333
 800c898:	e0000000 	.word	0xe0000000
 800c89c:	3feec709 	.word	0x3feec709
 800c8a0:	dc3a03fd 	.word	0xdc3a03fd
 800c8a4:	3feec709 	.word	0x3feec709
 800c8a8:	145b01f5 	.word	0x145b01f5
 800c8ac:	be3e2fe0 	.word	0xbe3e2fe0
 800c8b0:	43400000 	.word	0x43400000
 800c8b4:	0003988e 	.word	0x0003988e
 800c8b8:	000bb679 	.word	0x000bb679
 800c8bc:	0800d890 	.word	0x0800d890
 800c8c0:	3ff00000 	.word	0x3ff00000
 800c8c4:	40080000 	.word	0x40080000
 800c8c8:	0800d8b0 	.word	0x0800d8b0
 800c8cc:	0800d8a0 	.word	0x0800d8a0
 800c8d0:	a39b      	add	r3, pc, #620	; (adr r3, 800cb40 <__ieee754_pow+0x9b0>)
 800c8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d6:	4640      	mov	r0, r8
 800c8d8:	4649      	mov	r1, r9
 800c8da:	f7f3 fc47 	bl	800016c <__adddf3>
 800c8de:	4622      	mov	r2, r4
 800c8e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8e4:	462b      	mov	r3, r5
 800c8e6:	4650      	mov	r0, sl
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	f7f3 fc3d 	bl	8000168 <__aeabi_dsub>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f6:	f7f4 f87f 	bl	80009f8 <__aeabi_dcmpgt>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	f47f ae0d 	bne.w	800c51a <__ieee754_pow+0x38a>
 800c900:	4aa3      	ldr	r2, [pc, #652]	; (800cb90 <__ieee754_pow+0xa00>)
 800c902:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c906:	4293      	cmp	r3, r2
 800c908:	f340 8103 	ble.w	800cb12 <__ieee754_pow+0x982>
 800c90c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c910:	2000      	movs	r0, #0
 800c912:	151b      	asrs	r3, r3, #20
 800c914:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c918:	fa4a f303 	asr.w	r3, sl, r3
 800c91c:	4433      	add	r3, r6
 800c91e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c922:	4f9c      	ldr	r7, [pc, #624]	; (800cb94 <__ieee754_pow+0xa04>)
 800c924:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c928:	4117      	asrs	r7, r2
 800c92a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c92e:	ea23 0107 	bic.w	r1, r3, r7
 800c932:	f1c2 0214 	rsb	r2, r2, #20
 800c936:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c93a:	fa4a fa02 	asr.w	sl, sl, r2
 800c93e:	2e00      	cmp	r6, #0
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4620      	mov	r0, r4
 800c946:	4629      	mov	r1, r5
 800c948:	bfb8      	it	lt
 800c94a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c94e:	f7f3 fc0b 	bl	8000168 <__aeabi_dsub>
 800c952:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c95a:	4642      	mov	r2, r8
 800c95c:	464b      	mov	r3, r9
 800c95e:	f7f3 fc05 	bl	800016c <__adddf3>
 800c962:	a379      	add	r3, pc, #484	; (adr r3, 800cb48 <__ieee754_pow+0x9b8>)
 800c964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c968:	2000      	movs	r0, #0
 800c96a:	460d      	mov	r5, r1
 800c96c:	4604      	mov	r4, r0
 800c96e:	f7f3 fdb3 	bl	80004d8 <__aeabi_dmul>
 800c972:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	f7f3 fbf3 	bl	8000168 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4640      	mov	r0, r8
 800c988:	4649      	mov	r1, r9
 800c98a:	f7f3 fbed 	bl	8000168 <__aeabi_dsub>
 800c98e:	a370      	add	r3, pc, #448	; (adr r3, 800cb50 <__ieee754_pow+0x9c0>)
 800c990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c994:	f7f3 fda0 	bl	80004d8 <__aeabi_dmul>
 800c998:	a36f      	add	r3, pc, #444	; (adr r3, 800cb58 <__ieee754_pow+0x9c8>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4689      	mov	r9, r1
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	f7f3 fd97 	bl	80004d8 <__aeabi_dmul>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	4649      	mov	r1, r9
 800c9b2:	f7f3 fbdb 	bl	800016c <__adddf3>
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	460d      	mov	r5, r1
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4630      	mov	r0, r6
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	f7f3 fbd3 	bl	800016c <__adddf3>
 800c9c6:	4632      	mov	r2, r6
 800c9c8:	463b      	mov	r3, r7
 800c9ca:	4680      	mov	r8, r0
 800c9cc:	4689      	mov	r9, r1
 800c9ce:	f7f3 fbcb 	bl	8000168 <__aeabi_dsub>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	4629      	mov	r1, r5
 800c9da:	f7f3 fbc5 	bl	8000168 <__aeabi_dsub>
 800c9de:	4642      	mov	r2, r8
 800c9e0:	4606      	mov	r6, r0
 800c9e2:	460f      	mov	r7, r1
 800c9e4:	464b      	mov	r3, r9
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	f7f3 fd75 	bl	80004d8 <__aeabi_dmul>
 800c9ee:	a35c      	add	r3, pc, #368	; (adr r3, 800cb60 <__ieee754_pow+0x9d0>)
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	460d      	mov	r5, r1
 800c9f8:	f7f3 fd6e 	bl	80004d8 <__aeabi_dmul>
 800c9fc:	a35a      	add	r3, pc, #360	; (adr r3, 800cb68 <__ieee754_pow+0x9d8>)
 800c9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca02:	f7f3 fbb1 	bl	8000168 <__aeabi_dsub>
 800ca06:	4622      	mov	r2, r4
 800ca08:	462b      	mov	r3, r5
 800ca0a:	f7f3 fd65 	bl	80004d8 <__aeabi_dmul>
 800ca0e:	a358      	add	r3, pc, #352	; (adr r3, 800cb70 <__ieee754_pow+0x9e0>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f3 fbaa 	bl	800016c <__adddf3>
 800ca18:	4622      	mov	r2, r4
 800ca1a:	462b      	mov	r3, r5
 800ca1c:	f7f3 fd5c 	bl	80004d8 <__aeabi_dmul>
 800ca20:	a355      	add	r3, pc, #340	; (adr r3, 800cb78 <__ieee754_pow+0x9e8>)
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f7f3 fb9f 	bl	8000168 <__aeabi_dsub>
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	462b      	mov	r3, r5
 800ca2e:	f7f3 fd53 	bl	80004d8 <__aeabi_dmul>
 800ca32:	a353      	add	r3, pc, #332	; (adr r3, 800cb80 <__ieee754_pow+0x9f0>)
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f7f3 fb98 	bl	800016c <__adddf3>
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	462b      	mov	r3, r5
 800ca40:	f7f3 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4640      	mov	r0, r8
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	f7f3 fb8c 	bl	8000168 <__aeabi_dsub>
 800ca50:	4604      	mov	r4, r0
 800ca52:	460d      	mov	r5, r1
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	4640      	mov	r0, r8
 800ca5a:	4649      	mov	r1, r9
 800ca5c:	f7f3 fd3c 	bl	80004d8 <__aeabi_dmul>
 800ca60:	2200      	movs	r2, #0
 800ca62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	f7f3 fb7b 	bl	8000168 <__aeabi_dsub>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca7a:	f7f3 fe57 	bl	800072c <__aeabi_ddiv>
 800ca7e:	4632      	mov	r2, r6
 800ca80:	4604      	mov	r4, r0
 800ca82:	460d      	mov	r5, r1
 800ca84:	463b      	mov	r3, r7
 800ca86:	4640      	mov	r0, r8
 800ca88:	4649      	mov	r1, r9
 800ca8a:	f7f3 fd25 	bl	80004d8 <__aeabi_dmul>
 800ca8e:	4632      	mov	r2, r6
 800ca90:	463b      	mov	r3, r7
 800ca92:	f7f3 fb6b 	bl	800016c <__adddf3>
 800ca96:	4602      	mov	r2, r0
 800ca98:	460b      	mov	r3, r1
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	f7f3 fb63 	bl	8000168 <__aeabi_dsub>
 800caa2:	4642      	mov	r2, r8
 800caa4:	464b      	mov	r3, r9
 800caa6:	f7f3 fb5f 	bl	8000168 <__aeabi_dsub>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	2000      	movs	r0, #0
 800cab0:	4939      	ldr	r1, [pc, #228]	; (800cb98 <__ieee754_pow+0xa08>)
 800cab2:	f7f3 fb59 	bl	8000168 <__aeabi_dsub>
 800cab6:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800caba:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800cabe:	da2b      	bge.n	800cb18 <__ieee754_pow+0x988>
 800cac0:	4652      	mov	r2, sl
 800cac2:	f000 f9b9 	bl	800ce38 <scalbn>
 800cac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800caca:	f7ff bbf6 	b.w	800c2ba <__ieee754_pow+0x12a>
 800cace:	4b33      	ldr	r3, [pc, #204]	; (800cb9c <__ieee754_pow+0xa0c>)
 800cad0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800cad4:	429f      	cmp	r7, r3
 800cad6:	f77f af13 	ble.w	800c900 <__ieee754_pow+0x770>
 800cada:	4b31      	ldr	r3, [pc, #196]	; (800cba0 <__ieee754_pow+0xa10>)
 800cadc:	440b      	add	r3, r1
 800cade:	4303      	orrs	r3, r0
 800cae0:	d00b      	beq.n	800cafa <__ieee754_pow+0x96a>
 800cae2:	a329      	add	r3, pc, #164	; (adr r3, 800cb88 <__ieee754_pow+0x9f8>)
 800cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800caec:	f7f3 fcf4 	bl	80004d8 <__aeabi_dmul>
 800caf0:	a325      	add	r3, pc, #148	; (adr r3, 800cb88 <__ieee754_pow+0x9f8>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7ff bbe0 	b.w	800c2ba <__ieee754_pow+0x12a>
 800cafa:	4622      	mov	r2, r4
 800cafc:	462b      	mov	r3, r5
 800cafe:	f7f3 fb33 	bl	8000168 <__aeabi_dsub>
 800cb02:	4642      	mov	r2, r8
 800cb04:	464b      	mov	r3, r9
 800cb06:	f7f3 ff6d 	bl	80009e4 <__aeabi_dcmpge>
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	f43f aef8 	beq.w	800c900 <__ieee754_pow+0x770>
 800cb10:	e7e7      	b.n	800cae2 <__ieee754_pow+0x952>
 800cb12:	f04f 0a00 	mov.w	sl, #0
 800cb16:	e71e      	b.n	800c956 <__ieee754_pow+0x7c6>
 800cb18:	4621      	mov	r1, r4
 800cb1a:	e7d4      	b.n	800cac6 <__ieee754_pow+0x936>
 800cb1c:	f04f 0b00 	mov.w	fp, #0
 800cb20:	f8df c074 	ldr.w	ip, [pc, #116]	; 800cb98 <__ieee754_pow+0xa08>
 800cb24:	f7ff bb95 	b.w	800c252 <__ieee754_pow+0xc2>
 800cb28:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800cb2c:	f7ff bb91 	b.w	800c252 <__ieee754_pow+0xc2>
 800cb30:	4638      	mov	r0, r7
 800cb32:	4641      	mov	r1, r8
 800cb34:	f7ff bbc3 	b.w	800c2be <__ieee754_pow+0x12e>
 800cb38:	9200      	str	r2, [sp, #0]
 800cb3a:	f7ff bb9f 	b.w	800c27c <__ieee754_pow+0xec>
 800cb3e:	bf00      	nop
 800cb40:	652b82fe 	.word	0x652b82fe
 800cb44:	3c971547 	.word	0x3c971547
 800cb48:	00000000 	.word	0x00000000
 800cb4c:	3fe62e43 	.word	0x3fe62e43
 800cb50:	fefa39ef 	.word	0xfefa39ef
 800cb54:	3fe62e42 	.word	0x3fe62e42
 800cb58:	0ca86c39 	.word	0x0ca86c39
 800cb5c:	be205c61 	.word	0xbe205c61
 800cb60:	72bea4d0 	.word	0x72bea4d0
 800cb64:	3e663769 	.word	0x3e663769
 800cb68:	c5d26bf1 	.word	0xc5d26bf1
 800cb6c:	3ebbbd41 	.word	0x3ebbbd41
 800cb70:	af25de2c 	.word	0xaf25de2c
 800cb74:	3f11566a 	.word	0x3f11566a
 800cb78:	16bebd93 	.word	0x16bebd93
 800cb7c:	3f66c16c 	.word	0x3f66c16c
 800cb80:	5555553e 	.word	0x5555553e
 800cb84:	3fc55555 	.word	0x3fc55555
 800cb88:	c2f8f359 	.word	0xc2f8f359
 800cb8c:	01a56e1f 	.word	0x01a56e1f
 800cb90:	3fe00000 	.word	0x3fe00000
 800cb94:	000fffff 	.word	0x000fffff
 800cb98:	3ff00000 	.word	0x3ff00000
 800cb9c:	4090cbff 	.word	0x4090cbff
 800cba0:	3f6f3400 	.word	0x3f6f3400

0800cba4 <__ieee754_sqrt>:
 800cba4:	4b54      	ldr	r3, [pc, #336]	; (800ccf8 <__ieee754_sqrt+0x154>)
 800cba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	438b      	bics	r3, r1
 800cbac:	4606      	mov	r6, r0
 800cbae:	460d      	mov	r5, r1
 800cbb0:	460a      	mov	r2, r1
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	d10f      	bne.n	800cbd6 <__ieee754_sqrt+0x32>
 800cbb6:	4602      	mov	r2, r0
 800cbb8:	460b      	mov	r3, r1
 800cbba:	f7f3 fc8d 	bl	80004d8 <__aeabi_dmul>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f7f3 fad1 	bl	800016c <__adddf3>
 800cbca:	4606      	mov	r6, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	4629      	mov	r1, r5
 800cbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbd6:	2900      	cmp	r1, #0
 800cbd8:	4607      	mov	r7, r0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	dc0e      	bgt.n	800cbfc <__ieee754_sqrt+0x58>
 800cbde:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cbe2:	ea5c 0707 	orrs.w	r7, ip, r7
 800cbe6:	d0f2      	beq.n	800cbce <__ieee754_sqrt+0x2a>
 800cbe8:	b141      	cbz	r1, 800cbfc <__ieee754_sqrt+0x58>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	f7f3 fabb 	bl	8000168 <__aeabi_dsub>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	f7f3 fd99 	bl	800072c <__aeabi_ddiv>
 800cbfa:	e7e6      	b.n	800cbca <__ieee754_sqrt+0x26>
 800cbfc:	1512      	asrs	r2, r2, #20
 800cbfe:	d074      	beq.n	800ccea <__ieee754_sqrt+0x146>
 800cc00:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cc04:	07d5      	lsls	r5, r2, #31
 800cc06:	f04f 0500 	mov.w	r5, #0
 800cc0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cc0e:	bf48      	it	mi
 800cc10:	0fd9      	lsrmi	r1, r3, #31
 800cc12:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800cc16:	bf44      	itt	mi
 800cc18:	005b      	lslmi	r3, r3, #1
 800cc1a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800cc1e:	1051      	asrs	r1, r2, #1
 800cc20:	0fda      	lsrs	r2, r3, #31
 800cc22:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800cc26:	4628      	mov	r0, r5
 800cc28:	2216      	movs	r2, #22
 800cc2a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	1987      	adds	r7, r0, r6
 800cc32:	42a7      	cmp	r7, r4
 800cc34:	bfde      	ittt	le
 800cc36:	19b8      	addle	r0, r7, r6
 800cc38:	1be4      	suble	r4, r4, r7
 800cc3a:	19ad      	addle	r5, r5, r6
 800cc3c:	0fdf      	lsrs	r7, r3, #31
 800cc3e:	3a01      	subs	r2, #1
 800cc40:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800cc44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc48:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc4c:	d1f0      	bne.n	800cc30 <__ieee754_sqrt+0x8c>
 800cc4e:	f04f 0c20 	mov.w	ip, #32
 800cc52:	4696      	mov	lr, r2
 800cc54:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cc58:	4284      	cmp	r4, r0
 800cc5a:	eb06 070e 	add.w	r7, r6, lr
 800cc5e:	dc02      	bgt.n	800cc66 <__ieee754_sqrt+0xc2>
 800cc60:	d112      	bne.n	800cc88 <__ieee754_sqrt+0xe4>
 800cc62:	429f      	cmp	r7, r3
 800cc64:	d810      	bhi.n	800cc88 <__ieee754_sqrt+0xe4>
 800cc66:	2f00      	cmp	r7, #0
 800cc68:	eb07 0e06 	add.w	lr, r7, r6
 800cc6c:	da42      	bge.n	800ccf4 <__ieee754_sqrt+0x150>
 800cc6e:	f1be 0f00 	cmp.w	lr, #0
 800cc72:	db3f      	blt.n	800ccf4 <__ieee754_sqrt+0x150>
 800cc74:	f100 0801 	add.w	r8, r0, #1
 800cc78:	1a24      	subs	r4, r4, r0
 800cc7a:	4640      	mov	r0, r8
 800cc7c:	429f      	cmp	r7, r3
 800cc7e:	bf88      	it	hi
 800cc80:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800cc84:	1bdb      	subs	r3, r3, r7
 800cc86:	4432      	add	r2, r6
 800cc88:	0064      	lsls	r4, r4, #1
 800cc8a:	f1bc 0c01 	subs.w	ip, ip, #1
 800cc8e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800cc92:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cc96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cc9a:	d1dd      	bne.n	800cc58 <__ieee754_sqrt+0xb4>
 800cc9c:	4323      	orrs	r3, r4
 800cc9e:	d006      	beq.n	800ccae <__ieee754_sqrt+0x10a>
 800cca0:	1c54      	adds	r4, r2, #1
 800cca2:	bf0b      	itete	eq
 800cca4:	4662      	moveq	r2, ip
 800cca6:	3201      	addne	r2, #1
 800cca8:	3501      	addeq	r5, #1
 800ccaa:	f022 0201 	bicne.w	r2, r2, #1
 800ccae:	106b      	asrs	r3, r5, #1
 800ccb0:	0852      	lsrs	r2, r2, #1
 800ccb2:	07e8      	lsls	r0, r5, #31
 800ccb4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ccb8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ccbc:	bf48      	it	mi
 800ccbe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ccc2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800ccc6:	4616      	mov	r6, r2
 800ccc8:	e781      	b.n	800cbce <__ieee754_sqrt+0x2a>
 800ccca:	0adc      	lsrs	r4, r3, #11
 800cccc:	3915      	subs	r1, #21
 800ccce:	055b      	lsls	r3, r3, #21
 800ccd0:	2c00      	cmp	r4, #0
 800ccd2:	d0fa      	beq.n	800ccca <__ieee754_sqrt+0x126>
 800ccd4:	02e6      	lsls	r6, r4, #11
 800ccd6:	d50a      	bpl.n	800ccee <__ieee754_sqrt+0x14a>
 800ccd8:	f1c2 0020 	rsb	r0, r2, #32
 800ccdc:	fa23 f000 	lsr.w	r0, r3, r0
 800cce0:	1e55      	subs	r5, r2, #1
 800cce2:	4093      	lsls	r3, r2
 800cce4:	4304      	orrs	r4, r0
 800cce6:	1b4a      	subs	r2, r1, r5
 800cce8:	e78a      	b.n	800cc00 <__ieee754_sqrt+0x5c>
 800ccea:	4611      	mov	r1, r2
 800ccec:	e7f0      	b.n	800ccd0 <__ieee754_sqrt+0x12c>
 800ccee:	0064      	lsls	r4, r4, #1
 800ccf0:	3201      	adds	r2, #1
 800ccf2:	e7ef      	b.n	800ccd4 <__ieee754_sqrt+0x130>
 800ccf4:	4680      	mov	r8, r0
 800ccf6:	e7bf      	b.n	800cc78 <__ieee754_sqrt+0xd4>
 800ccf8:	7ff00000 	.word	0x7ff00000

0800ccfc <fabs>:
 800ccfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd00:	4619      	mov	r1, r3
 800cd02:	4770      	bx	lr

0800cd04 <finite>:
 800cd04:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800cd08:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800cd0c:	0fc0      	lsrs	r0, r0, #31
 800cd0e:	4770      	bx	lr

0800cd10 <matherr>:
 800cd10:	2000      	movs	r0, #0
 800cd12:	4770      	bx	lr

0800cd14 <nan>:
 800cd14:	2000      	movs	r0, #0
 800cd16:	4901      	ldr	r1, [pc, #4]	; (800cd1c <nan+0x8>)
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	7ff80000 	.word	0x7ff80000

0800cd20 <rint>:
 800cd20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd26:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800cd2a:	f1bc 0f13 	cmp.w	ip, #19
 800cd2e:	4604      	mov	r4, r0
 800cd30:	460d      	mov	r5, r1
 800cd32:	460b      	mov	r3, r1
 800cd34:	4606      	mov	r6, r0
 800cd36:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800cd3a:	dc5a      	bgt.n	800cdf2 <rint+0xd2>
 800cd3c:	f1bc 0f00 	cmp.w	ip, #0
 800cd40:	da2b      	bge.n	800cd9a <rint+0x7a>
 800cd42:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cd46:	4302      	orrs	r2, r0
 800cd48:	d023      	beq.n	800cd92 <rint+0x72>
 800cd4a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800cd4e:	4302      	orrs	r2, r0
 800cd50:	4256      	negs	r6, r2
 800cd52:	4316      	orrs	r6, r2
 800cd54:	0c4b      	lsrs	r3, r1, #17
 800cd56:	0b36      	lsrs	r6, r6, #12
 800cd58:	4934      	ldr	r1, [pc, #208]	; (800ce2c <rint+0x10c>)
 800cd5a:	045b      	lsls	r3, r3, #17
 800cd5c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800cd60:	ea46 0503 	orr.w	r5, r6, r3
 800cd64:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800cd68:	4602      	mov	r2, r0
 800cd6a:	462b      	mov	r3, r5
 800cd6c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800cd70:	4620      	mov	r0, r4
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7f3 f9fa 	bl	800016c <__adddf3>
 800cd78:	e9cd 0100 	strd	r0, r1, [sp]
 800cd7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cd80:	462b      	mov	r3, r5
 800cd82:	4622      	mov	r2, r4
 800cd84:	f7f3 f9f0 	bl	8000168 <__aeabi_dsub>
 800cd88:	4604      	mov	r4, r0
 800cd8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd8e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800cd92:	4620      	mov	r0, r4
 800cd94:	4629      	mov	r1, r5
 800cd96:	b003      	add	sp, #12
 800cd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd9a:	4a25      	ldr	r2, [pc, #148]	; (800ce30 <rint+0x110>)
 800cd9c:	fa42 f20c 	asr.w	r2, r2, ip
 800cda0:	4011      	ands	r1, r2
 800cda2:	4301      	orrs	r1, r0
 800cda4:	d0f5      	beq.n	800cd92 <rint+0x72>
 800cda6:	0852      	lsrs	r2, r2, #1
 800cda8:	ea05 0102 	and.w	r1, r5, r2
 800cdac:	ea50 0601 	orrs.w	r6, r0, r1
 800cdb0:	d00c      	beq.n	800cdcc <rint+0xac>
 800cdb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cdb6:	f1bc 0f13 	cmp.w	ip, #19
 800cdba:	bf0c      	ite	eq
 800cdbc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800cdc0:	2600      	movne	r6, #0
 800cdc2:	ea25 0202 	bic.w	r2, r5, r2
 800cdc6:	fa43 f30c 	asr.w	r3, r3, ip
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	4917      	ldr	r1, [pc, #92]	; (800ce2c <rint+0x10c>)
 800cdce:	4632      	mov	r2, r6
 800cdd0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800cdd4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cdd8:	4620      	mov	r0, r4
 800cdda:	4629      	mov	r1, r5
 800cddc:	f7f3 f9c6 	bl	800016c <__adddf3>
 800cde0:	e9cd 0100 	strd	r0, r1, [sp]
 800cde4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cde8:	4622      	mov	r2, r4
 800cdea:	462b      	mov	r3, r5
 800cdec:	f7f3 f9bc 	bl	8000168 <__aeabi_dsub>
 800cdf0:	e008      	b.n	800ce04 <rint+0xe4>
 800cdf2:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800cdf6:	dd08      	ble.n	800ce0a <rint+0xea>
 800cdf8:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800cdfc:	d1c9      	bne.n	800cd92 <rint+0x72>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	f7f3 f9b4 	bl	800016c <__adddf3>
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	e7c3      	b.n	800cd92 <rint+0x72>
 800ce0a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800ce0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce12:	40ca      	lsrs	r2, r1
 800ce14:	4210      	tst	r0, r2
 800ce16:	d0bc      	beq.n	800cd92 <rint+0x72>
 800ce18:	0852      	lsrs	r2, r2, #1
 800ce1a:	4210      	tst	r0, r2
 800ce1c:	bf1f      	itttt	ne
 800ce1e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800ce22:	ea20 0202 	bicne.w	r2, r0, r2
 800ce26:	410e      	asrne	r6, r1
 800ce28:	4316      	orrne	r6, r2
 800ce2a:	e7cf      	b.n	800cdcc <rint+0xac>
 800ce2c:	0800d8c0 	.word	0x0800d8c0
 800ce30:	000fffff 	.word	0x000fffff
 800ce34:	00000000 	.word	0x00000000

0800ce38 <scalbn>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	4616      	mov	r6, r2
 800ce3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	460b      	mov	r3, r1
 800ce46:	b982      	cbnz	r2, 800ce6a <scalbn+0x32>
 800ce48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce4c:	4303      	orrs	r3, r0
 800ce4e:	d034      	beq.n	800ceba <scalbn+0x82>
 800ce50:	4b2d      	ldr	r3, [pc, #180]	; (800cf08 <scalbn+0xd0>)
 800ce52:	2200      	movs	r2, #0
 800ce54:	f7f3 fb40 	bl	80004d8 <__aeabi_dmul>
 800ce58:	4b2c      	ldr	r3, [pc, #176]	; (800cf0c <scalbn+0xd4>)
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	429e      	cmp	r6, r3
 800ce5e:	460d      	mov	r5, r1
 800ce60:	da0d      	bge.n	800ce7e <scalbn+0x46>
 800ce62:	a325      	add	r3, pc, #148	; (adr r3, 800cef8 <scalbn+0xc0>)
 800ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce68:	e01c      	b.n	800cea4 <scalbn+0x6c>
 800ce6a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ce6e:	42ba      	cmp	r2, r7
 800ce70:	d109      	bne.n	800ce86 <scalbn+0x4e>
 800ce72:	4602      	mov	r2, r0
 800ce74:	f7f3 f97a 	bl	800016c <__adddf3>
 800ce78:	4604      	mov	r4, r0
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	e01d      	b.n	800ceba <scalbn+0x82>
 800ce7e:	460b      	mov	r3, r1
 800ce80:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ce84:	3a36      	subs	r2, #54	; 0x36
 800ce86:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ce8a:	4432      	add	r2, r6
 800ce8c:	428a      	cmp	r2, r1
 800ce8e:	dd0c      	ble.n	800ceaa <scalbn+0x72>
 800ce90:	4622      	mov	r2, r4
 800ce92:	462b      	mov	r3, r5
 800ce94:	a11a      	add	r1, pc, #104	; (adr r1, 800cf00 <scalbn+0xc8>)
 800ce96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce9a:	f000 f83b 	bl	800cf14 <copysign>
 800ce9e:	a318      	add	r3, pc, #96	; (adr r3, 800cf00 <scalbn+0xc8>)
 800cea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea4:	f7f3 fb18 	bl	80004d8 <__aeabi_dmul>
 800cea8:	e7e6      	b.n	800ce78 <scalbn+0x40>
 800ceaa:	2a00      	cmp	r2, #0
 800ceac:	dd08      	ble.n	800cec0 <scalbn+0x88>
 800ceae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ceb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ceb6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cec0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cec4:	da0b      	bge.n	800cede <scalbn+0xa6>
 800cec6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ceca:	429e      	cmp	r6, r3
 800cecc:	4622      	mov	r2, r4
 800cece:	462b      	mov	r3, r5
 800ced0:	dce0      	bgt.n	800ce94 <scalbn+0x5c>
 800ced2:	a109      	add	r1, pc, #36	; (adr r1, 800cef8 <scalbn+0xc0>)
 800ced4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ced8:	f000 f81c 	bl	800cf14 <copysign>
 800cedc:	e7c1      	b.n	800ce62 <scalbn+0x2a>
 800cede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cee2:	3236      	adds	r2, #54	; 0x36
 800cee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cee8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ceec:	4620      	mov	r0, r4
 800ceee:	4629      	mov	r1, r5
 800cef0:	2200      	movs	r2, #0
 800cef2:	4b07      	ldr	r3, [pc, #28]	; (800cf10 <scalbn+0xd8>)
 800cef4:	e7d6      	b.n	800cea4 <scalbn+0x6c>
 800cef6:	bf00      	nop
 800cef8:	c2f8f359 	.word	0xc2f8f359
 800cefc:	01a56e1f 	.word	0x01a56e1f
 800cf00:	8800759c 	.word	0x8800759c
 800cf04:	7e37e43c 	.word	0x7e37e43c
 800cf08:	43500000 	.word	0x43500000
 800cf0c:	ffff3cb0 	.word	0xffff3cb0
 800cf10:	3c900000 	.word	0x3c900000

0800cf14 <copysign>:
 800cf14:	b530      	push	{r4, r5, lr}
 800cf16:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800cf1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf1e:	ea42 0503 	orr.w	r5, r2, r3
 800cf22:	4629      	mov	r1, r5
 800cf24:	bd30      	pop	{r4, r5, pc}
	...

0800cf28 <_init>:
 800cf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2a:	bf00      	nop
 800cf2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2e:	bc08      	pop	{r3}
 800cf30:	469e      	mov	lr, r3
 800cf32:	4770      	bx	lr

0800cf34 <_fini>:
 800cf34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf36:	bf00      	nop
 800cf38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3a:	bc08      	pop	{r3}
 800cf3c:	469e      	mov	lr, r3
 800cf3e:	4770      	bx	lr
