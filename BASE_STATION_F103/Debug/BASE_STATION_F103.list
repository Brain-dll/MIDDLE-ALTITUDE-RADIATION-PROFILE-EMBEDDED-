
BASE_STATION_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800bdd0  0800bdd0  0001bdd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c580  0800c580  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800c580  0800c580  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c580  0800c580  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c580  0800c580  0001c580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c584  0800c584  0001c584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800c588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000200  0800c788  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  0800c788  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ac8  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000026dd  00000000  00000000  00033cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  000363d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001120  00000000  00000000  000375c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019185  00000000  00000000  000386e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e35f  00000000  00000000  00051865  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fbf3  00000000  00000000  0005fbc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef7b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d80  00000000  00000000  000ef834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bdb8 	.word	0x0800bdb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800bdb8 	.word	0x0800bdb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <magneto_Init>:
uint8_t countm = 0;

int16_t Xmax, Xmin, Ymax, Ymin;
float Xsf, Ysf, Xoff, Yoff;

void magneto_Init(uint8_t confg_c) {
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
	/*
	HAL_I2C_Mem_Write(&hi2c2, MGN_WRITE_ADD, setr[0], 1, &setr[1], 1, 100);
	HAL_I2C_Mem_Write(&hi2c2, MGN_WRITE_ADD, cntr[0], 1, &cntr[1], 1, 100);
	*/

	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x00, 1, &command[0], 1, 100);
 80011a6:	2364      	movs	r3, #100	; 0x64
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	4ba3      	ldr	r3, [pc, #652]	; (800143c <magneto_Init+0x2a0>)
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2200      	movs	r2, #0
 80011b6:	213c      	movs	r1, #60	; 0x3c
 80011b8:	48a1      	ldr	r0, [pc, #644]	; (8001440 <magneto_Init+0x2a4>)
 80011ba:	f003 f88b 	bl	80042d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x01, 1, &command[1], 1, 100);
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	9302      	str	r3, [sp, #8]
 80011c2:	2301      	movs	r3, #1
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	4b9f      	ldr	r3, [pc, #636]	; (8001444 <magneto_Init+0x2a8>)
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	2201      	movs	r2, #1
 80011ce:	213c      	movs	r1, #60	; 0x3c
 80011d0:	489b      	ldr	r0, [pc, #620]	; (8001440 <magneto_Init+0x2a4>)
 80011d2:	f003 f87f 	bl	80042d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MGN_WRITE_ADD, 0x02, 1, &command[2], 1, 100);
 80011d6:	2364      	movs	r3, #100	; 0x64
 80011d8:	9302      	str	r3, [sp, #8]
 80011da:	2301      	movs	r3, #1
 80011dc:	9301      	str	r3, [sp, #4]
 80011de:	4b9a      	ldr	r3, [pc, #616]	; (8001448 <magneto_Init+0x2ac>)
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	2301      	movs	r3, #1
 80011e4:	2202      	movs	r2, #2
 80011e6:	213c      	movs	r1, #60	; 0x3c
 80011e8:	4895      	ldr	r0, [pc, #596]	; (8001440 <magneto_Init+0x2a4>)
 80011ea:	f003 f873 	bl	80042d4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f002 face 	bl	8003790 <HAL_Delay>
	uint32_t full = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
	NXT_SEND_STR("page page0");
 80011f8:	4894      	ldr	r0, [pc, #592]	; (800144c <magneto_Init+0x2b0>)
 80011fa:	f001 fce3 	bl	8002bc4 <NXT_SEND_STR>
	for (uint8_t i = 0; i < confg_c; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	e067      	b.n	80012d4 <magneto_Init+0x138>
		Read_mgn();
 8001204:	f000 f942 	bl	800148c <Read_mgn>
		HAL_Delay(70);
 8001208:	2046      	movs	r0, #70	; 0x46
 800120a:	f002 fac1 	bl	8003790 <HAL_Delay>
		if (enter == 0) {
 800120e:	4b90      	ldr	r3, [pc, #576]	; (8001450 <magneto_Init+0x2b4>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <magneto_Init+0x90>
			Ymin = Ym;
 8001216:	4b8f      	ldr	r3, [pc, #572]	; (8001454 <magneto_Init+0x2b8>)
 8001218:	f9b3 2000 	ldrsh.w	r2, [r3]
 800121c:	4b8e      	ldr	r3, [pc, #568]	; (8001458 <magneto_Init+0x2bc>)
 800121e:	801a      	strh	r2, [r3, #0]
			enter++;
 8001220:	4b8b      	ldr	r3, [pc, #556]	; (8001450 <magneto_Init+0x2b4>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	3301      	adds	r3, #1
 8001226:	b2da      	uxtb	r2, r3
 8001228:	4b89      	ldr	r3, [pc, #548]	; (8001450 <magneto_Init+0x2b4>)
 800122a:	701a      	strb	r2, [r3, #0]
		}
		if (Xm < Xmin)
 800122c:	4b8b      	ldr	r3, [pc, #556]	; (800145c <magneto_Init+0x2c0>)
 800122e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001232:	4b8b      	ldr	r3, [pc, #556]	; (8001460 <magneto_Init+0x2c4>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	429a      	cmp	r2, r3
 800123a:	da04      	bge.n	8001246 <magneto_Init+0xaa>
			Xmin = Xm;
 800123c:	4b87      	ldr	r3, [pc, #540]	; (800145c <magneto_Init+0x2c0>)
 800123e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001242:	4b87      	ldr	r3, [pc, #540]	; (8001460 <magneto_Init+0x2c4>)
 8001244:	801a      	strh	r2, [r3, #0]
		if (Xm > Xmax)
 8001246:	4b85      	ldr	r3, [pc, #532]	; (800145c <magneto_Init+0x2c0>)
 8001248:	f9b3 2000 	ldrsh.w	r2, [r3]
 800124c:	4b85      	ldr	r3, [pc, #532]	; (8001464 <magneto_Init+0x2c8>)
 800124e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001252:	429a      	cmp	r2, r3
 8001254:	dd04      	ble.n	8001260 <magneto_Init+0xc4>
			Xmax = Xm;
 8001256:	4b81      	ldr	r3, [pc, #516]	; (800145c <magneto_Init+0x2c0>)
 8001258:	f9b3 2000 	ldrsh.w	r2, [r3]
 800125c:	4b81      	ldr	r3, [pc, #516]	; (8001464 <magneto_Init+0x2c8>)
 800125e:	801a      	strh	r2, [r3, #0]
		if (Ym < Ymin)
 8001260:	4b7c      	ldr	r3, [pc, #496]	; (8001454 <magneto_Init+0x2b8>)
 8001262:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001266:	4b7c      	ldr	r3, [pc, #496]	; (8001458 <magneto_Init+0x2bc>)
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	429a      	cmp	r2, r3
 800126e:	da04      	bge.n	800127a <magneto_Init+0xde>
			Ymin = Ym;
 8001270:	4b78      	ldr	r3, [pc, #480]	; (8001454 <magneto_Init+0x2b8>)
 8001272:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001276:	4b78      	ldr	r3, [pc, #480]	; (8001458 <magneto_Init+0x2bc>)
 8001278:	801a      	strh	r2, [r3, #0]
		if (Ym > Ymax)
 800127a:	4b76      	ldr	r3, [pc, #472]	; (8001454 <magneto_Init+0x2b8>)
 800127c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001280:	4b79      	ldr	r3, [pc, #484]	; (8001468 <magneto_Init+0x2cc>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	429a      	cmp	r2, r3
 8001288:	dd04      	ble.n	8001294 <magneto_Init+0xf8>
			Ymax = Ym;
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <magneto_Init+0x2b8>)
 800128c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001290:	4b75      	ldr	r3, [pc, #468]	; (8001468 <magneto_Init+0x2cc>)
 8001292:	801a      	strh	r2, [r3, #0]
		full = ((float)i / (float)confg_c) * 100;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff fd1c 	bl	8000cd4 <__aeabi_ui2f>
 800129c:	4604      	mov	r4, r0
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fd17 	bl	8000cd4 <__aeabi_ui2f>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fe1e 	bl	8000eec <__aeabi_fdiv>
 80012b0:	4603      	mov	r3, r0
 80012b2:	496e      	ldr	r1, [pc, #440]	; (800146c <magneto_Init+0x2d0>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fd65 	bl	8000d84 <__aeabi_fmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff4d 	bl	800115c <__aeabi_f2uiz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	60bb      	str	r3, [r7, #8]
		NXT_SEND_VAL("j0.val", full);
 80012c6:	68b9      	ldr	r1, [r7, #8]
 80012c8:	4869      	ldr	r0, [pc, #420]	; (8001470 <magneto_Init+0x2d4>)
 80012ca:	f001 fbf1 	bl	8002ab0 <NXT_SEND_VAL>
	for (uint8_t i = 0; i < confg_c; i++) {
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	3301      	adds	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	7bfa      	ldrb	r2, [r7, #15]
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d393      	bcc.n	8001204 <magneto_Init+0x68>
	}
	NXT_SEND_STR("page page1");
 80012dc:	4865      	ldr	r0, [pc, #404]	; (8001474 <magneto_Init+0x2d8>)
 80012de:	f001 fc71 	bl	8002bc4 <NXT_SEND_STR>
	Xsf = (float) (Ymax - Ymin) / (float) (Xmax - Xmin);
 80012e2:	4b61      	ldr	r3, [pc, #388]	; (8001468 <magneto_Init+0x2cc>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <magneto_Init+0x2bc>)
 80012ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fcf2 	bl	8000cdc <__aeabi_i2f>
 80012f8:	4604      	mov	r4, r0
 80012fa:	4b5a      	ldr	r3, [pc, #360]	; (8001464 <magneto_Init+0x2c8>)
 80012fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001300:	461a      	mov	r2, r3
 8001302:	4b57      	ldr	r3, [pc, #348]	; (8001460 <magneto_Init+0x2c4>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fce6 	bl	8000cdc <__aeabi_i2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4619      	mov	r1, r3
 8001314:	4620      	mov	r0, r4
 8001316:	f7ff fde9 	bl	8000eec <__aeabi_fdiv>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <magneto_Init+0x2dc>)
 8001320:	601a      	str	r2, [r3, #0]
	Ysf = (float) (Xmax - Xmin) / (float) (Ymax - Ymin);
 8001322:	4b50      	ldr	r3, [pc, #320]	; (8001464 <magneto_Init+0x2c8>)
 8001324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001328:	461a      	mov	r2, r3
 800132a:	4b4d      	ldr	r3, [pc, #308]	; (8001460 <magneto_Init+0x2c4>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fcd2 	bl	8000cdc <__aeabi_i2f>
 8001338:	4604      	mov	r4, r0
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <magneto_Init+0x2cc>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	461a      	mov	r2, r3
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <magneto_Init+0x2bc>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fcc6 	bl	8000cdc <__aeabi_i2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4619      	mov	r1, r3
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff fdc9 	bl	8000eec <__aeabi_fdiv>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b47      	ldr	r3, [pc, #284]	; (800147c <magneto_Init+0x2e0>)
 8001360:	601a      	str	r2, [r3, #0]
	if (Xsf < 1)
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <magneto_Init+0x2dc>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fea8 	bl	80010c0 <__aeabi_fcmplt>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d004      	beq.n	8001380 <magneto_Init+0x1e4>
		Xsf = 1.0;
 8001376:	4b40      	ldr	r3, [pc, #256]	; (8001478 <magneto_Init+0x2dc>)
 8001378:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e00d      	b.n	800139c <magneto_Init+0x200>
	else if (Ysf < 1)
 8001380:	4b3e      	ldr	r3, [pc, #248]	; (800147c <magneto_Init+0x2e0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe99 	bl	80010c0 <__aeabi_fcmplt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <magneto_Init+0x200>
		Ysf = 1.0;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <magneto_Init+0x2e0>)
 8001396:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800139a:	601a      	str	r2, [r3, #0]

	Xoff = ((Xmax - Xmin) / 2 - Xmax) * Xsf;
 800139c:	4b31      	ldr	r3, [pc, #196]	; (8001464 <magneto_Init+0x2c8>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <magneto_Init+0x2c4>)
 80013a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	0fda      	lsrs	r2, r3, #31
 80013ae:	4413      	add	r3, r2
 80013b0:	105b      	asrs	r3, r3, #1
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <magneto_Init+0x2c8>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fc8d 	bl	8000cdc <__aeabi_i2f>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <magneto_Init+0x2dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff fcda 	bl	8000d84 <__aeabi_fmul>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <magneto_Init+0x2e4>)
 80013d6:	601a      	str	r2, [r3, #0]
	Yoff = ((Ymax - Ymin) / 2 - Ymax) * Ysf;
 80013d8:	4b23      	ldr	r3, [pc, #140]	; (8001468 <magneto_Init+0x2cc>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <magneto_Init+0x2bc>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	0fda      	lsrs	r2, r3, #31
 80013ea:	4413      	add	r3, r2
 80013ec:	105b      	asrs	r3, r3, #1
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <magneto_Init+0x2cc>)
 80013f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc6f 	bl	8000cdc <__aeabi_i2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <magneto_Init+0x2e0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	4610      	mov	r0, r2
 8001408:	f7ff fcbc 	bl	8000d84 <__aeabi_fmul>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <magneto_Init+0x2e8>)
 8001412:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	481b      	ldr	r0, [pc, #108]	; (8001488 <magneto_Init+0x2ec>)
 800141c:	f002 fcf2 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f002 f9b5 	bl	8003790 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <magneto_Init+0x2ec>)
 800142e:	f002 fce9 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000
 8001440:	200004c8 	.word	0x200004c8
 8001444:	20000001 	.word	0x20000001
 8001448:	20000002 	.word	0x20000002
 800144c:	0800bdd0 	.word	0x0800bdd0
 8001450:	20000222 	.word	0x20000222
 8001454:	2000021e 	.word	0x2000021e
 8001458:	20000404 	.word	0x20000404
 800145c:	2000021c 	.word	0x2000021c
 8001460:	20000428 	.word	0x20000428
 8001464:	20000406 	.word	0x20000406
 8001468:	2000041c 	.word	0x2000041c
 800146c:	42c80000 	.word	0x42c80000
 8001470:	0800bddc 	.word	0x0800bddc
 8001474:	0800bde4 	.word	0x0800bde4
 8001478:	200003fc 	.word	0x200003fc
 800147c:	20000400 	.word	0x20000400
 8001480:	20000408 	.word	0x20000408
 8001484:	20000414 	.word	0x20000414
 8001488:	40010c00 	.word	0x40010c00

0800148c <Read_mgn>:

void Read_mgn(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, MGN_READ_ADD, 0x03, 1, data, 6, 100);
 8001492:	2364      	movs	r3, #100	; 0x64
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2306      	movs	r3, #6
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <Read_mgn+0x78>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	213d      	movs	r1, #61	; 0x3d
 80014a4:	4818      	ldr	r0, [pc, #96]	; (8001508 <Read_mgn+0x7c>)
 80014a6:	f003 f80f 	bl	80044c8 <HAL_I2C_Mem_Read>
	HAL_I2C_Master_Transmit(&hi2c1, MGN_WRITE_ADD, &command[3], 1, 100);
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <Read_mgn+0x80>)
 80014b2:	213c      	movs	r1, #60	; 0x3c
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <Read_mgn+0x7c>)
 80014b6:	f002 fe0f 	bl	80040d8 <HAL_I2C_Master_Transmit>

	Xm = (int16_t)(data[0] << 8) | data[1];
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <Read_mgn+0x78>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	021b      	lsls	r3, r3, #8
 80014c0:	b21a      	sxth	r2, r3
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <Read_mgn+0x78>)
 80014c4:	785b      	ldrb	r3, [r3, #1]
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	4b10      	ldr	r3, [pc, #64]	; (8001510 <Read_mgn+0x84>)
 80014ce:	801a      	strh	r2, [r3, #0]
	Ym = (int16_t)(data[4] << 8) | data[5];
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <Read_mgn+0x78>)
 80014d2:	791b      	ldrb	r3, [r3, #4]
 80014d4:	021b      	lsls	r3, r3, #8
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Read_mgn+0x78>)
 80014da:	795b      	ldrb	r3, [r3, #5]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	4313      	orrs	r3, r2
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <Read_mgn+0x88>)
 80014e4:	801a      	strh	r2, [r3, #0]
	Zm = (int16_t)(data[2] << 8) | data[3];
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <Read_mgn+0x78>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	; (8001504 <Read_mgn+0x78>)
 80014f0:	78db      	ldrb	r3, [r3, #3]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <Read_mgn+0x8c>)
 80014fa:	801a      	strh	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000224 	.word	0x20000224
 8001508:	200004c8 	.word	0x200004c8
 800150c:	20000003 	.word	0x20000003
 8001510:	2000021c 	.word	0x2000021c
 8001514:	2000021e 	.word	0x2000021e
 8001518:	20000220 	.word	0x20000220

0800151c <MPU6050_Init>:
uint8_t CONFIG_RATE = 0x02;
uint8_t ACCEL_CONFIG_RATE = 0x10;
uint8_t PWR_MGMT_1_RATE = 0x00;

void MPU6050_Init()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, MPU_6050_WRITE_ADRESS, 1, MPU_6050_TIMEOUT) != HAL_OK)
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	2201      	movs	r2, #1
 8001524:	21d0      	movs	r1, #208	; 0xd0
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <MPU6050_Init+0x2c>)
 8001528:	f003 fa30 	bl	800498c <HAL_I2C_IsDeviceReady>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <MPU6050_Init+0x22>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);  // ONEMLI
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MPU6050_Init+0x30>)
 800153a:	f002 fc63 	bl	8003e04 <HAL_GPIO_WritePin>
	}

	MPU6050_SetCalibration();
 800153e:	f000 f807 	bl	8001550 <MPU6050_SetCalibration>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200004c8 	.word	0x200004c8
 800154c:	40011000 	.word	0x40011000

08001550 <MPU6050_SetCalibration>:

void MPU6050_SetCalibration()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af04      	add	r7, sp, #16
	// This register allows the user to configure the power mode and clock source.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, PWR_MGMT_1, 1, &PWR_MGMT_1_RATE, 1, MPU_6050_TIMEOUT);
 8001556:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <MPU6050_SetCalibration+0x84>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b29a      	uxth	r2, r3
 800155c:	2364      	movs	r3, #100	; 0x64
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	2301      	movs	r3, #1
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <MPU6050_SetCalibration+0x88>)
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2301      	movs	r3, #1
 800156a:	21d0      	movs	r1, #208	; 0xd0
 800156c:	481b      	ldr	r0, [pc, #108]	; (80015dc <MPU6050_SetCalibration+0x8c>)
 800156e:	f002 feb1 	bl	80042d4 <HAL_I2C_Mem_Write>

	// The Sample Rate is determined by dividing the gyroscope output rate by this value.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, SMPRT_DIV, 1, &SMPRT_DIV_RATE, 1, MPU_6050_TIMEOUT);
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MPU6050_SetCalibration+0x90>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b29a      	uxth	r2, r3
 8001578:	2364      	movs	r3, #100	; 0x64
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	2301      	movs	r3, #1
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MPU6050_SetCalibration+0x94>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2301      	movs	r3, #1
 8001586:	21d0      	movs	r1, #208	; 0xd0
 8001588:	4814      	ldr	r0, [pc, #80]	; (80015dc <MPU6050_SetCalibration+0x8c>)
 800158a:	f002 fea3 	bl	80042d4 <HAL_I2C_Mem_Write>

	// This register is used to trigger gyroscope self-test and configure the gyroscopes’ full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, GYRO_CONFIG, 1, &GYRO_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MPU6050_SetCalibration+0x98>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MPU6050_SetCalibration+0x9c>)
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	21d0      	movs	r1, #208	; 0xd0
 80015a4:	480d      	ldr	r0, [pc, #52]	; (80015dc <MPU6050_SetCalibration+0x8c>)
 80015a6:	f002 fe95 	bl	80042d4 <HAL_I2C_Mem_Write>

	// This register is used to trigger accelerometer self test and configure the accelerometer full scale range.
	HAL_I2C_Mem_Write(&hi2c1, MPU_6050_WRITE_ADRESS, ACCEL_CONFIG, 1, &ACCEL_CONFIG_RATE, 1, MPU_6050_TIMEOUT);
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MPU6050_SetCalibration+0xa0>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	2301      	movs	r3, #1
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MPU6050_SetCalibration+0xa4>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	21d0      	movs	r1, #208	; 0xd0
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <MPU6050_SetCalibration+0x8c>)
 80015c2:	f002 fe87 	bl	80042d4 <HAL_I2C_Mem_Write>

	HAL_Delay(50);
 80015c6:	2032      	movs	r0, #50	; 0x32
 80015c8:	f002 f8e2 	bl	8003790 <HAL_Delay>

}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000007 	.word	0x20000007
 80015d8:	2000022a 	.word	0x2000022a
 80015dc:	200004c8 	.word	0x200004c8
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000005 	.word	0x20000005
 80015ec:	20000009 	.word	0x20000009
 80015f0:	20000006 	.word	0x20000006
 80015f4:	2000000a 	.word	0x2000000a

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fe:	f002 f865 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001602:	f000 fa0b 	bl	8001a1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001606:	f000 fb7d 	bl	8001d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800160a:	f000 fa4d 	bl	8001aa8 <MX_I2C1_Init>
  MX_SPI2_Init();
 800160e:	f000 fa79 	bl	8001b04 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001612:	f000 faf9 	bl	8001c08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001616:	f000 fb21 	bl	8001c5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800161a:	f000 fb49 	bl	8001cb0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800161e:	f000 faa7 	bl	8001b70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //newrecord = 1;
  //NXT_SEND_SVAL("page0.t19.pco", 2016);

  LORA_READ_PARAMETER();
 8001622:	f000 fc2b 	bl	8001e7c <LORA_READ_PARAMETER>
  LORA_CONFG( ADDH, ADDL, CHN, MODE); // HIGH ADDRESS, LOW ADDRESS, CHANNEL, MODE (0 : TRANSPARENT, 1 : FIXED)
 8001626:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <main+0x2a0>)
 8001628:	7818      	ldrb	r0, [r3, #0]
 800162a:	4b9c      	ldr	r3, [pc, #624]	; (800189c <main+0x2a4>)
 800162c:	7819      	ldrb	r1, [r3, #0]
 800162e:	4b9c      	ldr	r3, [pc, #624]	; (80018a0 <main+0x2a8>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	4b9c      	ldr	r3, [pc, #624]	; (80018a4 <main+0x2ac>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	f000 fbc5 	bl	8001dc4 <LORA_CONFG>
  MPU6050_Init();
 800163a:	f7ff ff6f 	bl	800151c <MPU6050_Init>
  for(uint8_t i = 0 ; i < 8 ; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	e009      	b.n	8001658 <main+0x60>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001644:	2110      	movs	r1, #16
 8001646:	4898      	ldr	r0, [pc, #608]	; (80018a8 <main+0x2b0>)
 8001648:	f002 fbf4 	bl	8003e34 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800164c:	2032      	movs	r0, #50	; 0x32
 800164e:	f002 f89f 	bl	8003790 <HAL_Delay>
  for(uint8_t i = 0 ; i < 8 ; i++){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	3301      	adds	r3, #1
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	2b07      	cmp	r3, #7
 800165c:	d9f2      	bls.n	8001644 <main+0x4c>
  }
  //magneto_Init(cal_num);
  	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800165e:	4b93      	ldr	r3, [pc, #588]	; (80018ac <main+0x2b4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4b91      	ldr	r3, [pc, #580]	; (80018ac <main+0x2b4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0220 	orr.w	r2, r2, #32
 800166c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim2);
 800166e:	4890      	ldr	r0, [pc, #576]	; (80018b0 <main+0x2b8>)
 8001670:	f004 fb86 	bl	8005d80 <HAL_TIM_Base_Start_IT>
  	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001674:	4b8f      	ldr	r3, [pc, #572]	; (80018b4 <main+0x2bc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	4b8e      	ldr	r3, [pc, #568]	; (80018b4 <main+0x2bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0220 	orr.w	r2, r2, #32
 8001682:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001684:	4b8c      	ldr	r3, [pc, #560]	; (80018b8 <main+0x2c0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	4b8b      	ldr	r3, [pc, #556]	; (80018b8 <main+0x2c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	60da      	str	r2, [r3, #12]
			if (compass_val < 0)
				compass_val += 360;
			NXT_SEND_TXT("page2.t7.txt", (uint16_t) compass_val);
			mgn = 0;
		}*/
		if (recal == 1) {
 8001694:	4b89      	ldr	r3, [pc, #548]	; (80018bc <main+0x2c4>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d105      	bne.n	80016a8 <main+0xb0>
			magneto_Init(cal_num);
 800169c:	2096      	movs	r0, #150	; 0x96
 800169e:	f7ff fd7d 	bl	800119c <magneto_Init>
			recal = 0;
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <main+0x2c4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
		}
		if (RX2 == 1) {
 80016a8:	4b85      	ldr	r3, [pc, #532]	; (80018c0 <main+0x2c8>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d143      	bne.n	8001738 <main+0x140>

			RX2 = 0;
 80016b0:	4b83      	ldr	r3, [pc, #524]	; (80018c0 <main+0x2c8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
			uint8_t m = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	71bb      	strb	r3, [r7, #6]
			uint8_t go = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	717b      	strb	r3, [r7, #5]
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 80016be:	2300      	movs	r3, #0
 80016c0:	713b      	strb	r3, [r7, #4]
 80016c2:	e021      	b.n	8001708 <main+0x110>
				if (RX2_BUF[k] == ':' && go == 0) {
 80016c4:	793b      	ldrb	r3, [r7, #4]
 80016c6:	4a7f      	ldr	r2, [pc, #508]	; (80018c4 <main+0x2cc>)
 80016c8:	5cd3      	ldrb	r3, [r2, r3]
 80016ca:	2b3a      	cmp	r3, #58	; 0x3a
 80016cc:	d104      	bne.n	80016d8 <main+0xe0>
 80016ce:	797b      	ldrb	r3, [r7, #5]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <main+0xe0>
					go = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	717b      	strb	r3, [r7, #5]
				}
				if (go == 1) {
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d109      	bne.n	80016f2 <main+0xfa>
					NEXT_BUFF[m] = RX2_BUF[k - 1];
 80016de:	793b      	ldrb	r3, [r7, #4]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	4977      	ldr	r1, [pc, #476]	; (80018c4 <main+0x2cc>)
 80016e6:	5c89      	ldrb	r1, [r1, r2]
 80016e8:	4a77      	ldr	r2, [pc, #476]	; (80018c8 <main+0x2d0>)
 80016ea:	54d1      	strb	r1, [r2, r3]
					m++;
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	3301      	adds	r3, #1
 80016f0:	71bb      	strb	r3, [r7, #6]
				}
				if (go == 1 && RX2_BUF[k] == '\n')
 80016f2:	797b      	ldrb	r3, [r7, #5]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d104      	bne.n	8001702 <main+0x10a>
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <main+0x2cc>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d006      	beq.n	8001710 <main+0x118>
			for (uint8_t k = 0; k < sizeof(RX2_BUF); k++) {
 8001702:	793b      	ldrb	r3, [r7, #4]
 8001704:	3301      	adds	r3, #1
 8001706:	713b      	strb	r3, [r7, #4]
 8001708:	793b      	ldrb	r3, [r7, #4]
 800170a:	2b77      	cmp	r3, #119	; 0x77
 800170c:	d9da      	bls.n	80016c4 <main+0xcc>
 800170e:	e000      	b.n	8001712 <main+0x11a>
					break;
 8001710:	bf00      	nop
			}
			//if(NEXT_BUFF[0] != '\0' || NEXT_BUFF[1] || '\0' || NEXT_BUFF[2] != '\0')
			NXT_SEND_TXTBX("page1.t12.txt", NEXT_BUFF);
 8001712:	496d      	ldr	r1, [pc, #436]	; (80018c8 <main+0x2d0>)
 8001714:	486d      	ldr	r0, [pc, #436]	; (80018cc <main+0x2d4>)
 8001716:	f001 fa7b 	bl	8002c10 <NXT_SEND_TXTBX>

			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 800171a:	2300      	movs	r3, #0
 800171c:	70fb      	strb	r3, [r7, #3]
 800171e:	e006      	b.n	800172e <main+0x136>
				RX2_BUF[i] = '\0';
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	4a68      	ldr	r2, [pc, #416]	; (80018c4 <main+0x2cc>)
 8001724:	2100      	movs	r1, #0
 8001726:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i < sizeof(RX2_BUF); i++)
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	3301      	adds	r3, #1
 800172c:	70fb      	strb	r3, [r7, #3]
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b77      	cmp	r3, #119	; 0x77
 8001732:	d9f5      	bls.n	8001720 <main+0x128>
			Data_Parsing();
 8001734:	f000 fbe2 	bl	8001efc <Data_Parsing>
		}
		if (cal_dis == 1) {
 8001738:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <main+0x2d8>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	f040 8139 	bne.w	80019b4 <main+0x3bc>
			if (ground_lat == .0 && ground_lng == .0) {
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <main+0x2dc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fcae 	bl	80010ac <__aeabi_fcmpeq>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d015      	beq.n	8001782 <main+0x18a>
 8001756:	4b60      	ldr	r3, [pc, #384]	; (80018d8 <main+0x2e0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fca4 	bl	80010ac <__aeabi_fcmpeq>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00b      	beq.n	8001782 <main+0x18a>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 800176a:	495c      	ldr	r1, [pc, #368]	; (80018dc <main+0x2e4>)
 800176c:	485c      	ldr	r0, [pc, #368]	; (80018e0 <main+0x2e8>)
 800176e:	f001 fa4f 	bl	8002c10 <NXT_SEND_TXTBX>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 8001772:	495a      	ldr	r1, [pc, #360]	; (80018dc <main+0x2e4>)
 8001774:	485b      	ldr	r0, [pc, #364]	; (80018e4 <main+0x2ec>)
 8001776:	f001 fa4b 	bl	8002c10 <NXT_SEND_TXTBX>
				GS_LC = 1;
 800177a:	4b5b      	ldr	r3, [pc, #364]	; (80018e8 <main+0x2f0>)
 800177c:	2201      	movs	r2, #1
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e002      	b.n	8001788 <main+0x190>
			} else
				GS_LC = 0;
 8001782:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <main+0x2f0>)
 8001784:	2200      	movs	r2, #0
 8001786:	701a      	strb	r2, [r3, #0]
			if ((EPH_lat == .0 && EPH_lng == .0) || GS_LC == 1) {
 8001788:	4b58      	ldr	r3, [pc, #352]	; (80018ec <main+0x2f4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 0100 	mov.w	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc8b 	bl	80010ac <__aeabi_fcmpeq>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <main+0x1b8>
 800179c:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <main+0x2f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc81 	bl	80010ac <__aeabi_fcmpeq>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <main+0x1c0>
 80017b0:	4b4d      	ldr	r3, [pc, #308]	; (80018e8 <main+0x2f0>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d104      	bne.n	80017c2 <main+0x1ca>
				NXT_SEND_TXTBX("page2.t4.txt", "veri yok");
 80017b8:	4948      	ldr	r1, [pc, #288]	; (80018dc <main+0x2e4>)
 80017ba:	4849      	ldr	r0, [pc, #292]	; (80018e0 <main+0x2e8>)
 80017bc:	f001 fa28 	bl	8002c10 <NXT_SEND_TXTBX>
 80017c0:	e04c      	b.n	800185c <main+0x264>
			} else {
				EPH_distance = Cal_distGPS(EPH_lat, EPH_lng, ground_lat,
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <main+0x2f4>)
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	4b4a      	ldr	r3, [pc, #296]	; (80018f0 <main+0x2f8>)
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	4b42      	ldr	r3, [pc, #264]	; (80018d4 <main+0x2dc>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <main+0x2e0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f000 ff53 	bl	800267c <Cal_distGPS>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <main+0x2fc>)
 80017da:	601a      	str	r2, [r3, #0]
						ground_lng);
				EPH_Angle = GetAngle(EPH_lat, EPH_lng, ground_lat, ground_lng);
 80017dc:	4b43      	ldr	r3, [pc, #268]	; (80018ec <main+0x2f4>)
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <main+0x2f8>)
 80017e2:	6819      	ldr	r1, [r3, #0]
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <main+0x2dc>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b3b      	ldr	r3, [pc, #236]	; (80018d8 <main+0x2e0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f001 f85c 	bl	80028a8 <GetAngle>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <main+0x300>)
 80017f4:	601a      	str	r2, [r3, #0]
				NXT_SEND_VALFLOAT("page2.t4.txt", EPH_distance);
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <main+0x2fc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4838      	ldr	r0, [pc, #224]	; (80018e0 <main+0x2e8>)
 80017fe:	f001 f9af 	bl	8002b60 <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t3.txt", EPH_Angle);
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <main+0x300>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	483c      	ldr	r0, [pc, #240]	; (80018fc <main+0x304>)
 800180a:	f001 f9a9 	bl	8002b60 <NXT_SEND_VALFLOAT>
				EPH_Angle += 90.0;
 800180e:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <main+0x300>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	493b      	ldr	r1, [pc, #236]	; (8001900 <main+0x308>)
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff f9ad 	bl	8000b74 <__addsf3>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <main+0x300>)
 8001820:	601a      	str	r2, [r3, #0]
				if (EPH_Angle > 360) {
 8001822:	4b35      	ldr	r3, [pc, #212]	; (80018f8 <main+0x300>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4937      	ldr	r1, [pc, #220]	; (8001904 <main+0x30c>)
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc67 	bl	80010fc <__aeabi_fcmpgt>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <main+0x250>
					EPH_Angle -= 360;
 8001834:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <main+0x300>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4932      	ldr	r1, [pc, #200]	; (8001904 <main+0x30c>)
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff f998 	bl	8000b70 <__aeabi_fsub>
 8001840:	4603      	mov	r3, r0
 8001842:	461a      	mov	r2, r3
 8001844:	4b2c      	ldr	r3, [pc, #176]	; (80018f8 <main+0x300>)
 8001846:	601a      	str	r2, [r3, #0]
				}
				NXT_SEND_VAL("page2.z1.val", (uint32_t) EPH_Angle);
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <main+0x300>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fc85 	bl	800115c <__aeabi_f2uiz>
 8001852:	4603      	mov	r3, r0
 8001854:	4619      	mov	r1, r3
 8001856:	482c      	ldr	r0, [pc, #176]	; (8001908 <main+0x310>)
 8001858:	f001 f92a 	bl	8002ab0 <NXT_SEND_VAL>
			}
			if ((PL_lat == .0 && PL_lng == .0) || GS_LC == 1) {
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <main+0x314>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 0100 	mov.w	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fc21 	bl	80010ac <__aeabi_fcmpeq>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <main+0x28c>
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <main+0x318>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fc17 	bl	80010ac <__aeabi_fcmpeq>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d103      	bne.n	800188c <main+0x294>
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <main+0x2f0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d143      	bne.n	8001914 <main+0x31c>
				NXT_SEND_TXTBX("page2.t6.txt", "veri yok");
 800188c:	4913      	ldr	r1, [pc, #76]	; (80018dc <main+0x2e4>)
 800188e:	4815      	ldr	r0, [pc, #84]	; (80018e4 <main+0x2ec>)
 8001890:	f001 f9be 	bl	8002c10 <NXT_SEND_TXTBX>
 8001894:	e08b      	b.n	80019ae <main+0x3b6>
 8001896:	bf00      	nop
 8001898:	20000018 	.word	0x20000018
 800189c:	20000019 	.word	0x20000019
 80018a0:	2000001a 	.word	0x2000001a
 80018a4:	2000001b 	.word	0x2000001b
 80018a8:	40010c00 	.word	0x40010c00
 80018ac:	20000484 	.word	0x20000484
 80018b0:	20000560 	.word	0x20000560
 80018b4:	200005a8 	.word	0x200005a8
 80018b8:	2000051c 	.word	0x2000051c
 80018bc:	20000265 	.word	0x20000265
 80018c0:	200003cc 	.word	0x200003cc
 80018c4:	200002dc 	.word	0x200002dc
 80018c8:	20000354 	.word	0x20000354
 80018cc:	0800be00 	.word	0x0800be00
 80018d0:	200002ae 	.word	0x200002ae
 80018d4:	200003d8 	.word	0x200003d8
 80018d8:	200003dc 	.word	0x200003dc
 80018dc:	0800be10 	.word	0x0800be10
 80018e0:	0800be1c 	.word	0x0800be1c
 80018e4:	0800be2c 	.word	0x0800be2c
 80018e8:	200002af 	.word	0x200002af
 80018ec:	2000022c 	.word	0x2000022c
 80018f0:	20000230 	.word	0x20000230
 80018f4:	20000254 	.word	0x20000254
 80018f8:	2000025c 	.word	0x2000025c
 80018fc:	0800be3c 	.word	0x0800be3c
 8001900:	42b40000 	.word	0x42b40000
 8001904:	43b40000 	.word	0x43b40000
 8001908:	0800be4c 	.word	0x0800be4c
 800190c:	20000234 	.word	0x20000234
 8001910:	20000238 	.word	0x20000238
			} else {
				PL_distance = Cal_distGPS(PL_lat, PL_lng, ground_lat,
 8001914:	4b32      	ldr	r3, [pc, #200]	; (80019e0 <main+0x3e8>)
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <main+0x3ec>)
 800191a:	6819      	ldr	r1, [r3, #0]
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <main+0x3f0>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b32      	ldr	r3, [pc, #200]	; (80019ec <main+0x3f4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f000 feaa 	bl	800267c <Cal_distGPS>
 8001928:	4602      	mov	r2, r0
 800192a:	4b31      	ldr	r3, [pc, #196]	; (80019f0 <main+0x3f8>)
 800192c:	601a      	str	r2, [r3, #0]
						ground_lng);
				PL_Angle = GetAngle(PL_lat, PL_lng, ground_lat, ground_lng);
 800192e:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <main+0x3e8>)
 8001930:	6818      	ldr	r0, [r3, #0]
 8001932:	4b2c      	ldr	r3, [pc, #176]	; (80019e4 <main+0x3ec>)
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <main+0x3f0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <main+0x3f4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f000 ffb3 	bl	80028a8 <GetAngle>
 8001942:	4602      	mov	r2, r0
 8001944:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <main+0x3fc>)
 8001946:	601a      	str	r2, [r3, #0]
				NXT_SEND_VALFLOAT("page2.t6.txt", PL_distance);
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <main+0x3f8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	482a      	ldr	r0, [pc, #168]	; (80019f8 <main+0x400>)
 8001950:	f001 f906 	bl	8002b60 <NXT_SEND_VALFLOAT>
				NXT_SEND_VALFLOAT("page2.t5.txt", PL_Angle);
 8001954:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <main+0x3fc>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4828      	ldr	r0, [pc, #160]	; (80019fc <main+0x404>)
 800195c:	f001 f900 	bl	8002b60 <NXT_SEND_VALFLOAT>
				PL_Angle += 90.0;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <main+0x3fc>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4926      	ldr	r1, [pc, #152]	; (8001a00 <main+0x408>)
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f904 	bl	8000b74 <__addsf3>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <main+0x3fc>)
 8001972:	601a      	str	r2, [r3, #0]
				if (PL_Angle > 360) {
 8001974:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <main+0x3fc>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4922      	ldr	r1, [pc, #136]	; (8001a04 <main+0x40c>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fbbe 	bl	80010fc <__aeabi_fcmpgt>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d009      	beq.n	800199a <main+0x3a2>
					PL_Angle -= 360;
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <main+0x3fc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	491e      	ldr	r1, [pc, #120]	; (8001a04 <main+0x40c>)
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f8ef 	bl	8000b70 <__aeabi_fsub>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <main+0x3fc>)
 8001998:	601a      	str	r2, [r3, #0]
				}
				NXT_SEND_VAL("page2.z2.val", (uint32_t) PL_Angle);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <main+0x3fc>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fbdc 	bl	800115c <__aeabi_f2uiz>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <main+0x410>)
 80019aa:	f001 f881 	bl	8002ab0 <NXT_SEND_VAL>
			}

			cal_dis = 0;
 80019ae:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <main+0x414>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
		}
		if (newrecord == 1) {
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <main+0x418>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d105      	bne.n	80019c8 <main+0x3d0>
			newrecord = 0;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <main+0x418>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
			pause = 0;
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <main+0x41c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]

		}
		if (pause == 0) {
		}
		if (stop == 1) {
 80019c8:	4b13      	ldr	r3, [pc, #76]	; (8001a18 <main+0x420>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	f47f ae61 	bne.w	8001694 <main+0x9c>
			stop = 0;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <main+0x420>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
			pause = 1;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <main+0x41c>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
		if (recal == 1) {
 80019de:	e659      	b.n	8001694 <main+0x9c>
 80019e0:	20000234 	.word	0x20000234
 80019e4:	20000238 	.word	0x20000238
 80019e8:	200003d8 	.word	0x200003d8
 80019ec:	200003dc 	.word	0x200003dc
 80019f0:	20000258 	.word	0x20000258
 80019f4:	20000260 	.word	0x20000260
 80019f8:	0800be2c 	.word	0x0800be2c
 80019fc:	0800be5c 	.word	0x0800be5c
 8001a00:	42b40000 	.word	0x42b40000
 8001a04:	43b40000 	.word	0x43b40000
 8001a08:	0800be6c 	.word	0x0800be6c
 8001a0c:	200002ae 	.word	0x200002ae
 8001a10:	20000267 	.word	0x20000267
 8001a14:	20000268 	.word	0x20000268
 8001a18:	20000266 	.word	0x20000266

08001a1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b090      	sub	sp, #64	; 0x40
 8001a20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a22:	f107 0318 	add.w	r3, r7, #24
 8001a26:	2228      	movs	r2, #40	; 0x28
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 fb62 	bl	80070f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
 8001a3a:	60da      	str	r2, [r3, #12]
 8001a3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a50:	2302      	movs	r3, #2
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a5a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0318 	add.w	r3, r7, #24
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fc9b 	bl	80053a0 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a70:	f001 f818 	bl	8002aa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 ff06 	bl	80058a0 <HAL_RCC_ClockConfig>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a9a:	f001 f803 	bl	8002aa4 <Error_Handler>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3740      	adds	r7, #64	; 0x40
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <MX_I2C1_Init+0x54>)
 8001ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ab4:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <MX_I2C1_Init+0x58>)
 8001ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad8:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_I2C1_Init+0x50>)
 8001ae6:	f002 f9bf 	bl	8003e68 <HAL_I2C_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001af0:	f000 ffd8 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200004c8 	.word	0x200004c8
 8001afc:	40005400 	.word	0x40005400
 8001b00:	000186a0 	.word	0x000186a0

08001b04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b0a:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <MX_SPI2_Init+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b38:	2210      	movs	r2, #16
 8001b3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b50:	220a      	movs	r2, #10
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_SPI2_Init+0x64>)
 8001b56:	f004 f83f 	bl	8005bd8 <HAL_SPI_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b60:	f000 ffa0 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000042c 	.word	0x2000042c
 8001b6c:	40003800 	.word	0x40003800

08001b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b84:	463b      	mov	r3, r7
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001b8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001b94:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001b96:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001b9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 69;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001ba4:	2245      	movs	r2, #69	; 0x45
 8001ba6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bb4:	4813      	ldr	r0, [pc, #76]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001bb6:	f004 f893 	bl	8005ce0 <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bc0:	f000 ff70 	bl	8002aa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001bd2:	f004 fa2f 	bl	8006034 <HAL_TIM_ConfigClockSource>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bdc:	f000 ff62 	bl	8002aa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be8:	463b      	mov	r3, r7
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM2_Init+0x94>)
 8001bee:	f004 fbfd 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f000 ff54 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000560 	.word	0x20000560

08001c08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <MX_USART1_UART_Init+0x50>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c2e:	220c      	movs	r2, #12
 8001c30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_USART1_UART_Init+0x4c>)
 8001c40:	f004 fc44 	bl	80064cc <HAL_UART_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c4a:	f000 ff2b 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000051c 	.word	0x2000051c
 8001c58:	40013800 	.word	0x40013800

08001c5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <MX_USART2_UART_Init+0x50>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001c6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_USART2_UART_Init+0x4c>)
 8001c94:	f004 fc1a 	bl	80064cc <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9e:	f000 ff01 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200005a8 	.word	0x200005a8
 8001cac:	40004400 	.word	0x40004400

08001cb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MX_USART3_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cbc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_USART3_UART_Init+0x4c>)
 8001ce8:	f004 fbf0 	bl	80064cc <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f000 fed7 	bl	8002aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000484 	.word	0x20000484
 8001d00:	40004800 	.word	0x40004800

08001d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d1e:	f043 0320 	orr.w	r3, r3, #32
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d4e:	f043 0308 	orr.w	r3, r3, #8
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <MX_GPIO_Init+0xb4>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M0_Pin|M1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2183      	movs	r1, #131	; 0x83
 8001d64:	4815      	ldr	r0, [pc, #84]	; (8001dbc <MX_GPIO_Init+0xb8>)
 8001d66:	f002 f84d 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|SDCARD_CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f241 0111 	movw	r1, #4113	; 0x1011
 8001d70:	4813      	ldr	r0, [pc, #76]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001d72:	f002 f847 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M0_Pin M1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin|LED2_Pin;
 8001d76:	2383      	movs	r3, #131	; 0x83
 8001d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2302      	movs	r3, #2
 8001d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <MX_GPIO_Init+0xb8>)
 8001d8e:	f001 fedf 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin SDCARD_CS_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = LED_Pin|SDCARD_CS_Pin|BUZZER_Pin;
 8001d92:	f241 0311 	movw	r3, #4113	; 0x1011
 8001d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_GPIO_Init+0xbc>)
 8001dac:	f001 fed0 	bl	8003b50 <HAL_GPIO_Init>

}
 8001db0:	bf00      	nop
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	40010c00 	.word	0x40010c00

08001dc4 <LORA_CONFG>:

/* USER CODE BEGIN 4 */
void LORA_CONFG(uint8_t ADDH, uint8_t ADDL, uint8_t CHN, uint8_t MODE)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	71fb      	strb	r3, [r7, #7]
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71bb      	strb	r3, [r7, #6]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	717b      	strb	r3, [r7, #5]
 8001dde:	4613      	mov	r3, r2
 8001de0:	713b      	strb	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2101      	movs	r1, #1
 8001de6:	4823      	ldr	r0, [pc, #140]	; (8001e74 <LORA_CONFG+0xb0>)
 8001de8:	f002 f80c 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8001dec:	2201      	movs	r2, #1
 8001dee:	2102      	movs	r1, #2
 8001df0:	4820      	ldr	r0, [pc, #128]	; (8001e74 <LORA_CONFG+0xb0>)
 8001df2:	f002 f807 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001df6:	2032      	movs	r0, #50	; 0x32
 8001df8:	f001 fcca 	bl	8003790 <HAL_Delay>

	char cfg_buff[6] = {0};
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	809a      	strh	r2, [r3, #4]
	enum lora{Transparent, Fixed} mode;
	mode = MODE;
 8001e06:	793b      	ldrb	r3, [r7, #4]
 8001e08:	73fb      	strb	r3, [r7, #15]

	cfg_buff[0] = 0xC0;  // header for saving paramater when power down C0
 8001e0a:	23c0      	movs	r3, #192	; 0xc0
 8001e0c:	723b      	strb	r3, [r7, #8]
	cfg_buff[1] = ADDH;  // high address
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	727b      	strb	r3, [r7, #9]
	cfg_buff[2] = ADDL;  // low address
 8001e12:	79bb      	ldrb	r3, [r7, #6]
 8001e14:	72bb      	strb	r3, [r7, #10]
	cfg_buff[3] = 0x19;  // SPED (parity, baud, data rate)
 8001e16:	2319      	movs	r3, #25
 8001e18:	72fb      	strb	r3, [r7, #11]
	cfg_buff[4] = CHN;   // channel
 8001e1a:	797b      	ldrb	r3, [r7, #5]
 8001e1c:	733b      	strb	r3, [r7, #12]

	switch(mode){
 8001e1e:	7bfb      	ldrb	r3, [r7, #15]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <LORA_CONFG+0x66>
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d003      	beq.n	8001e30 <LORA_CONFG+0x6c>
 8001e28:	e005      	b.n	8001e36 <LORA_CONFG+0x72>
	case Transparent:
		cfg_buff[5] = 0x44;  // option
 8001e2a:	2344      	movs	r3, #68	; 0x44
 8001e2c:	737b      	strb	r3, [r7, #13]
		break;
 8001e2e:	e004      	b.n	8001e3a <LORA_CONFG+0x76>
	case Fixed:
		cfg_buff[5] = 0xC4;  // option
 8001e30:	23c4      	movs	r3, #196	; 0xc4
 8001e32:	737b      	strb	r3, [r7, #13]
		break;
 8001e34:	e001      	b.n	8001e3a <LORA_CONFG+0x76>
	default:
		cfg_buff[5] = 0x44;  // option
 8001e36:	2344      	movs	r3, #68	; 0x44
 8001e38:	737b      	strb	r3, [r7, #13]
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) cfg_buff, 6, 1000);
 8001e3a:	f107 0108 	add.w	r1, r7, #8
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	2206      	movs	r2, #6
 8001e44:	480c      	ldr	r0, [pc, #48]	; (8001e78 <LORA_CONFG+0xb4>)
 8001e46:	f004 fb8e 	bl	8006566 <HAL_UART_Transmit>

	HAL_Delay(25);
 8001e4a:	2019      	movs	r0, #25
 8001e4c:	f001 fca0 	bl	8003790 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2101      	movs	r1, #1
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <LORA_CONFG+0xb0>)
 8001e56:	f001 ffd5 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <LORA_CONFG+0xb0>)
 8001e60:	f001 ffd0 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8001e64:	2019      	movs	r0, #25
 8001e66:	f001 fc93 	bl	8003790 <HAL_Delay>
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd90      	pop	{r4, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40010800 	.word	0x40010800
 8001e78:	200005a8 	.word	0x200005a8

08001e7c <LORA_READ_PARAMETER>:

void LORA_READ_PARAMETER()
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8001e82:	2201      	movs	r2, #1
 8001e84:	2101      	movs	r1, #1
 8001e86:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <LORA_READ_PARAMETER+0x78>)
 8001e88:	f001 ffbc 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2102      	movs	r1, #2
 8001e90:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <LORA_READ_PARAMETER+0x78>)
 8001e92:	f001 ffb7 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001e96:	2032      	movs	r0, #50	; 0x32
 8001e98:	f001 fc7a 	bl	8003790 <HAL_Delay>

	char buff_read[6] = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	809a      	strh	r2, [r3, #4]
	buff_read[0] = 0xC1;
 8001ea4:	23c1      	movs	r3, #193	; 0xc1
 8001ea6:	703b      	strb	r3, [r7, #0]
	buff_read[1] = 0xC1;
 8001ea8:	23c1      	movs	r3, #193	; 0xc1
 8001eaa:	707b      	strb	r3, [r7, #1]
	buff_read[2] = 0xC1;
 8001eac:	23c1      	movs	r3, #193	; 0xc1
 8001eae:	70bb      	strb	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t*) buff_read, 3, 1000);
 8001eb0:	4639      	mov	r1, r7
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	480f      	ldr	r0, [pc, #60]	; (8001ef8 <LORA_READ_PARAMETER+0x7c>)
 8001eba:	f004 fb54 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, (uint8_t*) buff_read, 6, 1000);
 8001ebe:	4639      	mov	r1, r7
 8001ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	480c      	ldr	r0, [pc, #48]	; (8001ef8 <LORA_READ_PARAMETER+0x7c>)
 8001ec8:	f004 fbdf 	bl	800668a <HAL_UART_Receive>

	HAL_Delay(25);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f001 fc5f 	bl	8003790 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <LORA_READ_PARAMETER+0x78>)
 8001ed8:	f001 ff94 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2102      	movs	r1, #2
 8001ee0:	4804      	ldr	r0, [pc, #16]	; (8001ef4 <LORA_READ_PARAMETER+0x78>)
 8001ee2:	f001 ff8f 	bl	8003e04 <HAL_GPIO_WritePin>
	HAL_Delay(25);
 8001ee6:	2019      	movs	r0, #25
 8001ee8:	f001 fc52 	bl	8003790 <HAL_Delay>
}
 8001eec:	bf00      	nop
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	200005a8 	.word	0x200005a8

08001efc <Data_Parsing>:

void Data_Parsing(void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
	uint8_t first = 0, second = 0, countstr = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
 8001f06:	2300      	movs	r3, #0
 8001f08:	71bb      	strb	r3, [r7, #6]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	717b      	strb	r3, [r7, #5]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	713b      	strb	r3, [r7, #4]
 8001f12:	e083      	b.n	800201c <Data_Parsing+0x120>
		if (NEXT_BUFF[i] == ':') {
 8001f14:	793b      	ldrb	r3, [r7, #4]
 8001f16:	4a4f      	ldr	r2, [pc, #316]	; (8002054 <Data_Parsing+0x158>)
 8001f18:	5cd3      	ldrb	r3, [r2, r3]
 8001f1a:	2b3a      	cmp	r3, #58	; 0x3a
 8001f1c:	d17b      	bne.n	8002016 <Data_Parsing+0x11a>
			first = second;
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	71fb      	strb	r3, [r7, #7]
			second = i;
 8001f22:	793b      	ldrb	r3, [r7, #4]
 8001f24:	71bb      	strb	r3, [r7, #6]
			countstr++;
 8001f26:	797b      	ldrb	r3, [r7, #5]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	717b      	strb	r3, [r7, #5]
			uint8_t countstr1 = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	70fb      	strb	r3, [r7, #3]
			for (first++; first < second; first++) {
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	3301      	adds	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e06a      	b.n	800200e <Data_Parsing+0x112>
				switch (countstr) {
 8001f38:	797b      	ldrb	r3, [r7, #5]
 8001f3a:	3b02      	subs	r3, #2
 8001f3c:	2b07      	cmp	r3, #7
 8001f3e:	d863      	bhi.n	8002008 <Data_Parsing+0x10c>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <Data_Parsing+0x4c>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f69 	.word	0x08001f69
 8001f4c:	08001f7d 	.word	0x08001f7d
 8001f50:	08001f91 	.word	0x08001f91
 8001f54:	08001fa5 	.word	0x08001fa5
 8001f58:	08001fb9 	.word	0x08001fb9
 8001f5c:	08001fcd 	.word	0x08001fcd
 8001f60:	08001fe1 	.word	0x08001fe1
 8001f64:	08001ff5 	.word	0x08001ff5
				case 2:
					sn[countstr1] = NEXT_BUFF[first];
 8001f68:	79fa      	ldrb	r2, [r7, #7]
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	4939      	ldr	r1, [pc, #228]	; (8002054 <Data_Parsing+0x158>)
 8001f6e:	5c89      	ldrb	r1, [r1, r2]
 8001f70:	4a39      	ldr	r2, [pc, #228]	; (8002058 <Data_Parsing+0x15c>)
 8001f72:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001f74:	78fb      	ldrb	r3, [r7, #3]
 8001f76:	3301      	adds	r3, #1
 8001f78:	70fb      	strb	r3, [r7, #3]
					break;
 8001f7a:	e045      	b.n	8002008 <Data_Parsing+0x10c>
				case 3:
					lat1[countstr1] = NEXT_BUFF[first];
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	4934      	ldr	r1, [pc, #208]	; (8002054 <Data_Parsing+0x158>)
 8001f82:	5c89      	ldrb	r1, [r1, r2]
 8001f84:	4a35      	ldr	r2, [pc, #212]	; (800205c <Data_Parsing+0x160>)
 8001f86:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	70fb      	strb	r3, [r7, #3]
					break;
 8001f8e:	e03b      	b.n	8002008 <Data_Parsing+0x10c>
				case 4:
					lng1[countstr1] = NEXT_BUFF[first];
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	492f      	ldr	r1, [pc, #188]	; (8002054 <Data_Parsing+0x158>)
 8001f96:	5c89      	ldrb	r1, [r1, r2]
 8001f98:	4a31      	ldr	r2, [pc, #196]	; (8002060 <Data_Parsing+0x164>)
 8001f9a:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	70fb      	strb	r3, [r7, #3]
					break;
 8001fa2:	e031      	b.n	8002008 <Data_Parsing+0x10c>
				case 5:
					alt[countstr1] = NEXT_BUFF[first];
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	492a      	ldr	r1, [pc, #168]	; (8002054 <Data_Parsing+0x158>)
 8001faa:	5c89      	ldrb	r1, [r1, r2]
 8001fac:	4a2d      	ldr	r2, [pc, #180]	; (8002064 <Data_Parsing+0x168>)
 8001fae:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	70fb      	strb	r3, [r7, #3]
					break;
 8001fb6:	e027      	b.n	8002008 <Data_Parsing+0x10c>
				case 6:
					vlc[countstr1] = NEXT_BUFF[first];
 8001fb8:	79fa      	ldrb	r2, [r7, #7]
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	4925      	ldr	r1, [pc, #148]	; (8002054 <Data_Parsing+0x158>)
 8001fbe:	5c89      	ldrb	r1, [r1, r2]
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <Data_Parsing+0x16c>)
 8001fc2:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	70fb      	strb	r3, [r7, #3]
					break;
 8001fca:	e01d      	b.n	8002008 <Data_Parsing+0x10c>
				case 7:
					rollpitch[countstr1] = NEXT_BUFF[first];
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	4920      	ldr	r1, [pc, #128]	; (8002054 <Data_Parsing+0x158>)
 8001fd2:	5c89      	ldrb	r1, [r1, r2]
 8001fd4:	4a25      	ldr	r2, [pc, #148]	; (800206c <Data_Parsing+0x170>)
 8001fd6:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	70fb      	strb	r3, [r7, #3]
					break;
 8001fde:	e013      	b.n	8002008 <Data_Parsing+0x10c>
				case 8:
					apg[countstr1] = NEXT_BUFF[first];
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	491b      	ldr	r1, [pc, #108]	; (8002054 <Data_Parsing+0x158>)
 8001fe6:	5c89      	ldrb	r1, [r1, r2]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	; (8002070 <Data_Parsing+0x174>)
 8001fea:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	70fb      	strb	r3, [r7, #3]
					break;
 8001ff2:	e009      	b.n	8002008 <Data_Parsing+0x10c>
				case 9:
					mn[countstr1] = NEXT_BUFF[first];
 8001ff4:	79fa      	ldrb	r2, [r7, #7]
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	4916      	ldr	r1, [pc, #88]	; (8002054 <Data_Parsing+0x158>)
 8001ffa:	5c89      	ldrb	r1, [r1, r2]
 8001ffc:	4a1d      	ldr	r2, [pc, #116]	; (8002074 <Data_Parsing+0x178>)
 8001ffe:	54d1      	strb	r1, [r2, r3]
					countstr1++;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	3301      	adds	r3, #1
 8002004:	70fb      	strb	r3, [r7, #3]
					break;
 8002006:	bf00      	nop
			for (first++; first < second; first++) {
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	3301      	adds	r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
 800200e:	79fa      	ldrb	r2, [r7, #7]
 8002010:	79bb      	ldrb	r3, [r7, #6]
 8002012:	429a      	cmp	r2, r3
 8002014:	d390      	bcc.n	8001f38 <Data_Parsing+0x3c>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++) {
 8002016:	793b      	ldrb	r3, [r7, #4]
 8002018:	3301      	adds	r3, #1
 800201a:	713b      	strb	r3, [r7, #4]
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	2b77      	cmp	r3, #119	; 0x77
 8002020:	f67f af78 	bls.w	8001f14 <Data_Parsing+0x18>
				}
			}
		}
	}

	ID = NEXT_BUFF[0];
 8002024:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <Data_Parsing+0x158>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <Data_Parsing+0x17c>)
 800202a:	701a      	strb	r2, [r3, #0]

	Data_Convert();
 800202c:	f000 f828 	bl	8002080 <Data_Convert>
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 8002030:	2300      	movs	r3, #0
 8002032:	70bb      	strb	r3, [r7, #2]
 8002034:	e006      	b.n	8002044 <Data_Parsing+0x148>
		NEXT_BUFF[i] = '\0';
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	4a06      	ldr	r2, [pc, #24]	; (8002054 <Data_Parsing+0x158>)
 800203a:	2100      	movs	r1, #0
 800203c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < sizeof(NEXT_BUFF); i++)
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	3301      	adds	r3, #1
 8002042:	70bb      	strb	r3, [r7, #2]
 8002044:	78bb      	ldrb	r3, [r7, #2]
 8002046:	2b77      	cmp	r3, #119	; 0x77
 8002048:	d9f5      	bls.n	8002036 <Data_Parsing+0x13a>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000354 	.word	0x20000354
 8002058:	2000026c 	.word	0x2000026c
 800205c:	20000270 	.word	0x20000270
 8002060:	2000027c 	.word	0x2000027c
 8002064:	20000288 	.word	0x20000288
 8002068:	20000290 	.word	0x20000290
 800206c:	20000298 	.word	0x20000298
 8002070:	200002a8 	.word	0x200002a8
 8002074:	200002ac 	.word	0x200002ac
 8002078:	20000269 	.word	0x20000269
 800207c:	00000000 	.word	0x00000000

08002080 <Data_Convert>:

void Data_Convert(void) {
 8002080:	b598      	push	{r3, r4, r7, lr}
 8002082:	af00      	add	r7, sp, #0
	finding_maxmin();
 8002084:	f000 f9ee 	bl	8002464 <finding_maxmin>

	if (ID == '0') {
 8002088:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <Data_Convert+0x128>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b30      	cmp	r3, #48	; 0x30
 800208e:	d118      	bne.n	80020c2 <Data_Convert+0x42>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		EPH_lat = atof(lat1);
 8002090:	4846      	ldr	r0, [pc, #280]	; (80021ac <Data_Convert+0x12c>)
 8002092:	f005 f801 	bl	8007098 <atof>
 8002096:	4603      	mov	r3, r0
 8002098:	460c      	mov	r4, r1
 800209a:	4618      	mov	r0, r3
 800209c:	4621      	mov	r1, r4
 800209e:	f7fe fd13 	bl	8000ac8 <__aeabi_d2f>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <Data_Convert+0x130>)
 80020a6:	601a      	str	r2, [r3, #0]
		EPH_lng = atof(lng1);
 80020a8:	4842      	ldr	r0, [pc, #264]	; (80021b4 <Data_Convert+0x134>)
 80020aa:	f004 fff5 	bl	8007098 <atof>
 80020ae:	4603      	mov	r3, r0
 80020b0:	460c      	mov	r4, r1
 80020b2:	4618      	mov	r0, r3
 80020b4:	4621      	mov	r1, r4
 80020b6:	f7fe fd07 	bl	8000ac8 <__aeabi_d2f>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <Data_Convert+0x138>)
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e01b      	b.n	80020fa <Data_Convert+0x7a>
	} else if (ID == '1') {
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <Data_Convert+0x128>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b31      	cmp	r3, #49	; 0x31
 80020c8:	d117      	bne.n	80020fa <Data_Convert+0x7a>
		strcpy(lat1, lat1);
		strcpy(lng1, lng1);
		PL_lat = atof(lat1);
 80020ca:	4838      	ldr	r0, [pc, #224]	; (80021ac <Data_Convert+0x12c>)
 80020cc:	f004 ffe4 	bl	8007098 <atof>
 80020d0:	4603      	mov	r3, r0
 80020d2:	460c      	mov	r4, r1
 80020d4:	4618      	mov	r0, r3
 80020d6:	4621      	mov	r1, r4
 80020d8:	f7fe fcf6 	bl	8000ac8 <__aeabi_d2f>
 80020dc:	4602      	mov	r2, r0
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <Data_Convert+0x13c>)
 80020e0:	601a      	str	r2, [r3, #0]
		PL_lng = atof(lng1);
 80020e2:	4834      	ldr	r0, [pc, #208]	; (80021b4 <Data_Convert+0x134>)
 80020e4:	f004 ffd8 	bl	8007098 <atof>
 80020e8:	4603      	mov	r3, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	4618      	mov	r0, r3
 80020ee:	4621      	mov	r1, r4
 80020f0:	f7fe fcea 	bl	8000ac8 <__aeabi_d2f>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <Data_Convert+0x140>)
 80020f8:	601a      	str	r2, [r3, #0]
	}

	if(vlcf < 0){
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <Data_Convert+0x144>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f04f 0100 	mov.w	r1, #0
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe ffdc 	bl	80010c0 <__aeabi_fcmplt>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d009      	beq.n	8002122 <Data_Convert+0xa2>
		vlcf *= -1;
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <Data_Convert+0x144>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002116:	4a2b      	ldr	r2, [pc, #172]	; (80021c4 <Data_Convert+0x144>)
 8002118:	6013      	str	r3, [r2, #0]
		fall = 1;
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <Data_Convert+0x148>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
 8002120:	e002      	b.n	8002128 <Data_Convert+0xa8>
	}else fall = 0;
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <Data_Convert+0x148>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

	speedometer = 336 + (int16_t)((vlcf / 300.0) * 225);
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <Data_Convert+0x144>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f97b 	bl	8000428 <__aeabi_f2d>
 8002132:	a319      	add	r3, pc, #100	; (adr r3, 8002198 <Data_Convert+0x118>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f7fe faf8 	bl	800072c <__aeabi_ddiv>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4618      	mov	r0, r3
 8002142:	4621      	mov	r1, r4
 8002144:	a316      	add	r3, pc, #88	; (adr r3, 80021a0 <Data_Convert+0x120>)
 8002146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214a:	f7fe f9c5 	bl	80004d8 <__aeabi_dmul>
 800214e:	4603      	mov	r3, r0
 8002150:	460c      	mov	r4, r1
 8002152:	4618      	mov	r0, r3
 8002154:	4621      	mov	r1, r4
 8002156:	f7fe fc6f 	bl	8000a38 <__aeabi_d2iz>
 800215a:	4603      	mov	r3, r0
 800215c:	b21b      	sxth	r3, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002164:	b29b      	uxth	r3, r3
 8002166:	b21a      	sxth	r2, r3
 8002168:	4b18      	ldr	r3, [pc, #96]	; (80021cc <Data_Convert+0x14c>)
 800216a:	801a      	strh	r2, [r3, #0]
	if(speedometer > 360) speedometer -= 360;
 800216c:	4b17      	ldr	r3, [pc, #92]	; (80021cc <Data_Convert+0x14c>)
 800216e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002172:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002176:	dd09      	ble.n	800218c <Data_Convert+0x10c>
 8002178:	4b14      	ldr	r3, [pc, #80]	; (80021cc <Data_Convert+0x14c>)
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002184:	b29b      	uxth	r3, r3
 8002186:	b21a      	sxth	r2, r3
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <Data_Convert+0x14c>)
 800218a:	801a      	strh	r2, [r3, #0]

	Data_ToNextion();
 800218c:	f000 f820 	bl	80021d0 <Data_ToNextion>
}
 8002190:	bf00      	nop
 8002192:	bd98      	pop	{r3, r4, r7, pc}
 8002194:	f3af 8000 	nop.w
 8002198:	00000000 	.word	0x00000000
 800219c:	4072c000 	.word	0x4072c000
 80021a0:	00000000 	.word	0x00000000
 80021a4:	406c2000 	.word	0x406c2000
 80021a8:	20000269 	.word	0x20000269
 80021ac:	20000270 	.word	0x20000270
 80021b0:	2000022c 	.word	0x2000022c
 80021b4:	2000027c 	.word	0x2000027c
 80021b8:	20000230 	.word	0x20000230
 80021bc:	20000234 	.word	0x20000234
 80021c0:	20000238 	.word	0x20000238
 80021c4:	200002b0 	.word	0x200002b0
 80021c8:	200002ad 	.word	0x200002ad
 80021cc:	200002d8 	.word	0x200002d8

080021d0 <Data_ToNextion>:

void Data_ToNextion(void) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

	if (EPH_lat != .0 && EPH_lng != .0) {	// EPHEMERISH son enlem, boylam verileri
 80021d4:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <Data_ToNextion+0x1d0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f04f 0100 	mov.w	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe ff65 	bl	80010ac <__aeabi_fcmpeq>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <Data_ToNextion+0x3c>
 80021e8:	4b6e      	ldr	r3, [pc, #440]	; (80023a4 <Data_ToNextion+0x1d4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f04f 0100 	mov.w	r1, #0
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff5b 	bl	80010ac <__aeabi_fcmpeq>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d107      	bne.n	800220c <Data_ToNextion+0x3c>
		NXT_SEND_TXTBX("page3.t34.txt", lat1);
 80021fc:	496a      	ldr	r1, [pc, #424]	; (80023a8 <Data_ToNextion+0x1d8>)
 80021fe:	486b      	ldr	r0, [pc, #428]	; (80023ac <Data_ToNextion+0x1dc>)
 8002200:	f000 fd06 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t35.txt", lng1);
 8002204:	496a      	ldr	r1, [pc, #424]	; (80023b0 <Data_ToNextion+0x1e0>)
 8002206:	486b      	ldr	r0, [pc, #428]	; (80023b4 <Data_ToNextion+0x1e4>)
 8002208:	f000 fd02 	bl	8002c10 <NXT_SEND_TXTBX>
	}
	if (PL_lat != .0 && PL_lng != .0) {		// PAYLOAD son enlem, boylam verileri
 800220c:	4b6a      	ldr	r3, [pc, #424]	; (80023b8 <Data_ToNextion+0x1e8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ff49 	bl	80010ac <__aeabi_fcmpeq>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d111      	bne.n	8002244 <Data_ToNextion+0x74>
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <Data_ToNextion+0x1ec>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe ff3f 	bl	80010ac <__aeabi_fcmpeq>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <Data_ToNextion+0x74>
		NXT_SEND_TXTBX("page3.t36.txt", lat1);
 8002234:	495c      	ldr	r1, [pc, #368]	; (80023a8 <Data_ToNextion+0x1d8>)
 8002236:	4862      	ldr	r0, [pc, #392]	; (80023c0 <Data_ToNextion+0x1f0>)
 8002238:	f000 fcea 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page3.t37.txt", lng1);
 800223c:	495c      	ldr	r1, [pc, #368]	; (80023b0 <Data_ToNextion+0x1e0>)
 800223e:	4861      	ldr	r0, [pc, #388]	; (80023c4 <Data_ToNextion+0x1f4>)
 8002240:	f000 fce6 	bl	8002c10 <NXT_SEND_TXTBX>
	}

	if (ID == '1') {
 8002244:	4b60      	ldr	r3, [pc, #384]	; (80023c8 <Data_ToNextion+0x1f8>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b31      	cmp	r3, #49	; 0x31
 800224a:	d147      	bne.n	80022dc <Data_ToNextion+0x10c>
		NXT_SEND_TXTBX("page1.t14.txt", lat1);
 800224c:	4956      	ldr	r1, [pc, #344]	; (80023a8 <Data_ToNextion+0x1d8>)
 800224e:	485f      	ldr	r0, [pc, #380]	; (80023cc <Data_ToNextion+0x1fc>)
 8002250:	f000 fcde 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t15.txt", lng1);
 8002254:	4956      	ldr	r1, [pc, #344]	; (80023b0 <Data_ToNextion+0x1e0>)
 8002256:	485e      	ldr	r0, [pc, #376]	; (80023d0 <Data_ToNextion+0x200>)
 8002258:	f000 fcda 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t16.txt", alt);
 800225c:	495d      	ldr	r1, [pc, #372]	; (80023d4 <Data_ToNextion+0x204>)
 800225e:	485e      	ldr	r0, [pc, #376]	; (80023d8 <Data_ToNextion+0x208>)
 8002260:	f000 fcd6 	bl	8002c10 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x6.val", PLmax_vlci);
 8002264:	4b5d      	ldr	r3, [pc, #372]	; (80023dc <Data_ToNextion+0x20c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	485d      	ldr	r0, [pc, #372]	; (80023e0 <Data_ToNextion+0x210>)
 800226c:	f000 fc4c 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x7.val", PLmin_vlci);
 8002270:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <Data_ToNextion+0x214>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	485c      	ldr	r0, [pc, #368]	; (80023e8 <Data_ToNextion+0x218>)
 8002278:	f000 fc46 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x5.val", PLmax_alti);
 800227c:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <Data_ToNextion+0x21c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	485b      	ldr	r0, [pc, #364]	; (80023f0 <Data_ToNextion+0x220>)
 8002284:	f000 fc40 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x9.val", PLmin_alti);
 8002288:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <Data_ToNextion+0x224>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4619      	mov	r1, r3
 800228e:	485a      	ldr	r0, [pc, #360]	; (80023f8 <Data_ToNextion+0x228>)
 8002290:	f000 fc3a 	bl	8002b08 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 1);
 8002294:	2101      	movs	r1, #1
 8002296:	4859      	ldr	r0, [pc, #356]	; (80023fc <Data_ToNextion+0x22c>)
 8002298:	f000 fc36 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 0);
 800229c:	2100      	movs	r1, #0
 800229e:	4858      	ldr	r0, [pc, #352]	; (8002400 <Data_ToNextion+0x230>)
 80022a0:	f000 fc32 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z3.val", speedometer);
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <Data_ToNextion+0x234>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4856      	ldr	r0, [pc, #344]	; (8002408 <Data_ToNextion+0x238>)
 80022ae:	f000 fc2b 	bl	8002b08 <NXT_SEND_SVAL>
		if (fall == 1) {
 80022b2:	4b56      	ldr	r3, [pc, #344]	; (800240c <Data_ToNextion+0x23c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d104      	bne.n	80022c4 <Data_ToNextion+0xf4>
			NXT_SEND_SVAL("page1.z3.pco", 31);
 80022ba:	211f      	movs	r1, #31
 80022bc:	4854      	ldr	r0, [pc, #336]	; (8002410 <Data_ToNextion+0x240>)
 80022be:	f000 fc23 	bl	8002b08 <NXT_SEND_SVAL>
 80022c2:	e004      	b.n	80022ce <Data_ToNextion+0xfe>
		} else {
			NXT_SEND_SVAL("page1.z3.pco", 63488);
 80022c4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80022c8:	4851      	ldr	r0, [pc, #324]	; (8002410 <Data_ToNextion+0x240>)
 80022ca:	f000 fc1d 	bl	8002b08 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x1.val", vlci);
 80022ce:	4b51      	ldr	r3, [pc, #324]	; (8002414 <Data_ToNextion+0x244>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4850      	ldr	r0, [pc, #320]	; (8002418 <Data_ToNextion+0x248>)
 80022d6:	f000 fc17 	bl	8002b08 <NXT_SEND_SVAL>
 80022da:	e05c      	b.n	8002396 <Data_ToNextion+0x1c6>

	} else if (ID == '0') {
 80022dc:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <Data_ToNextion+0x1f8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b30      	cmp	r3, #48	; 0x30
 80022e2:	d158      	bne.n	8002396 <Data_ToNextion+0x1c6>
		NXT_SEND_TXTBX("page1.t8.txt", lat1);
 80022e4:	4930      	ldr	r1, [pc, #192]	; (80023a8 <Data_ToNextion+0x1d8>)
 80022e6:	484d      	ldr	r0, [pc, #308]	; (800241c <Data_ToNextion+0x24c>)
 80022e8:	f000 fc92 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t9.txt", lng1);
 80022ec:	4930      	ldr	r1, [pc, #192]	; (80023b0 <Data_ToNextion+0x1e0>)
 80022ee:	484c      	ldr	r0, [pc, #304]	; (8002420 <Data_ToNextion+0x250>)
 80022f0:	f000 fc8e 	bl	8002c10 <NXT_SEND_TXTBX>
		NXT_SEND_TXTBX("page1.t13.txt", alt);
 80022f4:	4937      	ldr	r1, [pc, #220]	; (80023d4 <Data_ToNextion+0x204>)
 80022f6:	484b      	ldr	r0, [pc, #300]	; (8002424 <Data_ToNextion+0x254>)
 80022f8:	f000 fc8a 	bl	8002c10 <NXT_SEND_TXTBX>

		NXT_SEND_SVAL("page3.x3.val", EPHmax_vlci);
 80022fc:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <Data_ToNextion+0x258>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4619      	mov	r1, r3
 8002302:	484a      	ldr	r0, [pc, #296]	; (800242c <Data_ToNextion+0x25c>)
 8002304:	f000 fc00 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x4.val", EPHmin_vlci);
 8002308:	4b49      	ldr	r3, [pc, #292]	; (8002430 <Data_ToNextion+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	4849      	ldr	r0, [pc, #292]	; (8002434 <Data_ToNextion+0x264>)
 8002310:	f000 fbfa 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x2.val", EPHmax_alti);
 8002314:	4b48      	ldr	r3, [pc, #288]	; (8002438 <Data_ToNextion+0x268>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	4848      	ldr	r0, [pc, #288]	; (800243c <Data_ToNextion+0x26c>)
 800231c:	f000 fbf4 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page3.x8.val", EPHmin_alti);  // PLmin_alti  EPHmin_alti
 8002320:	4b47      	ldr	r3, [pc, #284]	; (8002440 <Data_ToNextion+0x270>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	4847      	ldr	r0, [pc, #284]	; (8002444 <Data_ToNextion+0x274>)
 8002328:	f000 fbee 	bl	8002b08 <NXT_SEND_SVAL>

		NXT_SEND_SVAL("page1.c1.val", 0);
 800232c:	2100      	movs	r1, #0
 800232e:	4833      	ldr	r0, [pc, #204]	; (80023fc <Data_ToNextion+0x22c>)
 8002330:	f000 fbea 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.c0.val", 1);
 8002334:	2101      	movs	r1, #1
 8002336:	4832      	ldr	r0, [pc, #200]	; (8002400 <Data_ToNextion+0x230>)
 8002338:	f000 fbe6 	bl	8002b08 <NXT_SEND_SVAL>
		NXT_SEND_SVAL("page1.z4.val", speedometer);
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <Data_ToNextion+0x234>)
 800233e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002342:	4619      	mov	r1, r3
 8002344:	4840      	ldr	r0, [pc, #256]	; (8002448 <Data_ToNextion+0x278>)
 8002346:	f000 fbdf 	bl	8002b08 <NXT_SEND_SVAL>
		if (fall == 1) {
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <Data_ToNextion+0x23c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d104      	bne.n	800235c <Data_ToNextion+0x18c>
			NXT_SEND_SVAL("page1.z4.pco", 31);
 8002352:	211f      	movs	r1, #31
 8002354:	483d      	ldr	r0, [pc, #244]	; (800244c <Data_ToNextion+0x27c>)
 8002356:	f000 fbd7 	bl	8002b08 <NXT_SEND_SVAL>
 800235a:	e004      	b.n	8002366 <Data_ToNextion+0x196>
		} else {
			NXT_SEND_SVAL("page1.z4.pco", 63488);
 800235c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002360:	483a      	ldr	r0, [pc, #232]	; (800244c <Data_ToNextion+0x27c>)
 8002362:	f000 fbd1 	bl	8002b08 <NXT_SEND_SVAL>
		}

		NXT_SEND_SVAL("page1.x0.val", vlci);
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <Data_ToNextion+0x244>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4619      	mov	r1, r3
 800236c:	4838      	ldr	r0, [pc, #224]	; (8002450 <Data_ToNextion+0x280>)
 800236e:	f000 fbcb 	bl	8002b08 <NXT_SEND_SVAL>

		if (*apg == '1') {
 8002372:	4b38      	ldr	r3, [pc, #224]	; (8002454 <Data_ToNextion+0x284>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b31      	cmp	r3, #49	; 0x31
 8002378:	d104      	bne.n	8002384 <Data_ToNextion+0x1b4>
			NXT_SEND_SVAL("page1.t10.bco", 63488);
 800237a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800237e:	4836      	ldr	r0, [pc, #216]	; (8002458 <Data_ToNextion+0x288>)
 8002380:	f000 fbc2 	bl	8002b08 <NXT_SEND_SVAL>
		}
		if (*mn == '1') {
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <Data_ToNextion+0x28c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b31      	cmp	r3, #49	; 0x31
 800238a:	d104      	bne.n	8002396 <Data_ToNextion+0x1c6>
			NXT_SEND_SVAL("page1.t11.bco", 63488);
 800238c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002390:	4833      	ldr	r0, [pc, #204]	; (8002460 <Data_ToNextion+0x290>)
 8002392:	f000 fbb9 	bl	8002b08 <NXT_SEND_SVAL>
		}

	}

	ID = '\0';
 8002396:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <Data_ToNextion+0x1f8>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000022c 	.word	0x2000022c
 80023a4:	20000230 	.word	0x20000230
 80023a8:	20000270 	.word	0x20000270
 80023ac:	0800be7c 	.word	0x0800be7c
 80023b0:	2000027c 	.word	0x2000027c
 80023b4:	0800be8c 	.word	0x0800be8c
 80023b8:	20000234 	.word	0x20000234
 80023bc:	20000238 	.word	0x20000238
 80023c0:	0800be9c 	.word	0x0800be9c
 80023c4:	0800beac 	.word	0x0800beac
 80023c8:	20000269 	.word	0x20000269
 80023cc:	0800bebc 	.word	0x0800bebc
 80023d0:	0800becc 	.word	0x0800becc
 80023d4:	20000288 	.word	0x20000288
 80023d8:	0800bedc 	.word	0x0800bedc
 80023dc:	200002d0 	.word	0x200002d0
 80023e0:	0800beec 	.word	0x0800beec
 80023e4:	200002d4 	.word	0x200002d4
 80023e8:	0800befc 	.word	0x0800befc
 80023ec:	200002cc 	.word	0x200002cc
 80023f0:	0800bf0c 	.word	0x0800bf0c
 80023f4:	20000010 	.word	0x20000010
 80023f8:	0800bf1c 	.word	0x0800bf1c
 80023fc:	0800bf2c 	.word	0x0800bf2c
 8002400:	0800bf3c 	.word	0x0800bf3c
 8002404:	200002d8 	.word	0x200002d8
 8002408:	0800bf4c 	.word	0x0800bf4c
 800240c:	200002ad 	.word	0x200002ad
 8002410:	0800bf5c 	.word	0x0800bf5c
 8002414:	200002bc 	.word	0x200002bc
 8002418:	0800bf6c 	.word	0x0800bf6c
 800241c:	0800bf7c 	.word	0x0800bf7c
 8002420:	0800bf8c 	.word	0x0800bf8c
 8002424:	0800bf9c 	.word	0x0800bf9c
 8002428:	200002c4 	.word	0x200002c4
 800242c:	0800bfac 	.word	0x0800bfac
 8002430:	200002c8 	.word	0x200002c8
 8002434:	0800bfbc 	.word	0x0800bfbc
 8002438:	200002c0 	.word	0x200002c0
 800243c:	0800bfcc 	.word	0x0800bfcc
 8002440:	20000014 	.word	0x20000014
 8002444:	0800bfdc 	.word	0x0800bfdc
 8002448:	0800bfec 	.word	0x0800bfec
 800244c:	0800bffc 	.word	0x0800bffc
 8002450:	0800c00c 	.word	0x0800c00c
 8002454:	200002a8 	.word	0x200002a8
 8002458:	0800c01c 	.word	0x0800c01c
 800245c:	200002ac 	.word	0x200002ac
 8002460:	0800c02c 	.word	0x0800c02c

08002464 <finding_maxmin>:

void finding_maxmin(void) {
 8002464:	b598      	push	{r3, r4, r7, lr}
 8002466:	af00      	add	r7, sp, #0
	strcpy(vlc, vlc);
	vlcf = atof(vlc);
 8002468:	484c      	ldr	r0, [pc, #304]	; (800259c <finding_maxmin+0x138>)
 800246a:	f004 fe15 	bl	8007098 <atof>
 800246e:	4603      	mov	r3, r0
 8002470:	460c      	mov	r4, r1
 8002472:	4618      	mov	r0, r3
 8002474:	4621      	mov	r1, r4
 8002476:	f7fe fb27 	bl	8000ac8 <__aeabi_d2f>
 800247a:	4602      	mov	r2, r0
 800247c:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <finding_maxmin+0x13c>)
 800247e:	601a      	str	r2, [r3, #0]
	vlci = (int) (vlcf * 100.0);
 8002480:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <finding_maxmin+0x13c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd ffcf 	bl	8000428 <__aeabi_f2d>
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	4b45      	ldr	r3, [pc, #276]	; (80025a4 <finding_maxmin+0x140>)
 8002490:	f7fe f822 	bl	80004d8 <__aeabi_dmul>
 8002494:	4603      	mov	r3, r0
 8002496:	460c      	mov	r4, r1
 8002498:	4618      	mov	r0, r3
 800249a:	4621      	mov	r1, r4
 800249c:	f7fe facc 	bl	8000a38 <__aeabi_d2iz>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <finding_maxmin+0x144>)
 80024a4:	601a      	str	r2, [r3, #0]
	strcpy(alt, alt);
	altf = atof(alt);
 80024a6:	4841      	ldr	r0, [pc, #260]	; (80025ac <finding_maxmin+0x148>)
 80024a8:	f004 fdf6 	bl	8007098 <atof>
 80024ac:	4603      	mov	r3, r0
 80024ae:	460c      	mov	r4, r1
 80024b0:	4618      	mov	r0, r3
 80024b2:	4621      	mov	r1, r4
 80024b4:	f7fe fb08 	bl	8000ac8 <__aeabi_d2f>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b3d      	ldr	r3, [pc, #244]	; (80025b0 <finding_maxmin+0x14c>)
 80024bc:	601a      	str	r2, [r3, #0]
	alti = (int) (altf * 100.0);
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <finding_maxmin+0x14c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fd ffb0 	bl	8000428 <__aeabi_f2d>
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	4b35      	ldr	r3, [pc, #212]	; (80025a4 <finding_maxmin+0x140>)
 80024ce:	f7fe f803 	bl	80004d8 <__aeabi_dmul>
 80024d2:	4603      	mov	r3, r0
 80024d4:	460c      	mov	r4, r1
 80024d6:	4618      	mov	r0, r3
 80024d8:	4621      	mov	r1, r4
 80024da:	f7fe faad 	bl	8000a38 <__aeabi_d2iz>
 80024de:	4602      	mov	r2, r0
 80024e0:	4b34      	ldr	r3, [pc, #208]	; (80025b4 <finding_maxmin+0x150>)
 80024e2:	601a      	str	r2, [r3, #0]
	if (ID == '0') {
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <finding_maxmin+0x154>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b30      	cmp	r3, #48	; 0x30
 80024ea:	d128      	bne.n	800253e <finding_maxmin+0xda>
		if (vlci > EPHmax_vlci)
 80024ec:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <finding_maxmin+0x144>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <finding_maxmin+0x158>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dd03      	ble.n	8002500 <finding_maxmin+0x9c>
			EPHmax_vlci = vlci;
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <finding_maxmin+0x144>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <finding_maxmin+0x158>)
 80024fe:	6013      	str	r3, [r2, #0]
		if (vlci < EPHmin_vlci)
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <finding_maxmin+0x144>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b2e      	ldr	r3, [pc, #184]	; (80025c0 <finding_maxmin+0x15c>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	da03      	bge.n	8002514 <finding_maxmin+0xb0>
			EPHmin_vlci = vlci;
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <finding_maxmin+0x144>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a2b      	ldr	r2, [pc, #172]	; (80025c0 <finding_maxmin+0x15c>)
 8002512:	6013      	str	r3, [r2, #0]
		if (alti > EPHmax_alti)
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <finding_maxmin+0x150>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <finding_maxmin+0x160>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	dd03      	ble.n	8002528 <finding_maxmin+0xc4>
			EPHmax_alti = alti;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <finding_maxmin+0x150>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <finding_maxmin+0x160>)
 8002526:	6013      	str	r3, [r2, #0]
		if (alti < EPHmin_alti)
 8002528:	4b22      	ldr	r3, [pc, #136]	; (80025b4 <finding_maxmin+0x150>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <finding_maxmin+0x164>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	da30      	bge.n	8002596 <finding_maxmin+0x132>
			EPHmin_alti = alti;
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <finding_maxmin+0x150>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <finding_maxmin+0x164>)
 800253a:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
			PLmax_alti = alti;
		if (alti < PLmin_alti)
			PLmin_alti = alti;
	}
}
 800253c:	e02b      	b.n	8002596 <finding_maxmin+0x132>
	else if (ID == '1') {
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <finding_maxmin+0x154>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b31      	cmp	r3, #49	; 0x31
 8002544:	d127      	bne.n	8002596 <finding_maxmin+0x132>
		if (vlci > PLmax_vlci)
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <finding_maxmin+0x144>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <finding_maxmin+0x168>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	dd03      	ble.n	800255a <finding_maxmin+0xf6>
			PLmax_vlci = vlci;
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <finding_maxmin+0x144>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <finding_maxmin+0x168>)
 8002558:	6013      	str	r3, [r2, #0]
		if (vlci < PLmin_vlci)
 800255a:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <finding_maxmin+0x144>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <finding_maxmin+0x16c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	da03      	bge.n	800256e <finding_maxmin+0x10a>
			PLmin_vlci = vlci;
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <finding_maxmin+0x144>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <finding_maxmin+0x16c>)
 800256c:	6013      	str	r3, [r2, #0]
		if (alti > PLmax_alti)
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <finding_maxmin+0x150>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <finding_maxmin+0x170>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	dd03      	ble.n	8002582 <finding_maxmin+0x11e>
			PLmax_alti = alti;
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <finding_maxmin+0x150>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <finding_maxmin+0x170>)
 8002580:	6013      	str	r3, [r2, #0]
		if (alti < PLmin_alti)
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <finding_maxmin+0x150>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <finding_maxmin+0x174>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	da03      	bge.n	8002596 <finding_maxmin+0x132>
			PLmin_alti = alti;
 800258e:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <finding_maxmin+0x150>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <finding_maxmin+0x174>)
 8002594:	6013      	str	r3, [r2, #0]
}
 8002596:	bf00      	nop
 8002598:	bd98      	pop	{r3, r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	20000290 	.word	0x20000290
 80025a0:	200002b0 	.word	0x200002b0
 80025a4:	40590000 	.word	0x40590000
 80025a8:	200002bc 	.word	0x200002bc
 80025ac:	20000288 	.word	0x20000288
 80025b0:	200002b4 	.word	0x200002b4
 80025b4:	200002b8 	.word	0x200002b8
 80025b8:	20000269 	.word	0x20000269
 80025bc:	200002c4 	.word	0x200002c4
 80025c0:	200002c8 	.word	0x200002c8
 80025c4:	200002c0 	.word	0x200002c0
 80025c8:	20000014 	.word	0x20000014
 80025cc:	200002d0 	.word	0x200002d0
 80025d0:	200002d4 	.word	0x200002d4
 80025d4:	200002cc 	.word	0x200002cc
 80025d8:	20000010 	.word	0x20000010
 80025dc:	00000000 	.word	0x00000000

080025e0 <deg2rad>:

double deg2rad(float deg) {
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	double pi = 2 * acos(0.0);
 80025e8:	a40f      	add	r4, pc, #60	; (adr r4, 8002628 <deg2rad+0x48>)
 80025ea:	e9d4 3400 	ldrd	r3, r4, [r4]
 80025ee:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return deg * (pi / 180);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fd ff18 	bl	8000428 <__aeabi_f2d>
 80025f8:	4604      	mov	r4, r0
 80025fa:	460d      	mov	r5, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <deg2rad+0x50>)
 8002602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002606:	f7fe f891 	bl	800072c <__aeabi_ddiv>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd ff61 	bl	80004d8 <__aeabi_dmul>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
}
 800261a:	4618      	mov	r0, r3
 800261c:	4621      	mov	r1, r4
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bdb0      	pop	{r4, r5, r7, pc}
 8002624:	f3af 8000 	nop.w
 8002628:	54442d18 	.word	0x54442d18
 800262c:	400921fb 	.word	0x400921fb
 8002630:	40668000 	.word	0x40668000
 8002634:	00000000 	.word	0x00000000

08002638 <rad2deg>:

double rad2deg(float rad)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    double pi = 2 * acos(0.0);
 8002640:	a40b      	add	r4, pc, #44	; (adr r4, 8002670 <rad2deg+0x38>)
 8002642:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002646:	e9c7 3402 	strd	r3, r4, [r7, #8]
    return (rad * 180 / pi);
 800264a:	490b      	ldr	r1, [pc, #44]	; (8002678 <rad2deg+0x40>)
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7fe fb99 	bl	8000d84 <__aeabi_fmul>
 8002652:	4603      	mov	r3, r0
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd fee7 	bl	8000428 <__aeabi_f2d>
 800265a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800265e:	f7fe f865 	bl	800072c <__aeabi_ddiv>
 8002662:	4603      	mov	r3, r0
 8002664:	460c      	mov	r4, r1
}
 8002666:	4618      	mov	r0, r3
 8002668:	4621      	mov	r1, r4
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	54442d18 	.word	0x54442d18
 8002674:	400921fb 	.word	0x400921fb
 8002678:	43340000 	.word	0x43340000

0800267c <Cal_distGPS>:

float Cal_distGPS(float lat, float lng, float ground_latt, float ground_lngg) {
 800267c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
	dLat = deg2rad(lat - ground_latt); // deg2rad below
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7fe fa6e 	bl	8000b70 <__aeabi_fsub>
 8002694:	4603      	mov	r3, r0
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff ffa2 	bl	80025e0 <deg2rad>
 800269c:	4603      	mov	r3, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	4618      	mov	r0, r3
 80026a2:	4621      	mov	r1, r4
 80026a4:	f7fe fa10 	bl	8000ac8 <__aeabi_d2f>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b77      	ldr	r3, [pc, #476]	; (8002888 <Cal_distGPS+0x20c>)
 80026ac:	601a      	str	r2, [r3, #0]
	dLon = deg2rad(lng - ground_lngg);
 80026ae:	6839      	ldr	r1, [r7, #0]
 80026b0:	68b8      	ldr	r0, [r7, #8]
 80026b2:	f7fe fa5d 	bl	8000b70 <__aeabi_fsub>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff91 	bl	80025e0 <deg2rad>
 80026be:	4603      	mov	r3, r0
 80026c0:	460c      	mov	r4, r1
 80026c2:	4618      	mov	r0, r3
 80026c4:	4621      	mov	r1, r4
 80026c6:	f7fe f9ff 	bl	8000ac8 <__aeabi_d2f>
 80026ca:	4602      	mov	r2, r0
 80026cc:	4b6f      	ldr	r3, [pc, #444]	; (800288c <Cal_distGPS+0x210>)
 80026ce:	601a      	str	r2, [r3, #0]
	a = sin(dLat / 2) * sin(dLat / 2)
 80026d0:	4b6d      	ldr	r3, [pc, #436]	; (8002888 <Cal_distGPS+0x20c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fc07 	bl	8000eec <__aeabi_fdiv>
 80026de:	4603      	mov	r3, r0
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fea1 	bl	8000428 <__aeabi_f2d>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	4618      	mov	r0, r3
 80026ec:	4621      	mov	r1, r4
 80026ee:	f008 f807 	bl	800a700 <sin>
 80026f2:	4604      	mov	r4, r0
 80026f4:	460d      	mov	r5, r1
 80026f6:	4b64      	ldr	r3, [pc, #400]	; (8002888 <Cal_distGPS+0x20c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fbf4 	bl	8000eec <__aeabi_fdiv>
 8002704:	4603      	mov	r3, r0
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fe8e 	bl	8000428 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f007 fff4 	bl	800a700 <sin>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4620      	mov	r0, r4
 800271e:	4629      	mov	r1, r5
 8002720:	f7fd feda 	bl	80004d8 <__aeabi_dmul>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	4625      	mov	r5, r4
 800272a:	461c      	mov	r4, r3
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f7ff ff57 	bl	80025e0 <deg2rad>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f007 ffab 	bl	800a694 <cos>
 800273e:	4680      	mov	r8, r0
 8002740:	4689      	mov	r9, r1
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff4c 	bl	80025e0 <deg2rad>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	f007 ffa0 	bl	800a694 <cos>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4640      	mov	r0, r8
 800275a:	4649      	mov	r1, r9
 800275c:	f7fd febc 	bl	80004d8 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4690      	mov	r8, r2
 8002766:	4699      	mov	r9, r3
 8002768:	4b48      	ldr	r3, [pc, #288]	; (800288c <Cal_distGPS+0x210>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002770:	4618      	mov	r0, r3
 8002772:	f7fe fbbb 	bl	8000eec <__aeabi_fdiv>
 8002776:	4603      	mov	r3, r0
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fe55 	bl	8000428 <__aeabi_f2d>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	f007 ffbb 	bl	800a700 <sin>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4640      	mov	r0, r8
 8002790:	4649      	mov	r1, r9
 8002792:	f7fd fea1 	bl	80004d8 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4690      	mov	r8, r2
 800279c:	4699      	mov	r9, r3
					* sin(dLon / 2);
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <Cal_distGPS+0x210>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7fe fba0 	bl	8000eec <__aeabi_fdiv>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fd fe3a 	bl	8000428 <__aeabi_f2d>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f007 ffa0 	bl	800a700 <sin>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4640      	mov	r0, r8
 80027c6:	4649      	mov	r1, r9
 80027c8:	f7fd fe86 	bl	80004d8 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
			+ cos(deg2rad(lat)) * cos(deg2rad(ground_latt)) * sin(dLon / 2)
 80027d0:	4620      	mov	r0, r4
 80027d2:	4629      	mov	r1, r5
 80027d4:	f7fd fcca 	bl	800016c <__adddf3>
 80027d8:	4603      	mov	r3, r0
 80027da:	460c      	mov	r4, r1
 80027dc:	4618      	mov	r0, r3
 80027de:	4621      	mov	r1, r4
 80027e0:	f7fe f972 	bl	8000ac8 <__aeabi_d2f>
 80027e4:	4602      	mov	r2, r0
	a = sin(dLat / 2) * sin(dLat / 2)
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <Cal_distGPS+0x214>)
 80027e8:	601a      	str	r2, [r3, #0]
	c = 2 * atan2(sqrt(a), sqrt(1 - a));
 80027ea:	4b29      	ldr	r3, [pc, #164]	; (8002890 <Cal_distGPS+0x214>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe1a 	bl	8000428 <__aeabi_f2d>
 80027f4:	4603      	mov	r3, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	4618      	mov	r0, r3
 80027fa:	4621      	mov	r1, r4
 80027fc:	f007 ffbc 	bl	800a778 <sqrt>
 8002800:	4604      	mov	r4, r0
 8002802:	460d      	mov	r5, r1
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <Cal_distGPS+0x214>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800280e:	f7fe f9af 	bl	8000b70 <__aeabi_fsub>
 8002812:	4603      	mov	r3, r0
 8002814:	4618      	mov	r0, r3
 8002816:	f7fd fe07 	bl	8000428 <__aeabi_f2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	f007 ffa9 	bl	800a778 <sqrt>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4620      	mov	r0, r4
 800282c:	4629      	mov	r1, r5
 800282e:	f007 ffa1 	bl	800a774 <atan2>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	f7fd fc99 	bl	800016c <__adddf3>
 800283a:	4603      	mov	r3, r0
 800283c:	460c      	mov	r4, r1
 800283e:	4618      	mov	r0, r3
 8002840:	4621      	mov	r1, r4
 8002842:	f7fe f941 	bl	8000ac8 <__aeabi_d2f>
 8002846:	4602      	mov	r2, r0
 8002848:	4b12      	ldr	r3, [pc, #72]	; (8002894 <Cal_distGPS+0x218>)
 800284a:	601a      	str	r2, [r3, #0]
	d = R * c; // Distance in km
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <Cal_distGPS+0x21c>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <Cal_distGPS+0x218>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	4610      	mov	r0, r2
 8002858:	f7fe fa94 	bl	8000d84 <__aeabi_fmul>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	4b0e      	ldr	r3, [pc, #56]	; (800289c <Cal_distGPS+0x220>)
 8002862:	601a      	str	r2, [r3, #0]
	distance = d * 1000;
 8002864:	4b0d      	ldr	r3, [pc, #52]	; (800289c <Cal_distGPS+0x220>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	490d      	ldr	r1, [pc, #52]	; (80028a0 <Cal_distGPS+0x224>)
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fa8a 	bl	8000d84 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <Cal_distGPS+0x228>)
 8002876:	601a      	str	r2, [r3, #0]
	return distance;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <Cal_distGPS+0x228>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002886:	bf00      	nop
 8002888:	2000023c 	.word	0x2000023c
 800288c:	20000240 	.word	0x20000240
 8002890:	20000244 	.word	0x20000244
 8002894:	20000248 	.word	0x20000248
 8002898:	2000000c 	.word	0x2000000c
 800289c:	2000024c 	.word	0x2000024c
 80028a0:	447a0000 	.word	0x447a0000
 80028a4:	20000250 	.word	0x20000250

080028a8 <GetAngle>:

float GetAngle(float lat, float lng, float ground_latt, float ground_lngg) {
 80028a8:	b5b0      	push	{r4, r5, r7, lr}
 80028aa:	b08a      	sub	sp, #40	; 0x28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]
	float Org_Enlem = lat;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	623b      	str	r3, [r7, #32]
	float Org_Lng = ground_lngg;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	61fb      	str	r3, [r7, #28]

	float distance1 = Cal_distGPS(Org_Enlem, Org_Lng, lat, lng);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	69f9      	ldr	r1, [r7, #28]
 80028c4:	6a38      	ldr	r0, [r7, #32]
 80028c6:	f7ff fed9 	bl	800267c <Cal_distGPS>
 80028ca:	61b8      	str	r0, [r7, #24]
	float distance2 = Cal_distGPS(ground_latt, ground_lngg, Org_Enlem, Org_Lng);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff fed2 	bl	800267c <Cal_distGPS>
 80028d8:	6178      	str	r0, [r7, #20]

	float alfa = rad2deg(atan2(distance1, distance2));
 80028da:	69b8      	ldr	r0, [r7, #24]
 80028dc:	f7fd fda4 	bl	8000428 <__aeabi_f2d>
 80028e0:	4604      	mov	r4, r0
 80028e2:	460d      	mov	r5, r1
 80028e4:	6978      	ldr	r0, [r7, #20]
 80028e6:	f7fd fd9f 	bl	8000428 <__aeabi_f2d>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4620      	mov	r0, r4
 80028f0:	4629      	mov	r1, r5
 80028f2:	f007 ff3f 	bl	800a774 <atan2>
 80028f6:	4603      	mov	r3, r0
 80028f8:	460c      	mov	r4, r1
 80028fa:	4618      	mov	r0, r3
 80028fc:	4621      	mov	r1, r4
 80028fe:	f7fe f8e3 	bl	8000ac8 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe97 	bl	8002638 <rad2deg>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	4618      	mov	r0, r3
 8002910:	4621      	mov	r1, r4
 8002912:	f7fe f8d9 	bl	8000ac8 <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
	if (lat == ground_latt && lng == ground_lngg) {
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f7fe fbc5 	bl	80010ac <__aeabi_fcmpeq>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <GetAngle+0x96>
 8002928:	6839      	ldr	r1, [r7, #0]
 800292a:	68b8      	ldr	r0, [r7, #8]
 800292c:	f7fe fbbe 	bl	80010ac <__aeabi_fcmpeq>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <GetAngle+0x96>
		alfa = 0;
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
 800293c:	e090      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat == ground_latt && lng > ground_lngg) {
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7fe fbb3 	bl	80010ac <__aeabi_fcmpeq>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00a      	beq.n	8002962 <GetAngle+0xba>
 800294c:	6839      	ldr	r1, [r7, #0]
 800294e:	68b8      	ldr	r0, [r7, #8]
 8002950:	f7fe fbd4 	bl	80010fc <__aeabi_fcmpgt>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <GetAngle+0xba>
		alfa = 0;
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24
 8002960:	e07e      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat == ground_latt && lng < ground_lngg) {
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7fe fba1 	bl	80010ac <__aeabi_fcmpeq>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <GetAngle+0xdc>
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	68b8      	ldr	r0, [r7, #8]
 8002974:	f7fe fba4 	bl	80010c0 <__aeabi_fcmplt>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <GetAngle+0xdc>
		alfa = 180;
 800297e:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <GetAngle+0x1ec>)
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
 8002982:	e06d      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng == ground_lngg) {
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fe fbb8 	bl	80010fc <__aeabi_fcmpgt>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <GetAngle+0xfe>
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	68b8      	ldr	r0, [r7, #8]
 8002996:	f7fe fb89 	bl	80010ac <__aeabi_fcmpeq>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <GetAngle+0xfe>
		alfa = 90;
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <GetAngle+0x1f0>)
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	e05c      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng == ground_lngg) {
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7fe fba7 	bl	80010fc <__aeabi_fcmpgt>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d009      	beq.n	80029c8 <GetAngle+0x120>
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	68b8      	ldr	r0, [r7, #8]
 80029b8:	f7fe fb78 	bl	80010ac <__aeabi_fcmpeq>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <GetAngle+0x120>
		alfa = 270;
 80029c2:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <GetAngle+0x1f4>)
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e04b      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng > ground_lngg) {
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7fe fb96 	bl	80010fc <__aeabi_fcmpgt>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d006      	beq.n	80029e4 <GetAngle+0x13c>
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	68b8      	ldr	r0, [r7, #8]
 80029da:	f7fe fb8f 	bl	80010fc <__aeabi_fcmpgt>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d13d      	bne.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat < ground_latt && lng > ground_lngg) {
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7fe fb6a 	bl	80010c0 <__aeabi_fcmplt>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <GetAngle+0x166>
 80029f2:	6839      	ldr	r1, [r7, #0]
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f7fe fb81 	bl	80010fc <__aeabi_fcmpgt>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <GetAngle+0x166>
		alfa = 180 - alfa;
 8002a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a02:	4824      	ldr	r0, [pc, #144]	; (8002a94 <GetAngle+0x1ec>)
 8002a04:	f7fe f8b4 	bl	8000b70 <__aeabi_fsub>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0c:	e028      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat > ground_latt && lng < ground_lngg) {
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7fe fb73 	bl	80010fc <__aeabi_fcmpgt>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <GetAngle+0x190>
 8002a1c:	6839      	ldr	r1, [r7, #0]
 8002a1e:	68b8      	ldr	r0, [r7, #8]
 8002a20:	f7fe fb4e 	bl	80010c0 <__aeabi_fcmplt>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <GetAngle+0x190>
		alfa = 360 - alfa;
 8002a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a2c:	481c      	ldr	r0, [pc, #112]	; (8002aa0 <GetAngle+0x1f8>)
 8002a2e:	f7fe f89f 	bl	8000b70 <__aeabi_fsub>
 8002a32:	4603      	mov	r3, r0
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	e013      	b.n	8002a60 <GetAngle+0x1b8>
		//cout << "degree: " << alfa << endl;
	} else if (lat < ground_latt && lng < ground_lngg) {
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f7fe fb40 	bl	80010c0 <__aeabi_fcmplt>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <GetAngle+0x1b8>
 8002a46:	6839      	ldr	r1, [r7, #0]
 8002a48:	68b8      	ldr	r0, [r7, #8]
 8002a4a:	f7fe fb39 	bl	80010c0 <__aeabi_fcmplt>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <GetAngle+0x1b8>
		alfa = 180 + alfa;
 8002a54:	490f      	ldr	r1, [pc, #60]	; (8002a94 <GetAngle+0x1ec>)
 8002a56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a58:	f7fe f88c 	bl	8000b74 <__addsf3>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
		//cout << "degree: " << alfa << endl;
	}

	alfa -= 90.0;
 8002a60:	490d      	ldr	r1, [pc, #52]	; (8002a98 <GetAngle+0x1f0>)
 8002a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a64:	f7fe f884 	bl	8000b70 <__aeabi_fsub>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24

	if (alfa < 0)
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a72:	f7fe fb25 	bl	80010c0 <__aeabi_fcmplt>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <GetAngle+0x1e0>
		alfa += 360;
 8002a7c:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <GetAngle+0x1f8>)
 8002a7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a80:	f7fe f878 	bl	8000b74 <__addsf3>
 8002a84:	4603      	mov	r3, r0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
	return alfa;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdb0      	pop	{r4, r5, r7, pc}
 8002a92:	bf00      	nop
 8002a94:	43340000 	.word	0x43340000
 8002a98:	42b40000 	.word	0x42b40000
 8002a9c:	43870000 	.word	0x43870000
 8002aa0:	43b40000 	.word	0x43b40000

08002aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <NXT_SEND_VAL>:

uint8_t cmd_nxt[3] = {0xFF, 0xFF, 0xFF};
int len = 0;

void NXT_SEND_VAL(char* ID, uint32_t val)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	; 0x40
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=%d", ID, val);
 8002aba:	f107 000c 	add.w	r0, r7, #12
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	490d      	ldr	r1, [pc, #52]	; (8002af8 <NXT_SEND_VAL+0x48>)
 8002ac4:	f004 ff6e 	bl	80079a4 <siprintf>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <NXT_SEND_VAL+0x4c>)
 8002acc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <NXT_SEND_VAL+0x4c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	f107 010c 	add.w	r1, r7, #12
 8002ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002adc:	4808      	ldr	r0, [pc, #32]	; (8002b00 <NXT_SEND_VAL+0x50>)
 8002ade:	f003 fd42 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002ae2:	2364      	movs	r3, #100	; 0x64
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4907      	ldr	r1, [pc, #28]	; (8002b04 <NXT_SEND_VAL+0x54>)
 8002ae8:	4805      	ldr	r0, [pc, #20]	; (8002b00 <NXT_SEND_VAL+0x50>)
 8002aea:	f003 fd3c 	bl	8006566 <HAL_UART_Transmit>
}
 8002aee:	bf00      	nop
 8002af0:	3740      	adds	r7, #64	; 0x40
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	0800c03c 	.word	0x0800c03c
 8002afc:	200003d0 	.word	0x200003d0
 8002b00:	20000484 	.word	0x20000484
 8002b04:	2000001c 	.word	0x2000001c

08002b08 <NXT_SEND_SVAL>:

void NXT_SEND_SVAL(char* ID, int val)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b090      	sub	sp, #64	; 0x40
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=%d", ID, val);
 8002b12:	f107 000c 	add.w	r0, r7, #12
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	490d      	ldr	r1, [pc, #52]	; (8002b50 <NXT_SEND_SVAL+0x48>)
 8002b1c:	f004 ff42 	bl	80079a4 <siprintf>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b0c      	ldr	r3, [pc, #48]	; (8002b54 <NXT_SEND_SVAL+0x4c>)
 8002b24:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <NXT_SEND_SVAL+0x4c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	f107 010c 	add.w	r1, r7, #12
 8002b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b34:	4808      	ldr	r0, [pc, #32]	; (8002b58 <NXT_SEND_SVAL+0x50>)
 8002b36:	f003 fd16 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002b3a:	2364      	movs	r3, #100	; 0x64
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	4907      	ldr	r1, [pc, #28]	; (8002b5c <NXT_SEND_SVAL+0x54>)
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <NXT_SEND_SVAL+0x50>)
 8002b42:	f003 fd10 	bl	8006566 <HAL_UART_Transmit>
}
 8002b46:	bf00      	nop
 8002b48:	3740      	adds	r7, #64	; 0x40
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	0800c03c 	.word	0x0800c03c
 8002b54:	200003d0 	.word	0x200003d0
 8002b58:	20000484 	.word	0x20000484
 8002b5c:	2000001c 	.word	0x2000001c

08002b60 <NXT_SEND_VALFLOAT>:

void NXT_SEND_VALFLOAT(char* ID, float val)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b093      	sub	sp, #76	; 0x4c
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
	char buff[50];
	len = sprintf(buff, "%s=\"%.2f\"", ID, val);
 8002b6a:	6838      	ldr	r0, [r7, #0]
 8002b6c:	f7fd fc5c 	bl	8000428 <__aeabi_f2d>
 8002b70:	4603      	mov	r3, r0
 8002b72:	460c      	mov	r4, r1
 8002b74:	f107 000c 	add.w	r0, r7, #12
 8002b78:	e9cd 3400 	strd	r3, r4, [sp]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	490d      	ldr	r1, [pc, #52]	; (8002bb4 <NXT_SEND_VALFLOAT+0x54>)
 8002b80:	f004 ff10 	bl	80079a4 <siprintf>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <NXT_SEND_VALFLOAT+0x58>)
 8002b88:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <NXT_SEND_VALFLOAT+0x58>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	f107 010c 	add.w	r1, r7, #12
 8002b94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b98:	4808      	ldr	r0, [pc, #32]	; (8002bbc <NXT_SEND_VALFLOAT+0x5c>)
 8002b9a:	f003 fce4 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002b9e:	2364      	movs	r3, #100	; 0x64
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <NXT_SEND_VALFLOAT+0x60>)
 8002ba4:	4805      	ldr	r0, [pc, #20]	; (8002bbc <NXT_SEND_VALFLOAT+0x5c>)
 8002ba6:	f003 fcde 	bl	8006566 <HAL_UART_Transmit>
}
 8002baa:	bf00      	nop
 8002bac:	3744      	adds	r7, #68	; 0x44
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	0800c044 	.word	0x0800c044
 8002bb8:	200003d0 	.word	0x200003d0
 8002bbc:	20000484 	.word	0x20000484
 8002bc0:	2000001c 	.word	0x2000001c

08002bc4 <NXT_SEND_STR>:

void NXT_SEND_STR(char* ID)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b090      	sub	sp, #64	; 0x40
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	char buff[50];
	int len = sprintf(buff, "%s", ID);
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	490c      	ldr	r1, [pc, #48]	; (8002c04 <NXT_SEND_STR+0x40>)
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fee5 	bl	80079a4 <siprintf>
 8002bda:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart3, (uint8_t*) buff, len, 1000);
 8002bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	f107 0108 	add.w	r1, r7, #8
 8002be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be8:	4807      	ldr	r0, [pc, #28]	; (8002c08 <NXT_SEND_STR+0x44>)
 8002bea:	f003 fcbc 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002bee:	2364      	movs	r3, #100	; 0x64
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	4906      	ldr	r1, [pc, #24]	; (8002c0c <NXT_SEND_STR+0x48>)
 8002bf4:	4804      	ldr	r0, [pc, #16]	; (8002c08 <NXT_SEND_STR+0x44>)
 8002bf6:	f003 fcb6 	bl	8006566 <HAL_UART_Transmit>
}
 8002bfa:	bf00      	nop
 8002bfc:	3740      	adds	r7, #64	; 0x40
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	0800c050 	.word	0x0800c050
 8002c08:	20000484 	.word	0x20000484
 8002c0c:	2000001c 	.word	0x2000001c

08002c10 <NXT_SEND_TXTBX>:
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
}

void NXT_SEND_TXTBX(char* ID, char* txt)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0aa      	sub	sp, #168	; 0xa8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
	char buff[160];
	len = sprintf(buff, "%s=\"%s\"", ID, txt);
 8002c1a:	f107 0008 	add.w	r0, r7, #8
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	490d      	ldr	r1, [pc, #52]	; (8002c58 <NXT_SEND_TXTBX+0x48>)
 8002c24:	f004 febe 	bl	80079a4 <siprintf>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <NXT_SEND_TXTBX+0x4c>)
 8002c2c:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t*)buff, len, 1000);
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <NXT_SEND_TXTBX+0x4c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f107 0108 	add.w	r1, r7, #8
 8002c38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3c:	4808      	ldr	r0, [pc, #32]	; (8002c60 <NXT_SEND_TXTBX+0x50>)
 8002c3e:	f003 fc92 	bl	8006566 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, cmd_nxt, 3, 100);
 8002c42:	2364      	movs	r3, #100	; 0x64
 8002c44:	2203      	movs	r2, #3
 8002c46:	4907      	ldr	r1, [pc, #28]	; (8002c64 <NXT_SEND_TXTBX+0x54>)
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <NXT_SEND_TXTBX+0x50>)
 8002c4a:	f003 fc8c 	bl	8006566 <HAL_UART_Transmit>
}
 8002c4e:	bf00      	nop
 8002c50:	37a8      	adds	r7, #168	; 0xa8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	0800c05c 	.word	0x0800c05c
 8002c5c:	200003d0 	.word	0x200003d0
 8002c60:	20000484 	.word	0x20000484
 8002c64:	2000001c 	.word	0x2000001c

08002c68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4a0e      	ldr	r2, [pc, #56]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	61d3      	str	r3, [r2, #28]
 8002c92:	4b0c      	ldr	r3, [pc, #48]	; (8002cc4 <HAL_MspInit+0x5c>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_MspInit+0x60>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_MspInit+0x60>)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010000 	.word	0x40010000

08002ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0310 	add.w	r3, r7, #16
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <HAL_I2C_MspInit+0x70>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d123      	bne.n	8002d34 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cec:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002cf2:	f043 0308 	orr.w	r3, r3, #8
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d04:	23c0      	movs	r3, #192	; 0xc0
 8002d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d08:	2312      	movs	r3, #18
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d10:	f107 0310 	add.w	r3, r7, #16
 8002d14:	4619      	mov	r1, r3
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <HAL_I2C_MspInit+0x78>)
 8002d18:	f000 ff1a 	bl	8003b50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d26:	61d3      	str	r3, [r2, #28]
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_I2C_MspInit+0x74>)
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	3720      	adds	r7, #32
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40005400 	.word	0x40005400
 8002d40:	40021000 	.word	0x40021000
 8002d44:	40010c00 	.word	0x40010c00

08002d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d50:	f107 0310 	add.w	r3, r7, #16
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
 8002d5c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_SPI_MspInit+0x8c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d131      	bne.n	8002dcc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d72:	61d3      	str	r3, [r2, #28]
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d80:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d86:	f043 0308 	orr.w	r3, r3, #8
 8002d8a:	6193      	str	r3, [r2, #24]
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <HAL_SPI_MspInit+0x90>)
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002d98:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	4619      	mov	r1, r3
 8002dac:	480b      	ldr	r0, [pc, #44]	; (8002ddc <HAL_SPI_MspInit+0x94>)
 8002dae:	f000 fecf 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002db2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0310 	add.w	r3, r7, #16
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4805      	ldr	r0, [pc, #20]	; (8002ddc <HAL_SPI_MspInit+0x94>)
 8002dc8:	f000 fec2 	bl	8003b50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002dcc:	bf00      	nop
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40003800 	.word	0x40003800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40010c00 	.word	0x40010c00

08002de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df0:	d113      	bne.n	8002e1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002df2:	4b0c      	ldr	r3, [pc, #48]	; (8002e24 <HAL_TIM_Base_MspInit+0x44>)
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	4a0b      	ldr	r2, [pc, #44]	; (8002e24 <HAL_TIM_Base_MspInit+0x44>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	61d3      	str	r3, [r2, #28]
 8002dfe:	4b09      	ldr	r3, [pc, #36]	; (8002e24 <HAL_TIM_Base_MspInit+0x44>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	201c      	movs	r0, #28
 8002e10:	f000 fdb7 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e14:	201c      	movs	r0, #28
 8002e16:	f000 fdd0 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002e1a:	bf00      	nop
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40021000 	.word	0x40021000

08002e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08c      	sub	sp, #48	; 0x30
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0320 	add.w	r3, r7, #32
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5f      	ldr	r2, [pc, #380]	; (8002fc0 <HAL_UART_MspInit+0x198>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d13a      	bne.n	8002ebe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e48:	4b5e      	ldr	r3, [pc, #376]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	4a5d      	ldr	r2, [pc, #372]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e52:	6193      	str	r3, [r2, #24]
 8002e54:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e66:	f043 0304 	orr.w	r3, r3, #4
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e82:	2303      	movs	r3, #3
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0320 	add.w	r3, r7, #32
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	484e      	ldr	r0, [pc, #312]	; (8002fc8 <HAL_UART_MspInit+0x1a0>)
 8002e8e:	f000 fe5f 	bl	8003b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea0:	f107 0320 	add.w	r3, r7, #32
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4848      	ldr	r0, [pc, #288]	; (8002fc8 <HAL_UART_MspInit+0x1a0>)
 8002ea8:	f000 fe52 	bl	8003b50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2025      	movs	r0, #37	; 0x25
 8002eb2:	f000 fd66 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002eb6:	2025      	movs	r0, #37	; 0x25
 8002eb8:	f000 fd7f 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ebc:	e07c      	b.n	8002fb8 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_UART_MspInit+0x1a4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d138      	bne.n	8002f3a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ec8:	4b3e      	ldr	r3, [pc, #248]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a3d      	ldr	r2, [pc, #244]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed2:	61d3      	str	r3, [r2, #28]
 8002ed4:	4b3b      	ldr	r3, [pc, #236]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b38      	ldr	r3, [pc, #224]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4a37      	ldr	r2, [pc, #220]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6193      	str	r3, [r2, #24]
 8002eec:	4b35      	ldr	r3, [pc, #212]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f04:	f107 0320 	add.w	r3, r7, #32
 8002f08:	4619      	mov	r1, r3
 8002f0a:	482f      	ldr	r0, [pc, #188]	; (8002fc8 <HAL_UART_MspInit+0x1a0>)
 8002f0c:	f000 fe20 	bl	8003b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f10:	2308      	movs	r3, #8
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1c:	f107 0320 	add.w	r3, r7, #32
 8002f20:	4619      	mov	r1, r3
 8002f22:	4829      	ldr	r0, [pc, #164]	; (8002fc8 <HAL_UART_MspInit+0x1a0>)
 8002f24:	f000 fe14 	bl	8003b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2026      	movs	r0, #38	; 0x26
 8002f2e:	f000 fd28 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f32:	2026      	movs	r0, #38	; 0x26
 8002f34:	f000 fd41 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002f38:	e03e      	b.n	8002fb8 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a24      	ldr	r2, [pc, #144]	; (8002fd0 <HAL_UART_MspInit+0x1a8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d139      	bne.n	8002fb8 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f44:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a1e      	ldr	r2, [pc, #120]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	6193      	str	r3, [r2, #24]
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_UART_MspInit+0x19c>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f82:	f107 0320 	add.w	r3, r7, #32
 8002f86:	4619      	mov	r1, r3
 8002f88:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <HAL_UART_MspInit+0x1ac>)
 8002f8a:	f000 fde1 	bl	8003b50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	f107 0320 	add.w	r3, r7, #32
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <HAL_UART_MspInit+0x1ac>)
 8002fa4:	f000 fdd4 	bl	8003b50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2100      	movs	r1, #0
 8002fac:	2027      	movs	r0, #39	; 0x27
 8002fae:	f000 fce8 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fb2:	2027      	movs	r0, #39	; 0x27
 8002fb4:	f000 fd01 	bl	80039ba <HAL_NVIC_EnableIRQ>
}
 8002fb8:	bf00      	nop
 8002fba:	3730      	adds	r7, #48	; 0x30
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40013800 	.word	0x40013800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010800 	.word	0x40010800
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	40004800 	.word	0x40004800
 8002fd4:	40010c00 	.word	0x40010c00

08002fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <HardFault_Handler+0x4>

08002fea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <MemManage_Handler+0x4>

08002ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <BusFault_Handler+0x4>

08002ff6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <UsageFault_Handler+0x4>

08002ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003024:	f000 fb98 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003028:	bf00      	nop
 800302a:	bd80      	pop	{r7, pc}

0800302c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <TIM2_IRQHandler+0x14>)
 8003032:	f002 fef7 	bl	8005e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  mgn = 1;
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <TIM2_IRQHandler+0x18>)
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20000560 	.word	0x20000560
 8003044:	20000264 	.word	0x20000264

08003048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b089      	sub	sp, #36	; 0x24
 800304c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800304e:	48b2      	ldr	r0, [pc, #712]	; (8003318 <USART1_IRQHandler+0x2d0>)
 8003050:	f003 fbee 	bl	8006830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	HAL_UART_Receive_IT(&huart1, (uint8_t*) &buff1, 1);
 8003054:	2201      	movs	r2, #1
 8003056:	49b1      	ldr	r1, [pc, #708]	; (800331c <USART1_IRQHandler+0x2d4>)
 8003058:	48af      	ldr	r0, [pc, #700]	; (8003318 <USART1_IRQHandler+0x2d0>)
 800305a:	f003 fbb8 	bl	80067ce <HAL_UART_Receive_IT>
	RX1_BUF[c1] = buff1;
 800305e:	4bb0      	ldr	r3, [pc, #704]	; (8003320 <USART1_IRQHandler+0x2d8>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4bad      	ldr	r3, [pc, #692]	; (800331c <USART1_IRQHandler+0x2d4>)
 8003066:	7819      	ldrb	r1, [r3, #0]
 8003068:	4bae      	ldr	r3, [pc, #696]	; (8003324 <USART1_IRQHandler+0x2dc>)
 800306a:	5499      	strb	r1, [r3, r2]
	if (RX1_BUF[c1] == '\n') {
 800306c:	4bac      	ldr	r3, [pc, #688]	; (8003320 <USART1_IRQHandler+0x2d8>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	4bac      	ldr	r3, [pc, #688]	; (8003324 <USART1_IRQHandler+0x2dc>)
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	2b0a      	cmp	r3, #10
 8003078:	f040 8181 	bne.w	800337e <USART1_IRQHandler+0x336>
		for (uint8_t i = 0; i < c1; i++) {
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]
 8003080:	e174      	b.n	800336c <USART1_IRQHandler+0x324>
			if (RX1_BUF[i] == '$' && RX1_BUF[i + 1] == 'G'
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	4aa7      	ldr	r2, [pc, #668]	; (8003324 <USART1_IRQHandler+0x2dc>)
 8003086:	5cd3      	ldrb	r3, [r2, r3]
 8003088:	2b24      	cmp	r3, #36	; 0x24
 800308a:	f040 816c 	bne.w	8003366 <USART1_IRQHandler+0x31e>
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	3301      	adds	r3, #1
 8003092:	4aa4      	ldr	r2, [pc, #656]	; (8003324 <USART1_IRQHandler+0x2dc>)
 8003094:	5cd3      	ldrb	r3, [r2, r3]
 8003096:	2b47      	cmp	r3, #71	; 0x47
 8003098:	f040 8165 	bne.w	8003366 <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 2] == 'P' && RX1_BUF[i + 3] == 'G'
 800309c:	7dfb      	ldrb	r3, [r7, #23]
 800309e:	3302      	adds	r3, #2
 80030a0:	4aa0      	ldr	r2, [pc, #640]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	2b50      	cmp	r3, #80	; 0x50
 80030a6:	f040 815e 	bne.w	8003366 <USART1_IRQHandler+0x31e>
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	3303      	adds	r3, #3
 80030ae:	4a9d      	ldr	r2, [pc, #628]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80030b0:	5cd3      	ldrb	r3, [r2, r3]
 80030b2:	2b47      	cmp	r3, #71	; 0x47
 80030b4:	f040 8157 	bne.w	8003366 <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 4] == 'G' && RX1_BUF[i + 5] == 'A'
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4a99      	ldr	r2, [pc, #612]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	2b47      	cmp	r3, #71	; 0x47
 80030c2:	f040 8150 	bne.w	8003366 <USART1_IRQHandler+0x31e>
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
 80030c8:	3305      	adds	r3, #5
 80030ca:	4a96      	ldr	r2, [pc, #600]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80030cc:	5cd3      	ldrb	r3, [r2, r3]
 80030ce:	2b41      	cmp	r3, #65	; 0x41
 80030d0:	f040 8149 	bne.w	8003366 <USART1_IRQHandler+0x31e>
					&& RX1_BUF[i + 6] == ',') {
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	3306      	adds	r3, #6
 80030d8:	4a92      	ldr	r2, [pc, #584]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	2b2c      	cmp	r3, #44	; 0x2c
 80030de:	f040 8142 	bne.w	8003366 <USART1_IRQHandler+0x31e>
				uint8_t v = 0, pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0, pos5 = 0,
 80030e2:	2300      	movs	r3, #0
 80030e4:	75bb      	strb	r3, [r7, #22]
 80030e6:	2300      	movs	r3, #0
 80030e8:	757b      	strb	r3, [r7, #21]
 80030ea:	2300      	movs	r3, #0
 80030ec:	753b      	strb	r3, [r7, #20]
 80030ee:	2300      	movs	r3, #0
 80030f0:	727b      	strb	r3, [r7, #9]
 80030f2:	2300      	movs	r3, #0
 80030f4:	74fb      	strb	r3, [r7, #19]
 80030f6:	2300      	movs	r3, #0
 80030f8:	723b      	strb	r3, [r7, #8]
						ok1 = 0, ok2 = 0, ok3 = 0, ok4 = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	74bb      	strb	r3, [r7, #18]
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]
 8003102:	2300      	movs	r3, #0
 8003104:	743b      	strb	r3, [r7, #16]
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 800310a:	2300      	movs	r3, #0
 800310c:	73bb      	strb	r3, [r7, #14]
 800310e:	e124      	b.n	800335a <USART1_IRQHandler+0x312>
					if (RX1_BUF[n] == ',' && n > i + 5)
 8003110:	7bbb      	ldrb	r3, [r7, #14]
 8003112:	4a84      	ldr	r2, [pc, #528]	; (8003324 <USART1_IRQHandler+0x2dc>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	2b2c      	cmp	r3, #44	; 0x2c
 8003118:	d107      	bne.n	800312a <USART1_IRQHandler+0xe2>
 800311a:	7bba      	ldrb	r2, [r7, #14]
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	3305      	adds	r3, #5
 8003120:	429a      	cmp	r2, r3
 8003122:	dd02      	ble.n	800312a <USART1_IRQHandler+0xe2>
						v++;
 8003124:	7dbb      	ldrb	r3, [r7, #22]
 8003126:	3301      	adds	r3, #1
 8003128:	75bb      	strb	r3, [r7, #22]
					if (v == 1 && ok1 == 0) {
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d106      	bne.n	800313e <USART1_IRQHandler+0xf6>
 8003130:	7cbb      	ldrb	r3, [r7, #18]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <USART1_IRQHandler+0xf6>
						pos1 = n;
 8003136:	7bbb      	ldrb	r3, [r7, #14]
 8003138:	757b      	strb	r3, [r7, #21]
						ok1 = 1;
 800313a:	2301      	movs	r3, #1
 800313c:	74bb      	strb	r3, [r7, #18]
					}
					if (v == 2 && ok2 == 0) {
 800313e:	7dbb      	ldrb	r3, [r7, #22]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d11b      	bne.n	800317c <USART1_IRQHandler+0x134>
 8003144:	7c7b      	ldrb	r3, [r7, #17]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d118      	bne.n	800317c <USART1_IRQHandler+0x134>
						pos2 = n;
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	753b      	strb	r3, [r7, #20]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 800314e:	2300      	movs	r3, #0
 8003150:	737b      	strb	r3, [r7, #13]
 8003152:	e00b      	b.n	800316c <USART1_IRQHandler+0x124>
							TIME[count] = RX1_BUF[pos1 + count + 1];
 8003154:	7d7a      	ldrb	r2, [r7, #21]
 8003156:	7b7b      	ldrb	r3, [r7, #13]
 8003158:	4413      	add	r3, r2
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	7b7b      	ldrb	r3, [r7, #13]
 800315e:	4971      	ldr	r1, [pc, #452]	; (8003324 <USART1_IRQHandler+0x2dc>)
 8003160:	5c89      	ldrb	r1, [r1, r2]
 8003162:	4a71      	ldr	r2, [pc, #452]	; (8003328 <USART1_IRQHandler+0x2e0>)
 8003164:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos2 - pos1; count++)
 8003166:	7b7b      	ldrb	r3, [r7, #13]
 8003168:	3301      	adds	r3, #1
 800316a:	737b      	strb	r3, [r7, #13]
 800316c:	7b7a      	ldrb	r2, [r7, #13]
 800316e:	7d39      	ldrb	r1, [r7, #20]
 8003170:	7d7b      	ldrb	r3, [r7, #21]
 8003172:	1acb      	subs	r3, r1, r3
 8003174:	429a      	cmp	r2, r3
 8003176:	dbed      	blt.n	8003154 <USART1_IRQHandler+0x10c>
						ok2 = 1;
 8003178:	2301      	movs	r3, #1
 800317a:	747b      	strb	r3, [r7, #17]
					}
					if (v == 3 && ok3 == 0) {
 800317c:	7dbb      	ldrb	r3, [r7, #22]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d11b      	bne.n	80031ba <USART1_IRQHandler+0x172>
 8003182:	7c3b      	ldrb	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d118      	bne.n	80031ba <USART1_IRQHandler+0x172>
						pos3 = n;
 8003188:	7bbb      	ldrb	r3, [r7, #14]
 800318a:	727b      	strb	r3, [r7, #9]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 800318c:	2300      	movs	r3, #0
 800318e:	733b      	strb	r3, [r7, #12]
 8003190:	e00b      	b.n	80031aa <USART1_IRQHandler+0x162>
							LAT[count] = RX1_BUF[pos2 + count + 1];
 8003192:	7d3a      	ldrb	r2, [r7, #20]
 8003194:	7b3b      	ldrb	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	7b3b      	ldrb	r3, [r7, #12]
 800319c:	4961      	ldr	r1, [pc, #388]	; (8003324 <USART1_IRQHandler+0x2dc>)
 800319e:	5c89      	ldrb	r1, [r1, r2]
 80031a0:	4a62      	ldr	r2, [pc, #392]	; (800332c <USART1_IRQHandler+0x2e4>)
 80031a2:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count = 0; count < pos3 - pos2; count++)
 80031a4:	7b3b      	ldrb	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	733b      	strb	r3, [r7, #12]
 80031aa:	7b3a      	ldrb	r2, [r7, #12]
 80031ac:	7a79      	ldrb	r1, [r7, #9]
 80031ae:	7d3b      	ldrb	r3, [r7, #20]
 80031b0:	1acb      	subs	r3, r1, r3
 80031b2:	429a      	cmp	r2, r3
 80031b4:	dbed      	blt.n	8003192 <USART1_IRQHandler+0x14a>
						ok3 = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	743b      	strb	r3, [r7, #16]
					}
					if (v == 4 && ok4 == 0) {
 80031ba:	7dbb      	ldrb	r3, [r7, #22]
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d106      	bne.n	80031ce <USART1_IRQHandler+0x186>
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <USART1_IRQHandler+0x186>
						pos4 = n;
 80031c6:	7bbb      	ldrb	r3, [r7, #14]
 80031c8:	74fb      	strb	r3, [r7, #19]
						ok4 = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
					}
					if (v == 5) {
 80031ce:	7dbb      	ldrb	r3, [r7, #22]
 80031d0:	2b05      	cmp	r3, #5
 80031d2:	f040 80bf 	bne.w	8003354 <USART1_IRQHandler+0x30c>
						pos5 = n;
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	723b      	strb	r3, [r7, #8]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 80031da:	2300      	movs	r3, #0
 80031dc:	72fb      	strb	r3, [r7, #11]
 80031de:	e00b      	b.n	80031f8 <USART1_IRQHandler+0x1b0>
							LONG[count2] = RX1_BUF[pos4 + count2 + 1];
 80031e0:	7cfa      	ldrb	r2, [r7, #19]
 80031e2:	7afb      	ldrb	r3, [r7, #11]
 80031e4:	4413      	add	r3, r2
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	7afb      	ldrb	r3, [r7, #11]
 80031ea:	494e      	ldr	r1, [pc, #312]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80031ec:	5c89      	ldrb	r1, [r1, r2]
 80031ee:	4a50      	ldr	r2, [pc, #320]	; (8003330 <USART1_IRQHandler+0x2e8>)
 80031f0:	54d1      	strb	r1, [r2, r3]
						for (uint8_t count2 = 0; count2 < pos5 - pos4; count2++)
 80031f2:	7afb      	ldrb	r3, [r7, #11]
 80031f4:	3301      	adds	r3, #1
 80031f6:	72fb      	strb	r3, [r7, #11]
 80031f8:	7afa      	ldrb	r2, [r7, #11]
 80031fa:	7a39      	ldrb	r1, [r7, #8]
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	1acb      	subs	r3, r1, r3
 8003200:	429a      	cmp	r2, r3
 8003202:	dbed      	blt.n	80031e0 <USART1_IRQHandler+0x198>

						strcpy(TIME, TIME);
						strcpy(LAT, LAT);
						strcpy(LONG, LONG);
						time = atof(TIME);
 8003204:	4848      	ldr	r0, [pc, #288]	; (8003328 <USART1_IRQHandler+0x2e0>)
 8003206:	f003 ff47 	bl	8007098 <atof>
 800320a:	4603      	mov	r3, r0
 800320c:	460c      	mov	r4, r1
 800320e:	4618      	mov	r0, r3
 8003210:	4621      	mov	r1, r4
 8003212:	f7fd fc11 	bl	8000a38 <__aeabi_d2iz>
 8003216:	4602      	mov	r2, r0
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <USART1_IRQHandler+0x2ec>)
 800321a:	601a      	str	r2, [r3, #0]
						ground_lat = calcoor(atof(LAT));
 800321c:	4843      	ldr	r0, [pc, #268]	; (800332c <USART1_IRQHandler+0x2e4>)
 800321e:	f003 ff3b 	bl	8007098 <atof>
 8003222:	4603      	mov	r3, r0
 8003224:	460c      	mov	r4, r1
 8003226:	4618      	mov	r0, r3
 8003228:	4621      	mov	r1, r4
 800322a:	f7fd fc4d 	bl	8000ac8 <__aeabi_d2f>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	f000 f9a3 	bl	800357c <calcoor>
 8003236:	4602      	mov	r2, r0
 8003238:	4b3f      	ldr	r3, [pc, #252]	; (8003338 <USART1_IRQHandler+0x2f0>)
 800323a:	601a      	str	r2, [r3, #0]
						ground_lng = calcoor(atof(LONG));
 800323c:	483c      	ldr	r0, [pc, #240]	; (8003330 <USART1_IRQHandler+0x2e8>)
 800323e:	f003 ff2b 	bl	8007098 <atof>
 8003242:	4603      	mov	r3, r0
 8003244:	460c      	mov	r4, r1
 8003246:	4618      	mov	r0, r3
 8003248:	4621      	mov	r1, r4
 800324a:	f7fd fc3d 	bl	8000ac8 <__aeabi_d2f>
 800324e:	4603      	mov	r3, r0
 8003250:	4618      	mov	r0, r3
 8003252:	f000 f993 	bl	800357c <calcoor>
 8003256:	4602      	mov	r2, r0
 8003258:	4b38      	ldr	r3, [pc, #224]	; (800333c <USART1_IRQHandler+0x2f4>)
 800325a:	601a      	str	r2, [r3, #0]
						sprintf(COOR, ":%2.7f:%2.7f\n", ground_lat, ground_lng);
 800325c:	4b36      	ldr	r3, [pc, #216]	; (8003338 <USART1_IRQHandler+0x2f0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f8e1 	bl	8000428 <__aeabi_f2d>
 8003266:	4605      	mov	r5, r0
 8003268:	460e      	mov	r6, r1
 800326a:	4b34      	ldr	r3, [pc, #208]	; (800333c <USART1_IRQHandler+0x2f4>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd f8da 	bl	8000428 <__aeabi_f2d>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	e9cd 3400 	strd	r3, r4, [sp]
 800327c:	462a      	mov	r2, r5
 800327e:	4633      	mov	r3, r6
 8003280:	492f      	ldr	r1, [pc, #188]	; (8003340 <USART1_IRQHandler+0x2f8>)
 8003282:	4830      	ldr	r0, [pc, #192]	; (8003344 <USART1_IRQHandler+0x2fc>)
 8003284:	f004 fb8e 	bl	80079a4 <siprintf>
						/*HAL_UART_Transmit(&huart3, (uint8_t*) COOR,
						 sizeof(COOR), 1000);*/
						uint32_t lat0next = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	607b      	str	r3, [r7, #4]
						uint32_t lng0next = 0;
 800328c:	2300      	movs	r3, #0
 800328e:	603b      	str	r3, [r7, #0]
						lat0next = (uint32_t) (ground_lat * 10000000.0);
 8003290:	4b29      	ldr	r3, [pc, #164]	; (8003338 <USART1_IRQHandler+0x2f0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7fd f8c7 	bl	8000428 <__aeabi_f2d>
 800329a:	a31d      	add	r3, pc, #116	; (adr r3, 8003310 <USART1_IRQHandler+0x2c8>)
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f7fd f91a 	bl	80004d8 <__aeabi_dmul>
 80032a4:	4603      	mov	r3, r0
 80032a6:	460c      	mov	r4, r1
 80032a8:	4618      	mov	r0, r3
 80032aa:	4621      	mov	r1, r4
 80032ac:	f7fd fbec 	bl	8000a88 <__aeabi_d2uiz>
 80032b0:	4603      	mov	r3, r0
 80032b2:	607b      	str	r3, [r7, #4]
						lng0next = (uint32_t) (ground_lng * 10000000.0);
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <USART1_IRQHandler+0x2f4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f8b5 	bl	8000428 <__aeabi_f2d>
 80032be:	a314      	add	r3, pc, #80	; (adr r3, 8003310 <USART1_IRQHandler+0x2c8>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f908 	bl	80004d8 <__aeabi_dmul>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	4618      	mov	r0, r3
 80032ce:	4621      	mov	r1, r4
 80032d0:	f7fd fbda 	bl	8000a88 <__aeabi_d2uiz>
 80032d4:	4603      	mov	r3, r0
 80032d6:	603b      	str	r3, [r7, #0]
						NXT_SEND_VAL("x8.val", lat0next);
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	481b      	ldr	r0, [pc, #108]	; (8003348 <USART1_IRQHandler+0x300>)
 80032dc:	f7ff fbe8 	bl	8002ab0 <NXT_SEND_VAL>
						NXT_SEND_VAL("x9.val", lng0next);
 80032e0:	6839      	ldr	r1, [r7, #0]
 80032e2:	481a      	ldr	r0, [pc, #104]	; (800334c <USART1_IRQHandler+0x304>)
 80032e4:	f7ff fbe4 	bl	8002ab0 <NXT_SEND_VAL>
						cal_dis = 1;
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <USART1_IRQHandler+0x308>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	72bb      	strb	r3, [r7, #10]
 80032f2:	e006      	b.n	8003302 <USART1_IRQHandler+0x2ba>
							RX1_BUF[c] = '\0';
 80032f4:	7abb      	ldrb	r3, [r7, #10]
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <USART1_IRQHandler+0x2dc>)
 80032f8:	2100      	movs	r1, #0
 80032fa:	54d1      	strb	r1, [r2, r3]
						for (uint8_t c = 0; c < sizeof(RX1_BUF); c++)
 80032fc:	7abb      	ldrb	r3, [r7, #10]
 80032fe:	3301      	adds	r3, #1
 8003300:	72bb      	strb	r3, [r7, #10]
 8003302:	7abb      	ldrb	r3, [r7, #10]
 8003304:	2b63      	cmp	r3, #99	; 0x63
 8003306:	d9f5      	bls.n	80032f4 <USART1_IRQHandler+0x2ac>
						break;
 8003308:	e02c      	b.n	8003364 <USART1_IRQHandler+0x31c>
 800330a:	bf00      	nop
 800330c:	f3af 8000 	nop.w
 8003310:	00000000 	.word	0x00000000
 8003314:	416312d0 	.word	0x416312d0
 8003318:	2000051c 	.word	0x2000051c
 800331c:	200003d4 	.word	0x200003d4
 8003320:	200003e4 	.word	0x200003e4
 8003324:	20000620 	.word	0x20000620
 8003328:	200005ec 	.word	0x200005ec
 800332c:	20000684 	.word	0x20000684
 8003330:	200005f8 	.word	0x200005f8
 8003334:	200003e0 	.word	0x200003e0
 8003338:	200003d8 	.word	0x200003d8
 800333c:	200003dc 	.word	0x200003dc
 8003340:	0800c064 	.word	0x0800c064
 8003344:	20000604 	.word	0x20000604
 8003348:	0800c074 	.word	0x0800c074
 800334c:	0800c07c 	.word	0x0800c07c
 8003350:	200002ae 	.word	0x200002ae
				for (uint8_t n = 0; n < sizeof(RX1_BUF); n++) {
 8003354:	7bbb      	ldrb	r3, [r7, #14]
 8003356:	3301      	adds	r3, #1
 8003358:	73bb      	strb	r3, [r7, #14]
 800335a:	7bbb      	ldrb	r3, [r7, #14]
 800335c:	2b63      	cmp	r3, #99	; 0x63
 800335e:	f67f aed7 	bls.w	8003110 <USART1_IRQHandler+0xc8>
					}
				}
				break;
 8003362:	e009      	b.n	8003378 <USART1_IRQHandler+0x330>
 8003364:	e008      	b.n	8003378 <USART1_IRQHandler+0x330>
		for (uint8_t i = 0; i < c1; i++) {
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	3301      	adds	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <USART1_IRQHandler+0x34c>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	7dfa      	ldrb	r2, [r7, #23]
 8003372:	429a      	cmp	r2, r3
 8003374:	f4ff ae85 	bcc.w	8003082 <USART1_IRQHandler+0x3a>
			}
		}
		c1 = 0;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <USART1_IRQHandler+0x34c>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
	}
	c1++;
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <USART1_IRQHandler+0x34c>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <USART1_IRQHandler+0x34c>)
 8003388:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003392:	bf00      	nop
 8003394:	200003e4 	.word	0x200003e4

08003398 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800339e:	482a      	ldr	r0, [pc, #168]	; (8003448 <USART2_IRQHandler+0xb0>)
 80033a0:	f003 fa46 	bl	8006830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &buff2, 1);
 80033a4:	2201      	movs	r2, #1
 80033a6:	4929      	ldr	r1, [pc, #164]	; (800344c <USART2_IRQHandler+0xb4>)
 80033a8:	4827      	ldr	r0, [pc, #156]	; (8003448 <USART2_IRQHandler+0xb0>)
 80033aa:	f003 fa10 	bl	80067ce <HAL_UART_Receive_IT>
	if (buff2 != '\n' && buff2 != '\0' ) {
 80033ae:	4b27      	ldr	r3, [pc, #156]	; (800344c <USART2_IRQHandler+0xb4>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b0a      	cmp	r3, #10
 80033b4:	d016      	beq.n	80033e4 <USART2_IRQHandler+0x4c>
 80033b6:	4b25      	ldr	r3, [pc, #148]	; (800344c <USART2_IRQHandler+0xb4>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d012      	beq.n	80033e4 <USART2_IRQHandler+0x4c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 80033be:	2201      	movs	r2, #1
 80033c0:	2110      	movs	r1, #16
 80033c2:	4823      	ldr	r0, [pc, #140]	; (8003450 <USART2_IRQHandler+0xb8>)
 80033c4:	f000 fd1e 	bl	8003e04 <HAL_GPIO_WritePin>
		RX2_BUF[n] = buff2;
 80033c8:	4b22      	ldr	r3, [pc, #136]	; (8003454 <USART2_IRQHandler+0xbc>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b1f      	ldr	r3, [pc, #124]	; (800344c <USART2_IRQHandler+0xb4>)
 80033d0:	7819      	ldrb	r1, [r3, #0]
 80033d2:	4b21      	ldr	r3, [pc, #132]	; (8003458 <USART2_IRQHandler+0xc0>)
 80033d4:	5499      	strb	r1, [r3, r2]
		n++;
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <USART2_IRQHandler+0xbc>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <USART2_IRQHandler+0xbc>)
 80033e0:	701a      	strb	r2, [r3, #0]
		n = 0;
		//HAL_UART_Transmit(&huart3, (uint8_t*) RX2_BUF, sizeof(RX2_BUF), 1000);  // For hard fault interrupt, you have to assign priority UART ports
		RX2 = 1;
  	}
  /* USER CODE END USART2_IRQn 1 */
}
 80033e2:	e02d      	b.n	8003440 <USART2_IRQHandler+0xa8>
	} else if(buff2 == '\n') {
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <USART2_IRQHandler+0xb4>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b0a      	cmp	r3, #10
 80033ea:	d129      	bne.n	8003440 <USART2_IRQHandler+0xa8>
		uint8_t A = 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80033f0:	2200      	movs	r2, #0
 80033f2:	2110      	movs	r1, #16
 80033f4:	4816      	ldr	r0, [pc, #88]	; (8003450 <USART2_IRQHandler+0xb8>)
 80033f6:	f000 fd05 	bl	8003e04 <HAL_GPIO_WritePin>
		for (n; n < sizeof(RX2_BUF); n++) {
 80033fa:	e015      	b.n	8003428 <USART2_IRQHandler+0x90>
			RX2_BUF[n] = COOR[A];
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <USART2_IRQHandler+0xbc>)
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	4611      	mov	r1, r2
 8003404:	4a15      	ldr	r2, [pc, #84]	; (800345c <USART2_IRQHandler+0xc4>)
 8003406:	5cd2      	ldrb	r2, [r2, r3]
 8003408:	4b13      	ldr	r3, [pc, #76]	; (8003458 <USART2_IRQHandler+0xc0>)
 800340a:	545a      	strb	r2, [r3, r1]
			if (COOR[A] == '\0') {
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <USART2_IRQHandler+0xc4>)
 8003410:	5cd3      	ldrb	r3, [r2, r3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00d      	beq.n	8003432 <USART2_IRQHandler+0x9a>
			A++;
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	3301      	adds	r3, #1
 800341a:	71fb      	strb	r3, [r7, #7]
		for (n; n < sizeof(RX2_BUF); n++) {
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <USART2_IRQHandler+0xbc>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	3301      	adds	r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <USART2_IRQHandler+0xbc>)
 8003426:	701a      	strb	r2, [r3, #0]
 8003428:	4b0a      	ldr	r3, [pc, #40]	; (8003454 <USART2_IRQHandler+0xbc>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b77      	cmp	r3, #119	; 0x77
 800342e:	d9e5      	bls.n	80033fc <USART2_IRQHandler+0x64>
 8003430:	e000      	b.n	8003434 <USART2_IRQHandler+0x9c>
				break;
 8003432:	bf00      	nop
		n = 0;
 8003434:	4b07      	ldr	r3, [pc, #28]	; (8003454 <USART2_IRQHandler+0xbc>)
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
		RX2 = 1;
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <USART2_IRQHandler+0xc8>)
 800343c:	2201      	movs	r2, #1
 800343e:	701a      	strb	r2, [r3, #0]
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	200005a8 	.word	0x200005a8
 800344c:	200003d5 	.word	0x200003d5
 8003450:	40010c00 	.word	0x40010c00
 8003454:	200003e5 	.word	0x200003e5
 8003458:	200002dc 	.word	0x200002dc
 800345c:	20000604 	.word	0x20000604
 8003460:	200003cc 	.word	0x200003cc

08003464 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800346a:	483b      	ldr	r0, [pc, #236]	; (8003558 <USART3_IRQHandler+0xf4>)
 800346c:	f003 f9e0 	bl	8006830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*) &buff, 1);
 8003470:	2201      	movs	r2, #1
 8003472:	493a      	ldr	r1, [pc, #232]	; (800355c <USART3_IRQHandler+0xf8>)
 8003474:	4838      	ldr	r0, [pc, #224]	; (8003558 <USART3_IRQHandler+0xf4>)
 8003476:	f003 f9aa 	bl	80067ce <HAL_UART_Receive_IT>
  	if (buff == '$')
 800347a:	4b38      	ldr	r3, [pc, #224]	; (800355c <USART3_IRQHandler+0xf8>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b24      	cmp	r3, #36	; 0x24
 8003480:	d102      	bne.n	8003488 <USART3_IRQHandler+0x24>
  		run = 1;
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <USART3_IRQHandler+0xfc>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
  	if (run == 1) {
 8003488:	4b35      	ldr	r3, [pc, #212]	; (8003560 <USART3_IRQHandler+0xfc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d15e      	bne.n	800354e <USART3_IRQHandler+0xea>
  		RX3_buff[count1] = buff;
 8003490:	4b34      	ldr	r3, [pc, #208]	; (8003564 <USART3_IRQHandler+0x100>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	4b31      	ldr	r3, [pc, #196]	; (800355c <USART3_IRQHandler+0xf8>)
 8003498:	7819      	ldrb	r1, [r3, #0]
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <USART3_IRQHandler+0x104>)
 800349c:	5499      	strb	r1, [r3, r2]
  		count1++;
 800349e:	4b31      	ldr	r3, [pc, #196]	; (8003564 <USART3_IRQHandler+0x100>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <USART3_IRQHandler+0x100>)
 80034a8:	701a      	strb	r2, [r3, #0]
  		if (buff == '&') {
 80034aa:	4b2c      	ldr	r3, [pc, #176]	; (800355c <USART3_IRQHandler+0xf8>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b26      	cmp	r3, #38	; 0x26
 80034b0:	d146      	bne.n	8003540 <USART3_IRQHandler+0xdc>
  			count1 = 0;
 80034b2:	4b2c      	ldr	r3, [pc, #176]	; (8003564 <USART3_IRQHandler+0x100>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	701a      	strb	r2, [r3, #0]
  			if (RX3_buff[1] == '0' && RX3_buff[2] == 0x02)
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <USART3_IRQHandler+0x104>)
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d107      	bne.n	80034d0 <USART3_IRQHandler+0x6c>
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <USART3_IRQHandler+0x104>)
 80034c2:	789b      	ldrb	r3, [r3, #2]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d103      	bne.n	80034d0 <USART3_IRQHandler+0x6c>
  				recal = 1;
 80034c8:	4b28      	ldr	r3, [pc, #160]	; (800356c <USART3_IRQHandler+0x108>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e02a      	b.n	8003526 <USART3_IRQHandler+0xc2>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x05)
 80034d0:	4b25      	ldr	r3, [pc, #148]	; (8003568 <USART3_IRQHandler+0x104>)
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d107      	bne.n	80034e8 <USART3_IRQHandler+0x84>
 80034d8:	4b23      	ldr	r3, [pc, #140]	; (8003568 <USART3_IRQHandler+0x104>)
 80034da:	789b      	ldrb	r3, [r3, #2]
 80034dc:	2b05      	cmp	r3, #5
 80034de:	d103      	bne.n	80034e8 <USART3_IRQHandler+0x84>
  				newrecord = 1;
 80034e0:	4b23      	ldr	r3, [pc, #140]	; (8003570 <USART3_IRQHandler+0x10c>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
 80034e6:	e01e      	b.n	8003526 <USART3_IRQHandler+0xc2>
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x03){
 80034e8:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <USART3_IRQHandler+0x104>)
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	2b30      	cmp	r3, #48	; 0x30
 80034ee:	d10f      	bne.n	8003510 <USART3_IRQHandler+0xac>
 80034f0:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <USART3_IRQHandler+0x104>)
 80034f2:	789b      	ldrb	r3, [r3, #2]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d10b      	bne.n	8003510 <USART3_IRQHandler+0xac>
  				if(pause == 0)
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <USART3_IRQHandler+0x110>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <USART3_IRQHandler+0xa4>
  					pause = 1;
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <USART3_IRQHandler+0x110>)
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 8003506:	e00e      	b.n	8003526 <USART3_IRQHandler+0xc2>
  				else
  					pause = 0;
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <USART3_IRQHandler+0x110>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
  				if(pause == 0)
 800350e:	e00a      	b.n	8003526 <USART3_IRQHandler+0xc2>
  			}
  			else if (RX3_buff[1] == '0' && RX3_buff[2] == 0x04)
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <USART3_IRQHandler+0x104>)
 8003512:	785b      	ldrb	r3, [r3, #1]
 8003514:	2b30      	cmp	r3, #48	; 0x30
 8003516:	d106      	bne.n	8003526 <USART3_IRQHandler+0xc2>
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <USART3_IRQHandler+0x104>)
 800351a:	789b      	ldrb	r3, [r3, #2]
 800351c:	2b04      	cmp	r3, #4
 800351e:	d102      	bne.n	8003526 <USART3_IRQHandler+0xc2>
  				stop = 1;
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <USART3_IRQHandler+0x114>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8003526:	2300      	movs	r3, #0
 8003528:	71fb      	strb	r3, [r7, #7]
 800352a:	e006      	b.n	800353a <USART3_IRQHandler+0xd6>
  				RX3_buff[i] = '\0';
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <USART3_IRQHandler+0x104>)
 8003530:	2100      	movs	r1, #0
 8003532:	54d1      	strb	r1, [r2, r3]
  			for (uint8_t i = 0; i < sizeof(RX3_buff); i++)
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	3301      	adds	r3, #1
 8003538:	71fb      	strb	r3, [r7, #7]
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	2b03      	cmp	r3, #3
 800353e:	d9f5      	bls.n	800352c <USART3_IRQHandler+0xc8>
  		}
  		if (buff == '&')
 8003540:	4b06      	ldr	r3, [pc, #24]	; (800355c <USART3_IRQHandler+0xf8>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b26      	cmp	r3, #38	; 0x26
 8003546:	d102      	bne.n	800354e <USART3_IRQHandler+0xea>
  			run = 0;
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <USART3_IRQHandler+0xfc>)
 800354a:	2200      	movs	r2, #0
 800354c:	701a      	strb	r2, [r3, #0]
  	}
  /* USER CODE END USART3_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	20000484 	.word	0x20000484
 800355c:	200003ec 	.word	0x200003ec
 8003560:	200003ee 	.word	0x200003ee
 8003564:	200003ed 	.word	0x200003ed
 8003568:	200003e8 	.word	0x200003e8
 800356c:	20000265 	.word	0x20000265
 8003570:	20000267 	.word	0x20000267
 8003574:	20000268 	.word	0x20000268
 8003578:	20000266 	.word	0x20000266

0800357c <calcoor>:

/* USER CODE BEGIN 1 */
float calcoor(float x)
{
 800357c:	b5b0      	push	{r4, r5, r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	float a = (int)x / 100;
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd fdc3 	bl	8001110 <__aeabi_f2iz>
 800358a:	4603      	mov	r3, r0
 800358c:	4a1b      	ldr	r2, [pc, #108]	; (80035fc <calcoor+0x80>)
 800358e:	fb82 1203 	smull	r1, r2, r2, r3
 8003592:	1152      	asrs	r2, r2, #5
 8003594:	17db      	asrs	r3, r3, #31
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fb9f 	bl	8000cdc <__aeabi_i2f>
 800359e:	4603      	mov	r3, r0
 80035a0:	60fb      	str	r3, [r7, #12]
	float b = (x - (a * 100.0)) / 60.0;
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fc ff40 	bl	8000428 <__aeabi_f2d>
 80035a8:	4604      	mov	r4, r0
 80035aa:	460d      	mov	r5, r1
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7fc ff3b 	bl	8000428 <__aeabi_f2d>
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <calcoor+0x84>)
 80035b8:	f7fc ff8e 	bl	80004d8 <__aeabi_dmul>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	4620      	mov	r0, r4
 80035c2:	4629      	mov	r1, r5
 80035c4:	f7fc fdd0 	bl	8000168 <__aeabi_dsub>
 80035c8:	4603      	mov	r3, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	4618      	mov	r0, r3
 80035ce:	4621      	mov	r1, r4
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <calcoor+0x88>)
 80035d6:	f7fd f8a9 	bl	800072c <__aeabi_ddiv>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	4618      	mov	r0, r3
 80035e0:	4621      	mov	r1, r4
 80035e2:	f7fd fa71 	bl	8000ac8 <__aeabi_d2f>
 80035e6:	4603      	mov	r3, r0
 80035e8:	60bb      	str	r3, [r7, #8]
	return a+b;
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7fd fac1 	bl	8000b74 <__addsf3>
 80035f2:	4603      	mov	r3, r0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}
 80035fc:	51eb851f 	.word	0x51eb851f
 8003600:	40590000 	.word	0x40590000
 8003604:	404e0000 	.word	0x404e0000

08003608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003610:	4a14      	ldr	r2, [pc, #80]	; (8003664 <_sbrk+0x5c>)
 8003612:	4b15      	ldr	r3, [pc, #84]	; (8003668 <_sbrk+0x60>)
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <_sbrk+0x64>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d102      	bne.n	800362a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <_sbrk+0x64>)
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <_sbrk+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	429a      	cmp	r2, r3
 8003636:	d207      	bcs.n	8003648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003638:	f003 fd32 	bl	80070a0 <__errno>
 800363c:	4602      	mov	r2, r0
 800363e:	230c      	movs	r3, #12
 8003640:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003642:	f04f 33ff 	mov.w	r3, #4294967295
 8003646:	e009      	b.n	800365c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <_sbrk+0x64>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <_sbrk+0x64>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	4a05      	ldr	r2, [pc, #20]	; (800366c <_sbrk+0x64>)
 8003658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	20005000 	.word	0x20005000
 8003668:	00000400 	.word	0x00000400
 800366c:	200003f0 	.word	0x200003f0
 8003670:	20000698 	.word	0x20000698

08003674 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003680:	480c      	ldr	r0, [pc, #48]	; (80036b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003682:	490d      	ldr	r1, [pc, #52]	; (80036b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003688:	e002      	b.n	8003690 <LoopCopyDataInit>

0800368a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800368a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800368c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800368e:	3304      	adds	r3, #4

08003690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003694:	d3f9      	bcc.n	800368a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800369c:	e001      	b.n	80036a2 <LoopFillZerobss>

0800369e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800369e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a0:	3204      	adds	r2, #4

080036a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036a4:	d3fb      	bcc.n	800369e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036a6:	f7ff ffe5 	bl	8003674 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f003 fcff 	bl	80070ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7fd ffa3 	bl	80015f8 <main>
  bx lr
 80036b2:	4770      	bx	lr
  ldr r0, =_sdata
 80036b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80036bc:	0800c588 	.word	0x0800c588
  ldr r2, =_sbss
 80036c0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80036c4:	20000698 	.word	0x20000698

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x28>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f945 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff fabe 	bl	8002c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f95d 	bl	80039d6 <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	f000 f925 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000020 	.word	0x20000020
 8003750:	20000028 	.word	0x20000028
 8003754:	20000024 	.word	0x20000024

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000028 	.word	0x20000028
 8003778:	20000690 	.word	0x20000690

0800377c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	20000690 	.word	0x20000690

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff fff0 	bl	800377c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_Delay+0x40>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffe0 	bl	800377c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000028 	.word	0x20000028

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <__NVIC_EnableIRQ+0x34>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f7ff ff90 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff2d 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff42 	bl	800381c <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff90 	bl	80038c4 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5f 	bl	8003870 <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff35 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d008      	beq.n	8003a16 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e020      	b.n	8003a58 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 020e 	bic.w	r2, r2, #14
 8003a24:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d005      	beq.n	8003a86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
 8003a84:	e051      	b.n	8003b2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 020e 	bic.w	r2, r2, #14
 8003a94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_DMA_Abort_IT+0xd0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d029      	beq.n	8003b04 <HAL_DMA_Abort_IT+0xa0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_DMA_Abort_IT+0xd4>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d022      	beq.n	8003b00 <HAL_DMA_Abort_IT+0x9c>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <HAL_DMA_Abort_IT+0xd8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d01a      	beq.n	8003afa <HAL_DMA_Abort_IT+0x96>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <HAL_DMA_Abort_IT+0xdc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d012      	beq.n	8003af4 <HAL_DMA_Abort_IT+0x90>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a1c      	ldr	r2, [pc, #112]	; (8003b44 <HAL_DMA_Abort_IT+0xe0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00a      	beq.n	8003aee <HAL_DMA_Abort_IT+0x8a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_DMA_Abort_IT+0xe4>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d102      	bne.n	8003ae8 <HAL_DMA_Abort_IT+0x84>
 8003ae2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ae6:	e00e      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aec:	e00b      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003aee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003af2:	e008      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003af8:	e005      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003afe:	e002      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003b00:	2310      	movs	r3, #16
 8003b02:	e000      	b.n	8003b06 <HAL_DMA_Abort_IT+0xa2>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_DMA_Abort_IT+0xe8>)
 8003b08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	4798      	blx	r3
    } 
  }
  return status;
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40020008 	.word	0x40020008
 8003b38:	4002001c 	.word	0x4002001c
 8003b3c:	40020030 	.word	0x40020030
 8003b40:	40020044 	.word	0x40020044
 8003b44:	40020058 	.word	0x40020058
 8003b48:	4002006c 	.word	0x4002006c
 8003b4c:	40020000 	.word	0x40020000

08003b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b08b      	sub	sp, #44	; 0x2c
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b62:	e127      	b.n	8003db4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b64:	2201      	movs	r2, #1
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	f040 8116 	bne.w	8003dae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d034      	beq.n	8003bf4 <HAL_GPIO_Init+0xa4>
 8003b8a:	2b12      	cmp	r3, #18
 8003b8c:	d80d      	bhi.n	8003baa <HAL_GPIO_Init+0x5a>
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d02b      	beq.n	8003bea <HAL_GPIO_Init+0x9a>
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d804      	bhi.n	8003ba0 <HAL_GPIO_Init+0x50>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d031      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d01c      	beq.n	8003bd8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b9e:	e048      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d043      	beq.n	8003c2c <HAL_GPIO_Init+0xdc>
 8003ba4:	2b11      	cmp	r3, #17
 8003ba6:	d01b      	beq.n	8003be0 <HAL_GPIO_Init+0x90>
          break;
 8003ba8:	e043      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003baa:	4a89      	ldr	r2, [pc, #548]	; (8003dd0 <HAL_GPIO_Init+0x280>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d026      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
 8003bb0:	4a87      	ldr	r2, [pc, #540]	; (8003dd0 <HAL_GPIO_Init+0x280>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d806      	bhi.n	8003bc4 <HAL_GPIO_Init+0x74>
 8003bb6:	4a87      	ldr	r2, [pc, #540]	; (8003dd4 <HAL_GPIO_Init+0x284>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d020      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
 8003bbc:	4a86      	ldr	r2, [pc, #536]	; (8003dd8 <HAL_GPIO_Init+0x288>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01d      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
          break;
 8003bc2:	e036      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003bc4:	4a85      	ldr	r2, [pc, #532]	; (8003ddc <HAL_GPIO_Init+0x28c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d019      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
 8003bca:	4a85      	ldr	r2, [pc, #532]	; (8003de0 <HAL_GPIO_Init+0x290>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d016      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
 8003bd0:	4a84      	ldr	r2, [pc, #528]	; (8003de4 <HAL_GPIO_Init+0x294>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d013      	beq.n	8003bfe <HAL_GPIO_Init+0xae>
          break;
 8003bd6:	e02c      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	623b      	str	r3, [r7, #32]
          break;
 8003bde:	e028      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	3304      	adds	r3, #4
 8003be6:	623b      	str	r3, [r7, #32]
          break;
 8003be8:	e023      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	3308      	adds	r3, #8
 8003bf0:	623b      	str	r3, [r7, #32]
          break;
 8003bf2:	e01e      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	623b      	str	r3, [r7, #32]
          break;
 8003bfc:	e019      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c06:	2304      	movs	r3, #4
 8003c08:	623b      	str	r3, [r7, #32]
          break;
 8003c0a:	e012      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d105      	bne.n	8003c20 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c14:	2308      	movs	r3, #8
 8003c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	611a      	str	r2, [r3, #16]
          break;
 8003c1e:	e008      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c20:	2308      	movs	r3, #8
 8003c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	615a      	str	r2, [r3, #20]
          break;
 8003c2a:	e002      	b.n	8003c32 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
          break;
 8003c30:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	2bff      	cmp	r3, #255	; 0xff
 8003c36:	d801      	bhi.n	8003c3c <HAL_GPIO_Init+0xec>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	e001      	b.n	8003c40 <HAL_GPIO_Init+0xf0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2bff      	cmp	r3, #255	; 0xff
 8003c46:	d802      	bhi.n	8003c4e <HAL_GPIO_Init+0xfe>
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	e002      	b.n	8003c54 <HAL_GPIO_Init+0x104>
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3b08      	subs	r3, #8
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	401a      	ands	r2, r3
 8003c66:	6a39      	ldr	r1, [r7, #32]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8096 	beq.w	8003dae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c82:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_GPIO_Init+0x298>)
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_GPIO_Init+0x298>)
 8003c88:	f043 0301 	orr.w	r3, r3, #1
 8003c8c:	6193      	str	r3, [r2, #24]
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_GPIO_Init+0x298>)
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	60bb      	str	r3, [r7, #8]
 8003c98:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c9a:	4a54      	ldr	r2, [pc, #336]	; (8003dec <HAL_GPIO_Init+0x29c>)
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	089b      	lsrs	r3, r3, #2
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	220f      	movs	r2, #15
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4b      	ldr	r2, [pc, #300]	; (8003df0 <HAL_GPIO_Init+0x2a0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_GPIO_Init+0x19e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_GPIO_Init+0x2a4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00d      	beq.n	8003cea <HAL_GPIO_Init+0x19a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a49      	ldr	r2, [pc, #292]	; (8003df8 <HAL_GPIO_Init+0x2a8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d007      	beq.n	8003ce6 <HAL_GPIO_Init+0x196>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_GPIO_Init+0x2ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_GPIO_Init+0x192>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e006      	b.n	8003cf0 <HAL_GPIO_Init+0x1a0>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e004      	b.n	8003cf0 <HAL_GPIO_Init+0x1a0>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e002      	b.n	8003cf0 <HAL_GPIO_Init+0x1a0>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_GPIO_Init+0x1a0>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	f002 0203 	and.w	r2, r2, #3
 8003cf6:	0092      	lsls	r2, r2, #2
 8003cf8:	4093      	lsls	r3, r2
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d00:	493a      	ldr	r1, [pc, #232]	; (8003dec <HAL_GPIO_Init+0x29c>)
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	089b      	lsrs	r3, r3, #2
 8003d06:	3302      	adds	r3, #2
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d006      	beq.n	8003d28 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4938      	ldr	r1, [pc, #224]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]
 8003d26:	e006      	b.n	8003d36 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d28:	4b35      	ldr	r3, [pc, #212]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	4933      	ldr	r1, [pc, #204]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d006      	beq.n	8003d50 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	492e      	ldr	r1, [pc, #184]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	604b      	str	r3, [r1, #4]
 8003d4e:	e006      	b.n	8003d5e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	4929      	ldr	r1, [pc, #164]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d006      	beq.n	8003d78 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d6a:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	4924      	ldr	r1, [pc, #144]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
 8003d76:	e006      	b.n	8003d86 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	491f      	ldr	r1, [pc, #124]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d006      	beq.n	8003da0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	491a      	ldr	r1, [pc, #104]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	60cb      	str	r3, [r1, #12]
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003da0:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	4915      	ldr	r1, [pc, #84]	; (8003e00 <HAL_GPIO_Init+0x2b0>)
 8003daa:	4013      	ands	r3, r2
 8003dac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	3301      	adds	r3, #1
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f47f aed0 	bne.w	8003b64 <HAL_GPIO_Init+0x14>
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	372c      	adds	r7, #44	; 0x2c
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	10210000 	.word	0x10210000
 8003dd4:	10110000 	.word	0x10110000
 8003dd8:	10120000 	.word	0x10120000
 8003ddc:	10310000 	.word	0x10310000
 8003de0:	10320000 	.word	0x10320000
 8003de4:	10220000 	.word	0x10220000
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40010000 	.word	0x40010000
 8003df0:	40010800 	.word	0x40010800
 8003df4:	40010c00 	.word	0x40010c00
 8003df8:	40011000 	.word	0x40011000
 8003dfc:	40011400 	.word	0x40011400
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e20:	e003      	b.n	8003e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	041a      	lsls	r2, r3, #16
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	611a      	str	r2, [r3, #16]
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bc80      	pop	{r7}
 8003e32:	4770      	bx	lr

08003e34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	041a      	lsls	r2, r3, #16
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	43d9      	mvns	r1, r3
 8003e52:	887b      	ldrh	r3, [r7, #2]
 8003e54:	400b      	ands	r3, r1
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	611a      	str	r2, [r3, #16]
}
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bc80      	pop	{r7}
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e11f      	b.n	80040ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fe ff1c 	bl	8002ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	; 0x24
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f001 fe3e 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a7b      	ldr	r2, [pc, #492]	; (80040c4 <HAL_I2C_Init+0x25c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d807      	bhi.n	8003eec <HAL_I2C_Init+0x84>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a7a      	ldr	r2, [pc, #488]	; (80040c8 <HAL_I2C_Init+0x260>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	bf94      	ite	ls
 8003ee4:	2301      	movls	r3, #1
 8003ee6:	2300      	movhi	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	e006      	b.n	8003efa <HAL_I2C_Init+0x92>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a77      	ldr	r2, [pc, #476]	; (80040cc <HAL_I2C_Init+0x264>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf94      	ite	ls
 8003ef4:	2301      	movls	r3, #1
 8003ef6:	2300      	movhi	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e0db      	b.n	80040ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a72      	ldr	r2, [pc, #456]	; (80040d0 <HAL_I2C_Init+0x268>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	0c9b      	lsrs	r3, r3, #18
 8003f0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	4a64      	ldr	r2, [pc, #400]	; (80040c4 <HAL_I2C_Init+0x25c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d802      	bhi.n	8003f3c <HAL_I2C_Init+0xd4>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	e009      	b.n	8003f50 <HAL_I2C_Init+0xe8>
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f42:	fb02 f303 	mul.w	r3, r2, r3
 8003f46:	4a63      	ldr	r2, [pc, #396]	; (80040d4 <HAL_I2C_Init+0x26c>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	3301      	adds	r3, #1
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4956      	ldr	r1, [pc, #344]	; (80040c4 <HAL_I2C_Init+0x25c>)
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	d80d      	bhi.n	8003f8c <HAL_I2C_Init+0x124>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e59      	subs	r1, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	bf38      	it	cc
 8003f88:	2304      	movcc	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1c4>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x150>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x176>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x17e>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1c4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1a4>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1c4>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	461a      	mov	r2, r3
 80040e4:	460b      	mov	r3, r1
 80040e6:	817b      	strh	r3, [r7, #10]
 80040e8:	4613      	mov	r3, r2
 80040ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7ff fb46 	bl	800377c <HAL_GetTick>
 80040f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	f040 80e0 	bne.w	80042c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2319      	movs	r3, #25
 8004106:	2201      	movs	r2, #1
 8004108:	4970      	ldr	r1, [pc, #448]	; (80042cc <HAL_I2C_Master_Transmit+0x1f4>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 ff6c 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	e0d3      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_I2C_Master_Transmit+0x50>
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d007      	beq.n	800414e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	; 0x21
 8004162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2210      	movs	r2, #16
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	893a      	ldrh	r2, [r7, #8]
 800417e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	4a50      	ldr	r2, [pc, #320]	; (80042d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004190:	8979      	ldrh	r1, [r7, #10]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fd26 	bl	8004be8 <I2C_MasterRequestWrite>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08d      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041bc:	e066      	b.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 ffe6 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Master_Transmit+0x188>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424a:	b29b      	uxth	r3, r3
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	6a39      	ldr	r1, [r7, #32]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 ffd6 	bl	8005216 <I2C_WaitOnBTFFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00d      	beq.n	800428c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	2b04      	cmp	r3, #4
 8004276:	d107      	bne.n	8004288 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e01a      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d194      	bne.n	80041be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042ee:	f7ff fa45 	bl	800377c <HAL_GetTick>
 80042f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	f040 80d9 	bne.w	80044b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	2319      	movs	r3, #25
 8004308:	2201      	movs	r2, #1
 800430a:	496d      	ldr	r1, [pc, #436]	; (80044c0 <HAL_I2C_Mem_Write+0x1ec>)
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fe6b 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004318:	2302      	movs	r3, #2
 800431a:	e0cc      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_I2C_Mem_Write+0x56>
 8004326:	2302      	movs	r3, #2
 8004328:	e0c5      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d007      	beq.n	8004350 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 0201 	orr.w	r2, r2, #1
 800434e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800435e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2221      	movs	r2, #33	; 0x21
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2240      	movs	r2, #64	; 0x40
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a4d      	ldr	r2, [pc, #308]	; (80044c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004392:	88f8      	ldrh	r0, [r7, #6]
 8004394:	893a      	ldrh	r2, [r7, #8]
 8004396:	8979      	ldrh	r1, [r7, #10]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	4603      	mov	r3, r0
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 fca2 	bl	8004cec <I2C_RequestMemoryWrite>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d052      	beq.n	8004454 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e081      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 feec 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e06b      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	781a      	ldrb	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d11b      	bne.n	8004454 <HAL_I2C_Mem_Write+0x180>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d017      	beq.n	8004454 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800444a:	b29b      	uxth	r3, r3
 800444c:	3b01      	subs	r3, #1
 800444e:	b29a      	uxth	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1aa      	bne.n	80043b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 fed8 	bl	8005216 <I2C_WaitOnBTFFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00d      	beq.n	8004488 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	2b04      	cmp	r3, #4
 8004472:	d107      	bne.n	8004484 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004482:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e016      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	00100002 	.word	0x00100002
 80044c4:	ffff0000 	.word	0xffff0000

080044c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08c      	sub	sp, #48	; 0x30
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	4608      	mov	r0, r1
 80044d2:	4611      	mov	r1, r2
 80044d4:	461a      	mov	r2, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	817b      	strh	r3, [r7, #10]
 80044da:	460b      	mov	r3, r1
 80044dc:	813b      	strh	r3, [r7, #8]
 80044de:	4613      	mov	r3, r2
 80044e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044e6:	f7ff f949 	bl	800377c <HAL_GetTick>
 80044ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	f040 823d 	bne.w	8004974 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	2319      	movs	r3, #25
 8004500:	2201      	movs	r2, #1
 8004502:	4981      	ldr	r1, [pc, #516]	; (8004708 <HAL_I2C_Mem_Read+0x240>)
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fd6f 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d001      	beq.n	8004514 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
 8004512:	e230      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_I2C_Mem_Read+0x5a>
 800451e:	2302      	movs	r3, #2
 8004520:	e229      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	2b01      	cmp	r3, #1
 8004536:	d007      	beq.n	8004548 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2222      	movs	r2, #34	; 0x22
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2240      	movs	r2, #64	; 0x40
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	4a61      	ldr	r2, [pc, #388]	; (800470c <HAL_I2C_Mem_Read+0x244>)
 8004588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800458a:	88f8      	ldrh	r0, [r7, #6]
 800458c:	893a      	ldrh	r2, [r7, #8]
 800458e:	8979      	ldrh	r1, [r7, #10]
 8004590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4603      	mov	r3, r0
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fc3c 	bl	8004e18 <I2C_RequestMemoryRead>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e1e5      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d113      	bne.n	80045da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	e1b9      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d11d      	bne.n	800461e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80045f2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	61bb      	str	r3, [r7, #24]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800461a:	b662      	cpsie	i
 800461c:	e197      	b.n	800494e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004622:	2b02      	cmp	r3, #2
 8004624:	d11d      	bne.n	8004662 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004634:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004636:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800465c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800465e:	b662      	cpsie	i
 8004660:	e175      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004670:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	613b      	str	r3, [r7, #16]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004688:	e161      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800468e:	2b03      	cmp	r3, #3
 8004690:	f200 811a 	bhi.w	80048c8 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	2b01      	cmp	r3, #1
 800469a:	d123      	bne.n	80046e4 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 fdf9 	bl	8005298 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e162      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691a      	ldr	r2, [r3, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	1c5a      	adds	r2, r3, #1
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046cc:	3b01      	subs	r3, #1
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e2:	e134      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d150      	bne.n	800478e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	2200      	movs	r2, #0
 80046f4:	4906      	ldr	r1, [pc, #24]	; (8004710 <HAL_I2C_Mem_Read+0x248>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fc76 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e137      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
 8004706:	bf00      	nop
 8004708:	00100002 	.word	0x00100002
 800470c:	ffff0000 	.word	0xffff0000
 8004710:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004714:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004724:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004742:	3b01      	subs	r3, #1
 8004744:	b29a      	uxth	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004758:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800478c:	e0df      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2200      	movs	r2, #0
 8004796:	497a      	ldr	r1, [pc, #488]	; (8004980 <HAL_I2C_Mem_Read+0x4b8>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fc25 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0e6      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047b8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29a      	uxth	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80047ec:	4b65      	ldr	r3, [pc, #404]	; (8004984 <HAL_I2C_Mem_Read+0x4bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	4a65      	ldr	r2, [pc, #404]	; (8004988 <HAL_I2C_Mem_Read+0x4c0>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	0a1a      	lsrs	r2, r3, #8
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	00da      	lsls	r2, r3, #3
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	3b01      	subs	r3, #1
 800480a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d117      	bne.n	8004842 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	f043 0220 	orr.w	r2, r3, #32
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004834:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e099      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d1da      	bne.n	8004806 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004892:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	1c5a      	adds	r2, r3, #1
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048c6:	e042      	b.n	800494e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fce3 	bl	8005298 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e04c      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	b2d2      	uxtb	r2, r2
 80048e8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d118      	bne.n	800494e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	b2d2      	uxtb	r2, r2
 8004928:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f ae99 	bne.w	800468a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	e000      	b.n	8004976 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004974:	2302      	movs	r3, #2
  }
}
 8004976:	4618      	mov	r0, r3
 8004978:	3728      	adds	r7, #40	; 0x28
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	00010004 	.word	0x00010004
 8004984:	20000020 	.word	0x20000020
 8004988:	14f8b589 	.word	0x14f8b589

0800498c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af02      	add	r7, sp, #8
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
 8004998:	460b      	mov	r3, r1
 800499a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800499c:	f7fe feee 	bl	800377c <HAL_GetTick>
 80049a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80049a2:	2301      	movs	r3, #1
 80049a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b20      	cmp	r3, #32
 80049b0:	f040 8111 	bne.w	8004bd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2319      	movs	r3, #25
 80049ba:	2201      	movs	r2, #1
 80049bc:	4988      	ldr	r1, [pc, #544]	; (8004be0 <HAL_I2C_IsDeviceReady+0x254>)
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 fb12 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80049ca:	2302      	movs	r3, #2
 80049cc:	e104      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_I2C_IsDeviceReady+0x50>
 80049d8:	2302      	movs	r3, #2
 80049da:	e0fd      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d007      	beq.n	8004a02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0201 	orr.w	r2, r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2224      	movs	r2, #36	; 0x24
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a70      	ldr	r2, [pc, #448]	; (8004be4 <HAL_I2C_IsDeviceReady+0x258>)
 8004a24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fad0 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00d      	beq.n	8004a6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5c:	d103      	bne.n	8004a66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e0b6      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a6a:	897b      	ldrh	r3, [r7, #10]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fe fe7f 	bl	800377c <HAL_GetTick>
 8004a7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	bf0c      	ite	eq
 8004a8e:	2301      	moveq	r3, #1
 8004a90:	2300      	movne	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	bf0c      	ite	eq
 8004aa6:	2301      	moveq	r3, #1
 8004aa8:	2300      	movne	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004aae:	e025      	b.n	8004afc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ab0:	f7fe fe64 	bl	800377c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d302      	bcc.n	8004ac6 <HAL_I2C_IsDeviceReady+0x13a>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d103      	bne.n	8004ace <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22a0      	movs	r2, #160	; 0xa0
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	bf0c      	ite	eq
 8004adc:	2301      	moveq	r3, #1
 8004ade:	2300      	movne	r3, #0
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2ba0      	cmp	r3, #160	; 0xa0
 8004b06:	d005      	beq.n	8004b14 <HAL_I2C_IsDeviceReady+0x188>
 8004b08:	7dfb      	ldrb	r3, [r7, #23]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d102      	bne.n	8004b14 <HAL_I2C_IsDeviceReady+0x188>
 8004b0e:	7dbb      	ldrb	r3, [r7, #22]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d0cd      	beq.n	8004ab0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d129      	bne.n	8004b7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2319      	movs	r3, #25
 8004b56:	2201      	movs	r2, #1
 8004b58:	4921      	ldr	r1, [pc, #132]	; (8004be0 <HAL_I2C_IsDeviceReady+0x254>)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 fa44 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e036      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e02c      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	2319      	movs	r3, #25
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	490f      	ldr	r1, [pc, #60]	; (8004be0 <HAL_I2C_IsDeviceReady+0x254>)
 8004ba2:	68f8      	ldr	r0, [r7, #12]
 8004ba4:	f000 fa20 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e012      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	f4ff af32 	bcc.w	8004a26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
  }
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	00100002 	.word	0x00100002
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af02      	add	r7, sp, #8
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d006      	beq.n	8004c12 <I2C_MasterRequestWrite+0x2a>
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d003      	beq.n	8004c12 <I2C_MasterRequestWrite+0x2a>
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c10:	d108      	bne.n	8004c24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e00b      	b.n	8004c3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c28:	2b12      	cmp	r3, #18
 8004c2a:	d107      	bne.n	8004c3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f9cd 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d103      	bne.n	8004c6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e035      	b.n	8004cdc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c78:	d108      	bne.n	8004c8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c7a:	897b      	ldrh	r3, [r7, #10]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	461a      	mov	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e01b      	b.n	8004cc4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c8c:	897b      	ldrh	r3, [r7, #10]
 8004c8e:	11db      	asrs	r3, r3, #7
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	f003 0306 	and.w	r3, r3, #6
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f063 030f 	orn	r3, r3, #15
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	490e      	ldr	r1, [pc, #56]	; (8004ce4 <I2C_MasterRequestWrite+0xfc>)
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f9f3 	bl	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e010      	b.n	8004cdc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cba:	897b      	ldrh	r3, [r7, #10]
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4907      	ldr	r1, [pc, #28]	; (8004ce8 <I2C_MasterRequestWrite+0x100>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f9e3 	bl	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	00010008 	.word	0x00010008
 8004ce8:	00010002 	.word	0x00010002

08004cec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	4608      	mov	r0, r1
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	817b      	strh	r3, [r7, #10]
 8004cfe:	460b      	mov	r3, r1
 8004d00:	813b      	strh	r3, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 f960 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3c:	d103      	bne.n	8004d46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e05f      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <I2C_RequestMemoryWrite+0x128>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f998 	bl	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04c      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 fa02 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e02b      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db8:	893b      	ldrh	r3, [r7, #8]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
 8004dc2:	e021      	b.n	8004e08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f9dc 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d107      	bne.n	8004dfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e005      	b.n	8004e0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfe:	893b      	ldrh	r3, [r7, #8]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	00010002 	.word	0x00010002

08004e18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f8c2 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e78:	d103      	bne.n	8004e82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e0aa      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e86:	897b      	ldrh	r3, [r7, #10]
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	6a3a      	ldr	r2, [r7, #32]
 8004e9a:	4952      	ldr	r1, [pc, #328]	; (8004fe4 <I2C_RequestMemoryRead+0x1cc>)
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f8fa 	bl	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e097      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	6a39      	ldr	r1, [r7, #32]
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f000 f964 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00d      	beq.n	8004eee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d107      	bne.n	8004eea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e076      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eee:	88fb      	ldrh	r3, [r7, #6]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d105      	bne.n	8004f00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef4:	893b      	ldrh	r3, [r7, #8]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]
 8004efe:	e021      	b.n	8004f44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f00:	893b      	ldrh	r3, [r7, #8]
 8004f02:	0a1b      	lsrs	r3, r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f10:	6a39      	ldr	r1, [r7, #32]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f93e 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00d      	beq.n	8004f3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d107      	bne.n	8004f36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e050      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f3a:	893b      	ldrh	r3, [r7, #8]
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f46:	6a39      	ldr	r1, [r7, #32]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f923 	bl	8005194 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d107      	bne.n	8004f6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e035      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f82b 	bl	8004fe8 <I2C_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d103      	bne.n	8004fb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e013      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fb4:	897b      	ldrh	r3, [r7, #10]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f043 0301 	orr.w	r3, r3, #1
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	6a3a      	ldr	r2, [r7, #32]
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <I2C_RequestMemoryRead+0x1cc>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f863 	bl	8005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3718      	adds	r7, #24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	00010002 	.word	0x00010002

08004fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ff8:	e025      	b.n	8005046 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005000:	d021      	beq.n	8005046 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fe fbbb 	bl	800377c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d116      	bne.n	8005046 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2220      	movs	r2, #32
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e023      	b.n	800508e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10d      	bne.n	800506c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	e00c      	b.n	8005086 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d0b6      	beq.n	8004ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a4:	e051      	b.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b4:	d123      	bne.n	80050fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f043 0204 	orr.w	r2, r3, #4
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e046      	b.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d021      	beq.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005106:	f7fe fb39 	bl	800377c <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d302      	bcc.n	800511c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d116      	bne.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	f043 0220 	orr.w	r2, r3, #32
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e020      	b.n	800518c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b01      	cmp	r3, #1
 8005152:	d10c      	bne.n	800516e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	4013      	ands	r3, r2
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e00b      	b.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	43da      	mvns	r2, r3
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4013      	ands	r3, r2
 800517a:	b29b      	uxth	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d18d      	bne.n	80050a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051a0:	e02d      	b.n	80051fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 f8ce 	bl	8005344 <I2C_IsAcknowledgeFailed>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e02d      	b.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b8:	d021      	beq.n	80051fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ba:	f7fe fadf 	bl	800377c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d302      	bcc.n	80051d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d116      	bne.n	80051fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e007      	b.n	800520e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005208:	2b80      	cmp	r3, #128	; 0x80
 800520a:	d1ca      	bne.n	80051a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005222:	e02d      	b.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f88d 	bl	8005344 <I2C_IsAcknowledgeFailed>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e02d      	b.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523a:	d021      	beq.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523c:	f7fe fa9e 	bl	800377c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d116      	bne.n	8005280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e007      	b.n	8005290 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d1ca      	bne.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052a4:	e042      	b.n	800532c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	695b      	ldr	r3, [r3, #20]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d119      	bne.n	80052e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0210 	mvn.w	r2, #16
 80052bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e029      	b.n	800533c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fe fa48 	bl	800377c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d116      	bne.n	800532c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e007      	b.n	800533c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005336:	2b40      	cmp	r3, #64	; 0x40
 8005338:	d1b5      	bne.n	80052a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d11b      	bne.n	8005394 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005364:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2220      	movs	r2, #32
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	f043 0204 	orr.w	r2, r3, #4
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e26c      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8087 	beq.w	80054ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053c0:	4b92      	ldr	r3, [pc, #584]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 030c 	and.w	r3, r3, #12
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d00c      	beq.n	80053e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80053cc:	4b8f      	ldr	r3, [pc, #572]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 030c 	and.w	r3, r3, #12
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d112      	bne.n	80053fe <HAL_RCC_OscConfig+0x5e>
 80053d8:	4b8c      	ldr	r3, [pc, #560]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d10b      	bne.n	80053fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e6:	4b89      	ldr	r3, [pc, #548]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d06c      	beq.n	80054cc <HAL_RCC_OscConfig+0x12c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d168      	bne.n	80054cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e246      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005406:	d106      	bne.n	8005416 <HAL_RCC_OscConfig+0x76>
 8005408:	4b80      	ldr	r3, [pc, #512]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a7f      	ldr	r2, [pc, #508]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800540e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005412:	6013      	str	r3, [r2, #0]
 8005414:	e02e      	b.n	8005474 <HAL_RCC_OscConfig+0xd4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10c      	bne.n	8005438 <HAL_RCC_OscConfig+0x98>
 800541e:	4b7b      	ldr	r3, [pc, #492]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a7a      	ldr	r2, [pc, #488]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	4b78      	ldr	r3, [pc, #480]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a77      	ldr	r2, [pc, #476]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e01d      	b.n	8005474 <HAL_RCC_OscConfig+0xd4>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005440:	d10c      	bne.n	800545c <HAL_RCC_OscConfig+0xbc>
 8005442:	4b72      	ldr	r3, [pc, #456]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a71      	ldr	r2, [pc, #452]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4b6f      	ldr	r3, [pc, #444]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a6e      	ldr	r2, [pc, #440]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e00b      	b.n	8005474 <HAL_RCC_OscConfig+0xd4>
 800545c:	4b6b      	ldr	r3, [pc, #428]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a6a      	ldr	r2, [pc, #424]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005466:	6013      	str	r3, [r2, #0]
 8005468:	4b68      	ldr	r3, [pc, #416]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a67      	ldr	r2, [pc, #412]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 800546e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005472:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547c:	f7fe f97e 	bl	800377c <HAL_GetTick>
 8005480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005482:	e008      	b.n	8005496 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005484:	f7fe f97a 	bl	800377c <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	2b64      	cmp	r3, #100	; 0x64
 8005490:	d901      	bls.n	8005496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e1fa      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005496:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f0      	beq.n	8005484 <HAL_RCC_OscConfig+0xe4>
 80054a2:	e014      	b.n	80054ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fe f96a 	bl	800377c <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ac:	f7fe f966 	bl	800377c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b64      	cmp	r3, #100	; 0x64
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e1e6      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054be:	4b53      	ldr	r3, [pc, #332]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x10c>
 80054ca:	e000      	b.n	80054ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d063      	beq.n	80055a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054da:	4b4c      	ldr	r3, [pc, #304]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054e6:	4b49      	ldr	r3, [pc, #292]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f003 030c 	and.w	r3, r3, #12
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d11c      	bne.n	800552c <HAL_RCC_OscConfig+0x18c>
 80054f2:	4b46      	ldr	r3, [pc, #280]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d116      	bne.n	800552c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fe:	4b43      	ldr	r3, [pc, #268]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <HAL_RCC_OscConfig+0x176>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d001      	beq.n	8005516 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e1ba      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005516:	4b3d      	ldr	r3, [pc, #244]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4939      	ldr	r1, [pc, #228]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	e03a      	b.n	80055a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d020      	beq.n	8005576 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005534:	4b36      	ldr	r3, [pc, #216]	; (8005610 <HAL_RCC_OscConfig+0x270>)
 8005536:	2201      	movs	r2, #1
 8005538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553a:	f7fe f91f 	bl	800377c <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005542:	f7fe f91b 	bl	800377c <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e19b      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d0f0      	beq.n	8005542 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4927      	ldr	r1, [pc, #156]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005570:	4313      	orrs	r3, r2
 8005572:	600b      	str	r3, [r1, #0]
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_RCC_OscConfig+0x270>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800557c:	f7fe f8fe 	bl	800377c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005584:	f7fe f8fa 	bl	800377c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e17a      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0308 	and.w	r3, r3, #8
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03a      	beq.n	8005624 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d019      	beq.n	80055ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055bc:	f7fe f8de 	bl	800377c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c4:	f7fe f8da 	bl	800377c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e15a      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <HAL_RCC_OscConfig+0x26c>)
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055e2:	2001      	movs	r0, #1
 80055e4:	f000 fada 	bl	8005b9c <RCC_Delay>
 80055e8:	e01c      	b.n	8005624 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ea:	4b0a      	ldr	r3, [pc, #40]	; (8005614 <HAL_RCC_OscConfig+0x274>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055f0:	f7fe f8c4 	bl	800377c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f6:	e00f      	b.n	8005618 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055f8:	f7fe f8c0 	bl	800377c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d908      	bls.n	8005618 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e140      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
 800560a:	bf00      	nop
 800560c:	40021000 	.word	0x40021000
 8005610:	42420000 	.word	0x42420000
 8005614:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005618:	4b9e      	ldr	r3, [pc, #632]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e9      	bne.n	80055f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80a6 	beq.w	800577e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005636:	4b97      	ldr	r3, [pc, #604]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10d      	bne.n	800565e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	4b94      	ldr	r3, [pc, #592]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	4a93      	ldr	r2, [pc, #588]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800564c:	61d3      	str	r3, [r2, #28]
 800564e:	4b91      	ldr	r3, [pc, #580]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005650:	69db      	ldr	r3, [r3, #28]
 8005652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565e:	4b8e      	ldr	r3, [pc, #568]	; (8005898 <HAL_RCC_OscConfig+0x4f8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d118      	bne.n	800569c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800566a:	4b8b      	ldr	r3, [pc, #556]	; (8005898 <HAL_RCC_OscConfig+0x4f8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a8a      	ldr	r2, [pc, #552]	; (8005898 <HAL_RCC_OscConfig+0x4f8>)
 8005670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005676:	f7fe f881 	bl	800377c <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800567c:	e008      	b.n	8005690 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800567e:	f7fe f87d 	bl	800377c <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b64      	cmp	r3, #100	; 0x64
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e0fd      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005690:	4b81      	ldr	r3, [pc, #516]	; (8005898 <HAL_RCC_OscConfig+0x4f8>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f0      	beq.n	800567e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d106      	bne.n	80056b2 <HAL_RCC_OscConfig+0x312>
 80056a4:	4b7b      	ldr	r3, [pc, #492]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	4a7a      	ldr	r2, [pc, #488]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056aa:	f043 0301 	orr.w	r3, r3, #1
 80056ae:	6213      	str	r3, [r2, #32]
 80056b0:	e02d      	b.n	800570e <HAL_RCC_OscConfig+0x36e>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10c      	bne.n	80056d4 <HAL_RCC_OscConfig+0x334>
 80056ba:	4b76      	ldr	r3, [pc, #472]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4a75      	ldr	r2, [pc, #468]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	6213      	str	r3, [r2, #32]
 80056c6:	4b73      	ldr	r3, [pc, #460]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4a72      	ldr	r2, [pc, #456]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056cc:	f023 0304 	bic.w	r3, r3, #4
 80056d0:	6213      	str	r3, [r2, #32]
 80056d2:	e01c      	b.n	800570e <HAL_RCC_OscConfig+0x36e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d10c      	bne.n	80056f6 <HAL_RCC_OscConfig+0x356>
 80056dc:	4b6d      	ldr	r3, [pc, #436]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	4a6c      	ldr	r2, [pc, #432]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	6213      	str	r3, [r2, #32]
 80056e8:	4b6a      	ldr	r3, [pc, #424]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	4a69      	ldr	r2, [pc, #420]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056ee:	f043 0301 	orr.w	r3, r3, #1
 80056f2:	6213      	str	r3, [r2, #32]
 80056f4:	e00b      	b.n	800570e <HAL_RCC_OscConfig+0x36e>
 80056f6:	4b67      	ldr	r3, [pc, #412]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	4a66      	ldr	r2, [pc, #408]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	6213      	str	r3, [r2, #32]
 8005702:	4b64      	ldr	r3, [pc, #400]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	4a63      	ldr	r2, [pc, #396]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005708:	f023 0304 	bic.w	r3, r3, #4
 800570c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d015      	beq.n	8005742 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005716:	f7fe f831 	bl	800377c <HAL_GetTick>
 800571a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fe f82d 	bl	800377c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	; 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0ab      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005734:	4b57      	ldr	r3, [pc, #348]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f003 0302 	and.w	r3, r3, #2
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0ee      	beq.n	800571e <HAL_RCC_OscConfig+0x37e>
 8005740:	e014      	b.n	800576c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005742:	f7fe f81b 	bl	800377c <HAL_GetTick>
 8005746:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005748:	e00a      	b.n	8005760 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574a:	f7fe f817 	bl	800377c <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e095      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005760:	4b4c      	ldr	r3, [pc, #304]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ee      	bne.n	800574a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800576c:	7dfb      	ldrb	r3, [r7, #23]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005772:	4b48      	ldr	r3, [pc, #288]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	4a47      	ldr	r2, [pc, #284]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800577c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8081 	beq.w	800588a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005788:	4b42      	ldr	r3, [pc, #264]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d061      	beq.n	8005858 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	2b02      	cmp	r3, #2
 800579a:	d146      	bne.n	800582a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b3f      	ldr	r3, [pc, #252]	; (800589c <HAL_RCC_OscConfig+0x4fc>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd ffeb 	bl	800377c <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fd ffe7 	bl	800377c <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e067      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057bc:	4b35      	ldr	r3, [pc, #212]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d0:	d108      	bne.n	80057e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057d2:	4b30      	ldr	r3, [pc, #192]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	492d      	ldr	r1, [pc, #180]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057e4:	4b2b      	ldr	r3, [pc, #172]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a19      	ldr	r1, [r3, #32]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	430b      	orrs	r3, r1
 80057f6:	4927      	ldr	r1, [pc, #156]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057fc:	4b27      	ldr	r3, [pc, #156]	; (800589c <HAL_RCC_OscConfig+0x4fc>)
 80057fe:	2201      	movs	r2, #1
 8005800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005802:	f7fd ffbb 	bl	800377c <HAL_GetTick>
 8005806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005808:	e008      	b.n	800581c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580a:	f7fd ffb7 	bl	800377c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e037      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800581c:	4b1d      	ldr	r3, [pc, #116]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0f0      	beq.n	800580a <HAL_RCC_OscConfig+0x46a>
 8005828:	e02f      	b.n	800588a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800582a:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_RCC_OscConfig+0x4fc>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fd ffa4 	bl	800377c <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005838:	f7fd ffa0 	bl	800377c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e020      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1f0      	bne.n	8005838 <HAL_RCC_OscConfig+0x498>
 8005856:	e018      	b.n	800588a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e013      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <HAL_RCC_OscConfig+0x4f4>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	429a      	cmp	r2, r3
 8005876:	d106      	bne.n	8005886 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000
 8005898:	40007000 	.word	0x40007000
 800589c:	42420060 	.word	0x42420060

080058a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0d0      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b4:	4b6a      	ldr	r3, [pc, #424]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d910      	bls.n	80058e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c2:	4b67      	ldr	r3, [pc, #412]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f023 0207 	bic.w	r2, r3, #7
 80058ca:	4965      	ldr	r1, [pc, #404]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d2:	4b63      	ldr	r3, [pc, #396]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d001      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e0b8      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d020      	beq.n	8005932 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d005      	beq.n	8005908 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058fc:	4b59      	ldr	r3, [pc, #356]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	4a58      	ldr	r2, [pc, #352]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005902:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005906:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005914:	4b53      	ldr	r3, [pc, #332]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	4a52      	ldr	r2, [pc, #328]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 800591a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800591e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005920:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	494d      	ldr	r1, [pc, #308]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 800592e:	4313      	orrs	r3, r2
 8005930:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d040      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005946:	4b47      	ldr	r3, [pc, #284]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d115      	bne.n	800597e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e07f      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595e:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e073      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596e:	4b3d      	ldr	r3, [pc, #244]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e06b      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800597e:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f023 0203 	bic.w	r2, r3, #3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4936      	ldr	r1, [pc, #216]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 800598c:	4313      	orrs	r3, r2
 800598e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005990:	f7fd fef4 	bl	800377c <HAL_GetTick>
 8005994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005996:	e00a      	b.n	80059ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005998:	f7fd fef0 	bl	800377c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e053      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ae:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f003 020c 	and.w	r2, r3, #12
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	429a      	cmp	r2, r3
 80059be:	d1eb      	bne.n	8005998 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d210      	bcs.n	80059f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f023 0207 	bic.w	r2, r3, #7
 80059d6:	4922      	ldr	r1, [pc, #136]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	4313      	orrs	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059de:	4b20      	ldr	r3, [pc, #128]	; (8005a60 <HAL_RCC_ClockConfig+0x1c0>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d001      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e032      	b.n	8005a56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4916      	ldr	r1, [pc, #88]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	490e      	ldr	r1, [pc, #56]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a2e:	f000 f821 	bl	8005a74 <HAL_RCC_GetSysClockFreq>
 8005a32:	4601      	mov	r1, r0
 8005a34:	4b0b      	ldr	r3, [pc, #44]	; (8005a64 <HAL_RCC_ClockConfig+0x1c4>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	091b      	lsrs	r3, r3, #4
 8005a3a:	f003 030f 	and.w	r3, r3, #15
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <HAL_RCC_ClockConfig+0x1c8>)
 8005a40:	5cd3      	ldrb	r3, [r2, r3]
 8005a42:	fa21 f303 	lsr.w	r3, r1, r3
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <HAL_RCC_ClockConfig+0x1cc>)
 8005a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <HAL_RCC_ClockConfig+0x1d0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fe52 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	40022000 	.word	0x40022000
 8005a64:	40021000 	.word	0x40021000
 8005a68:	0800c098 	.word	0x0800c098
 8005a6c:	20000020 	.word	0x20000020
 8005a70:	20000024 	.word	0x20000024

08005a74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a74:	b490      	push	{r4, r7}
 8005a76:	b08a      	sub	sp, #40	; 0x28
 8005a78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a7a:	4b2a      	ldr	r3, [pc, #168]	; (8005b24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a7c:	1d3c      	adds	r4, r7, #4
 8005a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a84:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d002      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d003      	beq.n	8005aba <HAL_RCC_GetSysClockFreq+0x46>
 8005ab2:	e02d      	b.n	8005b10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ab4:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ab6:	623b      	str	r3, [r7, #32]
      break;
 8005ab8:	e02d      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	0c9b      	lsrs	r3, r3, #18
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005acc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d013      	beq.n	8005b00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ad8:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0c5b      	lsrs	r3, r3, #17
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005aec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4a0f      	ldr	r2, [pc, #60]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005af2:	fb02 f203 	mul.w	r2, r2, r3
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	e004      	b.n	8005b0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b04:	fb02 f303 	mul.w	r3, r2, r3
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	623b      	str	r3, [r7, #32]
      break;
 8005b0e:	e002      	b.n	8005b16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b12:	623b      	str	r3, [r7, #32]
      break;
 8005b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b16:	6a3b      	ldr	r3, [r7, #32]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3728      	adds	r7, #40	; 0x28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bc90      	pop	{r4, r7}
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	0800c084 	.word	0x0800c084
 8005b28:	0800c094 	.word	0x0800c094
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	007a1200 	.word	0x007a1200
 8005b34:	003d0900 	.word	0x003d0900

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	20000020 	.word	0x20000020

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff2 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b54:	4601      	mov	r1, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4a03      	ldr	r2, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5cd3      	ldrb	r3, [r2, r3]
 8005b64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40021000 	.word	0x40021000
 8005b70:	0800c0a8 	.word	0x0800c0a8

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffde 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	0adb      	lsrs	r3, r3, #11
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5cd3      	ldrb	r3, [r2, r3]
 8005b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40021000 	.word	0x40021000
 8005b98:	0800c0a8 	.word	0x0800c0a8

08005b9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005ba4:	4b0a      	ldr	r3, [pc, #40]	; (8005bd0 <RCC_Delay+0x34>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <RCC_Delay+0x38>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	0a5b      	lsrs	r3, r3, #9
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	fb02 f303 	mul.w	r3, r2, r3
 8005bb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005bb8:	bf00      	nop
  }
  while (Delay --);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	60fa      	str	r2, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f9      	bne.n	8005bb8 <RCC_Delay+0x1c>
}
 8005bc4:	bf00      	nop
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bc80      	pop	{r7}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000020 	.word	0x20000020
 8005bd4:	10624dd3 	.word	0x10624dd3

08005bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e076      	b.n	8005cd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d108      	bne.n	8005c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bfa:	d009      	beq.n	8005c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	61da      	str	r2, [r3, #28]
 8005c02:	e005      	b.n	8005c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fd f88c 	bl	8002d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	431a      	orrs	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c94:	ea42 0103 	orr.w	r1, r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	0c1a      	lsrs	r2, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f002 0204 	and.w	r2, r2, #4
 8005cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69da      	ldr	r2, [r3, #28]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3708      	adds	r7, #8
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e041      	b.n	8005d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d106      	bne.n	8005d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f7fd f86a 	bl	8002de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f000 fa6c 	bl	80061fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3708      	adds	r7, #8
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e03a      	b.n	8005e0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_TIM_Base_Start_IT+0x98>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d00e      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc2:	d009      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a14      	ldr	r2, [pc, #80]	; (8005e1c <HAL_TIM_Base_Start_IT+0x9c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0x58>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a13      	ldr	r2, [pc, #76]	; (8005e20 <HAL_TIM_Base_Start_IT+0xa0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d010      	beq.n	8005e0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f042 0201 	orr.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfa:	e007      	b.n	8005e0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f042 0201 	orr.w	r2, r2, #1
 8005e0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40000800 	.word	0x40000800

08005e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d122      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d11b      	bne.n	8005e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0202 	mvn.w	r2, #2
 8005e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	f003 0303 	and.w	r3, r3, #3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f9ad 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005e6c:	e005      	b.n	8005e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f9a0 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 f9af 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d122      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d11b      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f06f 0204 	mvn.w	r2, #4
 8005ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2202      	movs	r2, #2
 8005eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f983 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005ec0:	e005      	b.n	8005ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 f976 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f985 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d122      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f003 0308 	and.w	r3, r3, #8
 8005eec:	2b08      	cmp	r3, #8
 8005eee:	d11b      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f06f 0208 	mvn.w	r2, #8
 8005ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2204      	movs	r2, #4
 8005efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f003 0303 	and.w	r3, r3, #3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f959 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005f14:	e005      	b.n	8005f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f94c 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f95b 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	2b10      	cmp	r3, #16
 8005f34:	d122      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d11b      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f06f 0210 	mvn.w	r2, #16
 8005f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2208      	movs	r2, #8
 8005f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f92f 	bl	80061c6 <HAL_TIM_IC_CaptureCallback>
 8005f68:	e005      	b.n	8005f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f922 	bl	80061b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f931 	bl	80061d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0201 	mvn.w	r2, #1
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f8fd 	bl	80061a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc0:	2b80      	cmp	r3, #128	; 0x80
 8005fc2:	d107      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa73 	bl	80064ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b40      	cmp	r3, #64	; 0x40
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b40      	cmp	r3, #64	; 0x40
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 f8f5 	bl	80061ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b20      	cmp	r3, #32
 800600c:	d10e      	bne.n	800602c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b20      	cmp	r3, #32
 800601a:	d107      	bne.n	800602c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0220 	mvn.w	r2, #32
 8006024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fa3e 	bl	80064a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIM_ConfigClockSource+0x18>
 8006048:	2302      	movs	r3, #2
 800604a:	e0a6      	b.n	800619a <HAL_TIM_ConfigClockSource+0x166>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800606a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006072:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d067      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x120>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d80b      	bhi.n	80060a0 <HAL_TIM_ConfigClockSource+0x6c>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d073      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x140>
 800608c:	2b10      	cmp	r3, #16
 800608e:	d802      	bhi.n	8006096 <HAL_TIM_ConfigClockSource+0x62>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d06f      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006094:	e078      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006096:	2b20      	cmp	r3, #32
 8006098:	d06c      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x140>
 800609a:	2b30      	cmp	r3, #48	; 0x30
 800609c:	d06a      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800609e:	e073      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060a0:	2b70      	cmp	r3, #112	; 0x70
 80060a2:	d00d      	beq.n	80060c0 <HAL_TIM_ConfigClockSource+0x8c>
 80060a4:	2b70      	cmp	r3, #112	; 0x70
 80060a6:	d804      	bhi.n	80060b2 <HAL_TIM_ConfigClockSource+0x7e>
 80060a8:	2b50      	cmp	r3, #80	; 0x50
 80060aa:	d033      	beq.n	8006114 <HAL_TIM_ConfigClockSource+0xe0>
 80060ac:	2b60      	cmp	r3, #96	; 0x60
 80060ae:	d041      	beq.n	8006134 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80060b0:	e06a      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80060b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b6:	d066      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x152>
 80060b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060bc:	d017      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0xba>
      break;
 80060be:	e063      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6818      	ldr	r0, [r3, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	6899      	ldr	r1, [r3, #8]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f000 f96d 	bl	80063ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	609a      	str	r2, [r3, #8]
      break;
 80060ec:	e04c      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6899      	ldr	r1, [r3, #8]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f000 f956 	bl	80063ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006110:	609a      	str	r2, [r3, #8]
      break;
 8006112:	e039      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	6859      	ldr	r1, [r3, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	461a      	mov	r2, r3
 8006122:	f000 f8cd 	bl	80062c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2150      	movs	r1, #80	; 0x50
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f924 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8006132:	e029      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6859      	ldr	r1, [r3, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	461a      	mov	r2, r3
 8006142:	f000 f8eb 	bl	800631c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2160      	movs	r1, #96	; 0x60
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f914 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8006152:	e019      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	6859      	ldr	r1, [r3, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	461a      	mov	r2, r3
 8006162:	f000 f8ad 	bl	80062c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2140      	movs	r1, #64	; 0x40
 800616c:	4618      	mov	r0, r3
 800616e:	f000 f904 	bl	800637a <TIM_ITRx_SetConfig>
      break;
 8006172:	e009      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f000 f8fb 	bl	800637a <TIM_ITRx_SetConfig>
        break;
 8006184:	e000      	b.n	8006188 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006186:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bc80      	pop	{r7}
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr

080061ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061f2:	bf00      	nop
 80061f4:	370c      	adds	r7, #12
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr

080061fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a29      	ldr	r2, [pc, #164]	; (80062b4 <TIM_Base_SetConfig+0xb8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00b      	beq.n	800622c <TIM_Base_SetConfig+0x30>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621a:	d007      	beq.n	800622c <TIM_Base_SetConfig+0x30>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <TIM_Base_SetConfig+0xbc>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_Base_SetConfig+0x30>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <TIM_Base_SetConfig+0xc0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d108      	bne.n	800623e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	4313      	orrs	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1c      	ldr	r2, [pc, #112]	; (80062b4 <TIM_Base_SetConfig+0xb8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_Base_SetConfig+0x62>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624c:	d007      	beq.n	800625e <TIM_Base_SetConfig+0x62>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <TIM_Base_SetConfig+0xbc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_Base_SetConfig+0x62>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a18      	ldr	r2, [pc, #96]	; (80062bc <TIM_Base_SetConfig+0xc0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d108      	bne.n	8006270 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a07      	ldr	r2, [pc, #28]	; (80062b4 <TIM_Base_SetConfig+0xb8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d103      	bne.n	80062a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691a      	ldr	r2, [r3, #16]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	615a      	str	r2, [r3, #20]
}
 80062aa:	bf00      	nop
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40000400 	.word	0x40000400
 80062bc:	40000800 	.word	0x40000800

080062c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	f023 0201 	bic.w	r2, r3, #1
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 030a 	bic.w	r3, r3, #10
 80062fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	bc80      	pop	{r7}
 800631a:	4770      	bx	lr

0800631c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	f023 0210 	bic.w	r2, r3, #16
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006346:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	031b      	lsls	r3, r3, #12
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006358:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800637a:	b480      	push	{r7}
 800637c:	b085      	sub	sp, #20
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	f043 0307 	orr.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	3714      	adds	r7, #20
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
 80063ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	021a      	lsls	r2, r3, #8
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	609a      	str	r2, [r3, #8]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e046      	b.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800642a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d009      	beq.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d10c      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800646c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4313      	orrs	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	bc80      	pop	{r7}
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800

080064a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e03f      	b.n	800655e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fc fc98 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	; 0x24
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800650e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fd33 	bl	8006f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006524:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	695a      	ldr	r2, [r3, #20]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006534:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68da      	ldr	r2, [r3, #12]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006544:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08a      	sub	sp, #40	; 0x28
 800656a:	af02      	add	r7, sp, #8
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006576:	2300      	movs	r3, #0
 8006578:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b20      	cmp	r3, #32
 8006584:	d17c      	bne.n	8006680 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_UART_Transmit+0x2c>
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e075      	b.n	8006682 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_UART_Transmit+0x3e>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e06e      	b.n	8006682 <HAL_UART_Transmit+0x11c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2221      	movs	r2, #33	; 0x21
 80065b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ba:	f7fd f8df 	bl	800377c <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	88fa      	ldrh	r2, [r7, #6]
 80065ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d4:	d108      	bne.n	80065e8 <HAL_UART_Transmit+0x82>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d104      	bne.n	80065e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065de:	2300      	movs	r3, #0
 80065e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	e003      	b.n	80065f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065f8:	e02a      	b.n	8006650 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2200      	movs	r2, #0
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fae5 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e036      	b.n	8006682 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	461a      	mov	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	3302      	adds	r3, #2
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e007      	b.n	8006642 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	3301      	adds	r3, #1
 8006640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006646:	b29b      	uxth	r3, r3
 8006648:	3b01      	subs	r3, #1
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006654:	b29b      	uxth	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1cf      	bne.n	80065fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	2200      	movs	r2, #0
 8006662:	2140      	movs	r1, #64	; 0x40
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fab5 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e006      	b.n	8006682 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2220      	movs	r2, #32
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	e000      	b.n	8006682 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006680:	2302      	movs	r3, #2
  }
}
 8006682:	4618      	mov	r0, r3
 8006684:	3720      	adds	r7, #32
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b08a      	sub	sp, #40	; 0x28
 800668e:	af02      	add	r7, sp, #8
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	f040 808c 	bne.w	80067c4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_UART_Receive+0x2e>
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e084      	b.n	80067c6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_UART_Receive+0x40>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e07d      	b.n	80067c6 <HAL_UART_Receive+0x13c>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2222      	movs	r2, #34	; 0x22
 80066dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066e6:	f7fd f849 	bl	800377c <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	88fa      	ldrh	r2, [r7, #6]
 80066f0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	88fa      	ldrh	r2, [r7, #6]
 80066f6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	d108      	bne.n	8006714 <HAL_UART_Receive+0x8a>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e003      	b.n	800671c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006724:	e043      	b.n	80067ae <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2200      	movs	r2, #0
 800672e:	2120      	movs	r1, #32
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fa4f 	bl	8006bd4 <UART_WaitOnFlagUntilTimeout>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e042      	b.n	80067c6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10c      	bne.n	8006760 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	b29b      	uxth	r3, r3
 800674e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006752:	b29a      	uxth	r2, r3
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	3302      	adds	r3, #2
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	e01f      	b.n	80067a0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d007      	beq.n	800677a <HAL_UART_Receive+0xf0>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_UART_Receive+0xfe>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d106      	bne.n	8006788 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	e008      	b.n	800679a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	b2db      	uxtb	r3, r3
 8006790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006794:	b2da      	uxtb	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	3301      	adds	r3, #1
 800679e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b29a      	uxth	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1b6      	bne.n	8006726 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e000      	b.n	80067c6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
  }
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	4613      	mov	r3, r2
 80067da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d11d      	bne.n	8006824 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_UART_Receive_IT+0x26>
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e016      	b.n	8006826 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d101      	bne.n	8006806 <HAL_UART_Receive_IT+0x38>
 8006802:	2302      	movs	r3, #2
 8006804:	e00f      	b.n	8006826 <HAL_UART_Receive_IT+0x58>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	461a      	mov	r2, r3
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fa24 	bl	8006c68 <UART_Start_Receive_IT>
 8006820:	4603      	mov	r3, r0
 8006822:	e000      	b.n	8006826 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b08a      	sub	sp, #40	; 0x28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006850:	2300      	movs	r3, #0
 8006852:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f003 030f 	and.w	r3, r3, #15
 800685e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10d      	bne.n	8006882 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d008      	beq.n	8006882 <HAL_UART_IRQHandler+0x52>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fad4 	bl	8006e28 <UART_Receive_IT>
      return;
 8006880:	e17c      	b.n	8006b7c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80b1 	beq.w	80069ec <HAL_UART_IRQHandler+0x1bc>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <HAL_UART_IRQHandler+0x70>
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a6 	beq.w	80069ec <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_UART_IRQHandler+0x90>
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b8:	f043 0201 	orr.w	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <HAL_UART_IRQHandler+0xb0>
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0301 	and.w	r3, r3, #1
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	f043 0202 	orr.w	r2, r3, #2
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	f003 0302 	and.w	r3, r3, #2
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <HAL_UART_IRQHandler+0xd0>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d005      	beq.n	8006900 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	f043 0204 	orr.w	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00f      	beq.n	800692a <HAL_UART_IRQHandler+0xfa>
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <HAL_UART_IRQHandler+0xee>
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f043 0208 	orr.w	r2, r3, #8
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 811f 	beq.w	8006b72 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <HAL_UART_IRQHandler+0x11e>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f003 0320 	and.w	r3, r3, #32
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fa6d 	bl	8006e28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d102      	bne.n	8006976 <HAL_UART_IRQHandler+0x146>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d031      	beq.n	80069da <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9af 	bl	8006cda <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d023      	beq.n	80069d2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695a      	ldr	r2, [r3, #20]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006998:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d013      	beq.n	80069ca <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	4a77      	ldr	r2, [pc, #476]	; (8006b84 <HAL_UART_IRQHandler+0x354>)
 80069a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fd f858 	bl	8003a64 <HAL_DMA_Abort_IT>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d016      	beq.n	80069e8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069c8:	e00e      	b.n	80069e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8ee 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d0:	e00a      	b.n	80069e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f8ea 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069d8:	e006      	b.n	80069e8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f8e6 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069e6:	e0c4      	b.n	8006b72 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	bf00      	nop
    return;
 80069ea:	e0c2      	b.n	8006b72 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 80a1 	bne.w	8006b38 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	f003 0310 	and.w	r3, r3, #16
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 809b 	beq.w	8006b38 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8095 	beq.w	8006b38 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	60fb      	str	r3, [r7, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d04e      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006a3c:	8a3b      	ldrh	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8099 	beq.w	8006b76 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a48:	8a3a      	ldrh	r2, [r7, #16]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	f080 8093 	bcs.w	8006b76 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8a3a      	ldrh	r2, [r7, #16]
 8006a54:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	2b20      	cmp	r3, #32
 8006a5e:	d02b      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a6e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0201 	bic.w	r2, r2, #1
 8006a7e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695a      	ldr	r2, [r3, #20]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a8e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0210 	bic.w	r2, r2, #16
 8006aac:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f7fc ff9b 	bl	80039ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f878 	bl	8006bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006ace:	e052      	b.n	8006b76 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d048      	beq.n	8006b7a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006ae8:	8a7b      	ldrh	r3, [r7, #18]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d045      	beq.n	8006b7a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006afc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 0201 	bic.w	r2, r2, #1
 8006b0c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68da      	ldr	r2, [r3, #12]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f022 0210 	bic.w	r2, r2, #16
 8006b2a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b2c:	8a7b      	ldrh	r3, [r7, #18]
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f844 	bl	8006bbe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b36:	e020      	b.n	8006b7a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_UART_IRQHandler+0x324>
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f904 	bl	8006d5a <UART_Transmit_IT>
    return;
 8006b52:	e013      	b.n	8006b7c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <HAL_UART_IRQHandler+0x34c>
 8006b5e:	6a3b      	ldr	r3, [r7, #32]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d009      	beq.n	8006b7c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f945 	bl	8006df8 <UART_EndTransmit_IT>
    return;
 8006b6e:	bf00      	nop
 8006b70:	e004      	b.n	8006b7c <HAL_UART_IRQHandler+0x34c>
    return;
 8006b72:	bf00      	nop
 8006b74:	e002      	b.n	8006b7c <HAL_UART_IRQHandler+0x34c>
      return;
 8006b76:	bf00      	nop
 8006b78:	e000      	b.n	8006b7c <HAL_UART_IRQHandler+0x34c>
      return;
 8006b7a:	bf00      	nop
  }
}
 8006b7c:	3728      	adds	r7, #40	; 0x28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	08006d33 	.word	0x08006d33

08006b88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bc80      	pop	{r7}
 8006b98:	4770      	bx	lr

08006b9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b083      	sub	sp, #12
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ba2:	bf00      	nop
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bc80      	pop	{r7}
 8006bbc:	4770      	bx	lr

08006bbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr

08006bd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	603b      	str	r3, [r7, #0]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be4:	e02c      	b.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bec:	d028      	beq.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d007      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf4:	f7fc fdc2 	bl	800377c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d21d      	bcs.n	8006c40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68da      	ldr	r2, [r3, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	695a      	ldr	r2, [r3, #20]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e00f      	b.n	8006c60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	bf0c      	ite	eq
 8006c50:	2301      	moveq	r3, #1
 8006c52:	2300      	movne	r3, #0
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	461a      	mov	r2, r3
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d0c3      	beq.n	8006be6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4613      	mov	r3, r2
 8006c74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2222      	movs	r2, #34	; 0x22
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	695a      	ldr	r2, [r3, #20]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0201 	orr.w	r2, r2, #1
 8006cbc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68da      	ldr	r2, [r3, #12]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0220 	orr.w	r2, r2, #32
 8006ccc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cf0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d107      	bne.n	8006d1a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0210 	bic.w	r2, r2, #16
 8006d18:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bc80      	pop	{r7}
 8006d30:	4770      	bx	lr

08006d32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	f7ff ff2d 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b21      	cmp	r3, #33	; 0x21
 8006d6c:	d13e      	bne.n	8006dec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d76:	d114      	bne.n	8006da2 <UART_Transmit_IT+0x48>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d110      	bne.n	8006da2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	621a      	str	r2, [r3, #32]
 8006da0:	e008      	b.n	8006db4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	1c59      	adds	r1, r3, #1
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6211      	str	r1, [r2, #32]
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10f      	bne.n	8006de8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bc80      	pop	{r7}
 8006df6:	4770      	bx	lr

08006df8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff feb5 	bl	8006b88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b22      	cmp	r3, #34	; 0x22
 8006e3a:	f040 8099 	bne.w	8006f70 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e46:	d117      	bne.n	8006e78 <UART_Receive_IT+0x50>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d113      	bne.n	8006e78 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	1c9a      	adds	r2, r3, #2
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	629a      	str	r2, [r3, #40]	; 0x28
 8006e76:	e026      	b.n	8006ec6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8a:	d007      	beq.n	8006e9c <UART_Receive_IT+0x74>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <UART_Receive_IT+0x82>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d106      	bne.n	8006eaa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	701a      	strb	r2, [r3, #0]
 8006ea8:	e008      	b.n	8006ebc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d148      	bne.n	8006f6c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68da      	ldr	r2, [r3, #12]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0220 	bic.w	r2, r2, #32
 8006ee8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ef8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695a      	ldr	r2, [r3, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 0201 	bic.w	r2, r2, #1
 8006f08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2220      	movs	r2, #32
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d123      	bne.n	8006f62 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f022 0210 	bic.w	r2, r2, #16
 8006f2e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b10      	cmp	r3, #16
 8006f3c:	d10a      	bne.n	8006f54 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fe2f 	bl	8006bbe <HAL_UARTEx_RxEventCallback>
 8006f60:	e002      	b.n	8006f68 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fe19 	bl	8006b9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e002      	b.n	8006f72 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
	...

08006f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689a      	ldr	r2, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006fb6:	f023 030c 	bic.w	r3, r3, #12
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	699a      	ldr	r2, [r3, #24]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <UART_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fe4:	f7fe fdc6 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	e002      	b.n	8006ff2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fec:	f7fe fdae 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8006ff0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009a      	lsls	r2, r3, #2
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	fbb2 f3f3 	udiv	r3, r2, r3
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <UART_SetConfig+0x118>)
 800700a:	fba2 2303 	umull	r2, r3, r2, r3
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	0119      	lsls	r1, r3, #4
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009a      	lsls	r2, r3, #2
 800701c:	441a      	add	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	fbb2 f2f3 	udiv	r2, r2, r3
 8007028:	4b1a      	ldr	r3, [pc, #104]	; (8007094 <UART_SetConfig+0x118>)
 800702a:	fba3 0302 	umull	r0, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	2064      	movs	r0, #100	; 0x64
 8007032:	fb00 f303 	mul.w	r3, r0, r3
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	3332      	adds	r3, #50	; 0x32
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <UART_SetConfig+0x118>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007048:	4419      	add	r1, r3
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009a      	lsls	r2, r3, #2
 8007054:	441a      	add	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <UART_SetConfig+0x118>)
 8007062:	fba3 0302 	umull	r0, r3, r3, r2
 8007066:	095b      	lsrs	r3, r3, #5
 8007068:	2064      	movs	r0, #100	; 0x64
 800706a:	fb00 f303 	mul.w	r3, r0, r3
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	3332      	adds	r3, #50	; 0x32
 8007074:	4a07      	ldr	r2, [pc, #28]	; (8007094 <UART_SetConfig+0x118>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	095b      	lsrs	r3, r3, #5
 800707c:	f003 020f 	and.w	r2, r3, #15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	440a      	add	r2, r1
 8007086:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007088:	bf00      	nop
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	40013800 	.word	0x40013800
 8007094:	51eb851f 	.word	0x51eb851f

08007098 <atof>:
 8007098:	2100      	movs	r1, #0
 800709a:	f001 bac5 	b.w	8008628 <strtod>
	...

080070a0 <__errno>:
 80070a0:	4b01      	ldr	r3, [pc, #4]	; (80070a8 <__errno+0x8>)
 80070a2:	6818      	ldr	r0, [r3, #0]
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	2000002c 	.word	0x2000002c

080070ac <__libc_init_array>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	2500      	movs	r5, #0
 80070b0:	4e0c      	ldr	r6, [pc, #48]	; (80070e4 <__libc_init_array+0x38>)
 80070b2:	4c0d      	ldr	r4, [pc, #52]	; (80070e8 <__libc_init_array+0x3c>)
 80070b4:	1ba4      	subs	r4, r4, r6
 80070b6:	10a4      	asrs	r4, r4, #2
 80070b8:	42a5      	cmp	r5, r4
 80070ba:	d109      	bne.n	80070d0 <__libc_init_array+0x24>
 80070bc:	f004 fe7c 	bl	800bdb8 <_init>
 80070c0:	2500      	movs	r5, #0
 80070c2:	4e0a      	ldr	r6, [pc, #40]	; (80070ec <__libc_init_array+0x40>)
 80070c4:	4c0a      	ldr	r4, [pc, #40]	; (80070f0 <__libc_init_array+0x44>)
 80070c6:	1ba4      	subs	r4, r4, r6
 80070c8:	10a4      	asrs	r4, r4, #2
 80070ca:	42a5      	cmp	r5, r4
 80070cc:	d105      	bne.n	80070da <__libc_init_array+0x2e>
 80070ce:	bd70      	pop	{r4, r5, r6, pc}
 80070d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070d4:	4798      	blx	r3
 80070d6:	3501      	adds	r5, #1
 80070d8:	e7ee      	b.n	80070b8 <__libc_init_array+0xc>
 80070da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070de:	4798      	blx	r3
 80070e0:	3501      	adds	r5, #1
 80070e2:	e7f2      	b.n	80070ca <__libc_init_array+0x1e>
 80070e4:	0800c580 	.word	0x0800c580
 80070e8:	0800c580 	.word	0x0800c580
 80070ec:	0800c580 	.word	0x0800c580
 80070f0:	0800c584 	.word	0x0800c584

080070f4 <memset>:
 80070f4:	4603      	mov	r3, r0
 80070f6:	4402      	add	r2, r0
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d100      	bne.n	80070fe <memset+0xa>
 80070fc:	4770      	bx	lr
 80070fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007102:	e7f9      	b.n	80070f8 <memset+0x4>

08007104 <__cvt>:
 8007104:	2b00      	cmp	r3, #0
 8007106:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800710a:	461e      	mov	r6, r3
 800710c:	bfbb      	ittet	lt
 800710e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007112:	461e      	movlt	r6, r3
 8007114:	2300      	movge	r3, #0
 8007116:	232d      	movlt	r3, #45	; 0x2d
 8007118:	b088      	sub	sp, #32
 800711a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800711c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8007120:	f027 0720 	bic.w	r7, r7, #32
 8007124:	2f46      	cmp	r7, #70	; 0x46
 8007126:	4614      	mov	r4, r2
 8007128:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800712a:	700b      	strb	r3, [r1, #0]
 800712c:	d004      	beq.n	8007138 <__cvt+0x34>
 800712e:	2f45      	cmp	r7, #69	; 0x45
 8007130:	d100      	bne.n	8007134 <__cvt+0x30>
 8007132:	3501      	adds	r5, #1
 8007134:	2302      	movs	r3, #2
 8007136:	e000      	b.n	800713a <__cvt+0x36>
 8007138:	2303      	movs	r3, #3
 800713a:	aa07      	add	r2, sp, #28
 800713c:	9204      	str	r2, [sp, #16]
 800713e:	aa06      	add	r2, sp, #24
 8007140:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007144:	e9cd 3500 	strd	r3, r5, [sp]
 8007148:	4622      	mov	r2, r4
 800714a:	4633      	mov	r3, r6
 800714c:	f001 fb0c 	bl	8008768 <_dtoa_r>
 8007150:	2f47      	cmp	r7, #71	; 0x47
 8007152:	4680      	mov	r8, r0
 8007154:	d102      	bne.n	800715c <__cvt+0x58>
 8007156:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007158:	07db      	lsls	r3, r3, #31
 800715a:	d526      	bpl.n	80071aa <__cvt+0xa6>
 800715c:	2f46      	cmp	r7, #70	; 0x46
 800715e:	eb08 0905 	add.w	r9, r8, r5
 8007162:	d111      	bne.n	8007188 <__cvt+0x84>
 8007164:	f898 3000 	ldrb.w	r3, [r8]
 8007168:	2b30      	cmp	r3, #48	; 0x30
 800716a:	d10a      	bne.n	8007182 <__cvt+0x7e>
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4620      	mov	r0, r4
 8007172:	4631      	mov	r1, r6
 8007174:	f7f9 fc18 	bl	80009a8 <__aeabi_dcmpeq>
 8007178:	b918      	cbnz	r0, 8007182 <__cvt+0x7e>
 800717a:	f1c5 0501 	rsb	r5, r5, #1
 800717e:	f8ca 5000 	str.w	r5, [sl]
 8007182:	f8da 3000 	ldr.w	r3, [sl]
 8007186:	4499      	add	r9, r3
 8007188:	2200      	movs	r2, #0
 800718a:	2300      	movs	r3, #0
 800718c:	4620      	mov	r0, r4
 800718e:	4631      	mov	r1, r6
 8007190:	f7f9 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8007194:	b938      	cbnz	r0, 80071a6 <__cvt+0xa2>
 8007196:	2230      	movs	r2, #48	; 0x30
 8007198:	9b07      	ldr	r3, [sp, #28]
 800719a:	454b      	cmp	r3, r9
 800719c:	d205      	bcs.n	80071aa <__cvt+0xa6>
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	9107      	str	r1, [sp, #28]
 80071a2:	701a      	strb	r2, [r3, #0]
 80071a4:	e7f8      	b.n	8007198 <__cvt+0x94>
 80071a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80071aa:	4640      	mov	r0, r8
 80071ac:	9b07      	ldr	r3, [sp, #28]
 80071ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80071b0:	eba3 0308 	sub.w	r3, r3, r8
 80071b4:	6013      	str	r3, [r2, #0]
 80071b6:	b008      	add	sp, #32
 80071b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080071bc <__exponent>:
 80071bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071be:	2900      	cmp	r1, #0
 80071c0:	bfb4      	ite	lt
 80071c2:	232d      	movlt	r3, #45	; 0x2d
 80071c4:	232b      	movge	r3, #43	; 0x2b
 80071c6:	4604      	mov	r4, r0
 80071c8:	bfb8      	it	lt
 80071ca:	4249      	neglt	r1, r1
 80071cc:	2909      	cmp	r1, #9
 80071ce:	f804 2b02 	strb.w	r2, [r4], #2
 80071d2:	7043      	strb	r3, [r0, #1]
 80071d4:	dd21      	ble.n	800721a <__exponent+0x5e>
 80071d6:	f10d 0307 	add.w	r3, sp, #7
 80071da:	461f      	mov	r7, r3
 80071dc:	260a      	movs	r6, #10
 80071de:	fb91 f5f6 	sdiv	r5, r1, r6
 80071e2:	fb06 1115 	mls	r1, r6, r5, r1
 80071e6:	2d09      	cmp	r5, #9
 80071e8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80071ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80071f0:	f103 32ff 	add.w	r2, r3, #4294967295
 80071f4:	4629      	mov	r1, r5
 80071f6:	dc09      	bgt.n	800720c <__exponent+0x50>
 80071f8:	3130      	adds	r1, #48	; 0x30
 80071fa:	3b02      	subs	r3, #2
 80071fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007200:	42bb      	cmp	r3, r7
 8007202:	4622      	mov	r2, r4
 8007204:	d304      	bcc.n	8007210 <__exponent+0x54>
 8007206:	1a10      	subs	r0, r2, r0
 8007208:	b003      	add	sp, #12
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720c:	4613      	mov	r3, r2
 800720e:	e7e6      	b.n	80071de <__exponent+0x22>
 8007210:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007214:	f804 2b01 	strb.w	r2, [r4], #1
 8007218:	e7f2      	b.n	8007200 <__exponent+0x44>
 800721a:	2330      	movs	r3, #48	; 0x30
 800721c:	4419      	add	r1, r3
 800721e:	7083      	strb	r3, [r0, #2]
 8007220:	1d02      	adds	r2, r0, #4
 8007222:	70c1      	strb	r1, [r0, #3]
 8007224:	e7ef      	b.n	8007206 <__exponent+0x4a>
	...

08007228 <_printf_float>:
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	b091      	sub	sp, #68	; 0x44
 800722e:	460c      	mov	r4, r1
 8007230:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8007232:	4693      	mov	fp, r2
 8007234:	461e      	mov	r6, r3
 8007236:	4605      	mov	r5, r0
 8007238:	f002 fb74 	bl	8009924 <_localeconv_r>
 800723c:	6803      	ldr	r3, [r0, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	9309      	str	r3, [sp, #36]	; 0x24
 8007242:	f7f8 ff85 	bl	8000150 <strlen>
 8007246:	2300      	movs	r3, #0
 8007248:	930e      	str	r3, [sp, #56]	; 0x38
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	900a      	str	r0, [sp, #40]	; 0x28
 800724e:	3307      	adds	r3, #7
 8007250:	f023 0307 	bic.w	r3, r3, #7
 8007254:	f103 0208 	add.w	r2, r3, #8
 8007258:	f894 8018 	ldrb.w	r8, [r4, #24]
 800725c:	f8d4 a000 	ldr.w	sl, [r4]
 8007260:	603a      	str	r2, [r7, #0]
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800726a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800726e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007272:	930b      	str	r3, [sp, #44]	; 0x2c
 8007274:	f04f 32ff 	mov.w	r2, #4294967295
 8007278:	4ba6      	ldr	r3, [pc, #664]	; (8007514 <_printf_float+0x2ec>)
 800727a:	4638      	mov	r0, r7
 800727c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800727e:	f7f9 fbc5 	bl	8000a0c <__aeabi_dcmpun>
 8007282:	bb68      	cbnz	r0, 80072e0 <_printf_float+0xb8>
 8007284:	f04f 32ff 	mov.w	r2, #4294967295
 8007288:	4ba2      	ldr	r3, [pc, #648]	; (8007514 <_printf_float+0x2ec>)
 800728a:	4638      	mov	r0, r7
 800728c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800728e:	f7f9 fb9f 	bl	80009d0 <__aeabi_dcmple>
 8007292:	bb28      	cbnz	r0, 80072e0 <_printf_float+0xb8>
 8007294:	2200      	movs	r2, #0
 8007296:	2300      	movs	r3, #0
 8007298:	4638      	mov	r0, r7
 800729a:	4649      	mov	r1, r9
 800729c:	f7f9 fb8e 	bl	80009bc <__aeabi_dcmplt>
 80072a0:	b110      	cbz	r0, 80072a8 <_printf_float+0x80>
 80072a2:	232d      	movs	r3, #45	; 0x2d
 80072a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072a8:	4f9b      	ldr	r7, [pc, #620]	; (8007518 <_printf_float+0x2f0>)
 80072aa:	4b9c      	ldr	r3, [pc, #624]	; (800751c <_printf_float+0x2f4>)
 80072ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80072b0:	bf98      	it	ls
 80072b2:	461f      	movls	r7, r3
 80072b4:	2303      	movs	r3, #3
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	f02a 0304 	bic.w	r3, sl, #4
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	9600      	str	r6, [sp, #0]
 80072c4:	465b      	mov	r3, fp
 80072c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80072c8:	4621      	mov	r1, r4
 80072ca:	4628      	mov	r0, r5
 80072cc:	f000 f9e2 	bl	8007694 <_printf_common>
 80072d0:	3001      	adds	r0, #1
 80072d2:	f040 8090 	bne.w	80073f6 <_printf_float+0x1ce>
 80072d6:	f04f 30ff 	mov.w	r0, #4294967295
 80072da:	b011      	add	sp, #68	; 0x44
 80072dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e0:	463a      	mov	r2, r7
 80072e2:	464b      	mov	r3, r9
 80072e4:	4638      	mov	r0, r7
 80072e6:	4649      	mov	r1, r9
 80072e8:	f7f9 fb90 	bl	8000a0c <__aeabi_dcmpun>
 80072ec:	b110      	cbz	r0, 80072f4 <_printf_float+0xcc>
 80072ee:	4f8c      	ldr	r7, [pc, #560]	; (8007520 <_printf_float+0x2f8>)
 80072f0:	4b8c      	ldr	r3, [pc, #560]	; (8007524 <_printf_float+0x2fc>)
 80072f2:	e7db      	b.n	80072ac <_printf_float+0x84>
 80072f4:	6863      	ldr	r3, [r4, #4]
 80072f6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80072fa:	1c59      	adds	r1, r3, #1
 80072fc:	a80d      	add	r0, sp, #52	; 0x34
 80072fe:	a90e      	add	r1, sp, #56	; 0x38
 8007300:	d140      	bne.n	8007384 <_printf_float+0x15c>
 8007302:	2306      	movs	r3, #6
 8007304:	6063      	str	r3, [r4, #4]
 8007306:	f04f 0c00 	mov.w	ip, #0
 800730a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800730e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8007312:	6863      	ldr	r3, [r4, #4]
 8007314:	6022      	str	r2, [r4, #0]
 8007316:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	463a      	mov	r2, r7
 800731e:	464b      	mov	r3, r9
 8007320:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007324:	4628      	mov	r0, r5
 8007326:	f7ff feed 	bl	8007104 <__cvt>
 800732a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800732e:	2b47      	cmp	r3, #71	; 0x47
 8007330:	4607      	mov	r7, r0
 8007332:	d109      	bne.n	8007348 <_printf_float+0x120>
 8007334:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007336:	1cd8      	adds	r0, r3, #3
 8007338:	db02      	blt.n	8007340 <_printf_float+0x118>
 800733a:	6862      	ldr	r2, [r4, #4]
 800733c:	4293      	cmp	r3, r2
 800733e:	dd47      	ble.n	80073d0 <_printf_float+0x1a8>
 8007340:	f1a8 0802 	sub.w	r8, r8, #2
 8007344:	fa5f f888 	uxtb.w	r8, r8
 8007348:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800734c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800734e:	d824      	bhi.n	800739a <_printf_float+0x172>
 8007350:	3901      	subs	r1, #1
 8007352:	4642      	mov	r2, r8
 8007354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007358:	910d      	str	r1, [sp, #52]	; 0x34
 800735a:	f7ff ff2f 	bl	80071bc <__exponent>
 800735e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007360:	4681      	mov	r9, r0
 8007362:	1813      	adds	r3, r2, r0
 8007364:	2a01      	cmp	r2, #1
 8007366:	6123      	str	r3, [r4, #16]
 8007368:	dc02      	bgt.n	8007370 <_printf_float+0x148>
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	07d1      	lsls	r1, r2, #31
 800736e:	d501      	bpl.n	8007374 <_printf_float+0x14c>
 8007370:	3301      	adds	r3, #1
 8007372:	6123      	str	r3, [r4, #16]
 8007374:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0a2      	beq.n	80072c2 <_printf_float+0x9a>
 800737c:	232d      	movs	r3, #45	; 0x2d
 800737e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007382:	e79e      	b.n	80072c2 <_printf_float+0x9a>
 8007384:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007388:	f000 816e 	beq.w	8007668 <_printf_float+0x440>
 800738c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007390:	d1b9      	bne.n	8007306 <_printf_float+0xde>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1b7      	bne.n	8007306 <_printf_float+0xde>
 8007396:	2301      	movs	r3, #1
 8007398:	e7b4      	b.n	8007304 <_printf_float+0xdc>
 800739a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800739e:	d119      	bne.n	80073d4 <_printf_float+0x1ac>
 80073a0:	2900      	cmp	r1, #0
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	dd0c      	ble.n	80073c0 <_printf_float+0x198>
 80073a6:	6121      	str	r1, [r4, #16]
 80073a8:	b913      	cbnz	r3, 80073b0 <_printf_float+0x188>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	07d2      	lsls	r2, r2, #31
 80073ae:	d502      	bpl.n	80073b6 <_printf_float+0x18e>
 80073b0:	3301      	adds	r3, #1
 80073b2:	440b      	add	r3, r1
 80073b4:	6123      	str	r3, [r4, #16]
 80073b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	65a3      	str	r3, [r4, #88]	; 0x58
 80073be:	e7d9      	b.n	8007374 <_printf_float+0x14c>
 80073c0:	b913      	cbnz	r3, 80073c8 <_printf_float+0x1a0>
 80073c2:	6822      	ldr	r2, [r4, #0]
 80073c4:	07d0      	lsls	r0, r2, #31
 80073c6:	d501      	bpl.n	80073cc <_printf_float+0x1a4>
 80073c8:	3302      	adds	r3, #2
 80073ca:	e7f3      	b.n	80073b4 <_printf_float+0x18c>
 80073cc:	2301      	movs	r3, #1
 80073ce:	e7f1      	b.n	80073b4 <_printf_float+0x18c>
 80073d0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80073d4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80073d8:	4293      	cmp	r3, r2
 80073da:	db05      	blt.n	80073e8 <_printf_float+0x1c0>
 80073dc:	6822      	ldr	r2, [r4, #0]
 80073de:	6123      	str	r3, [r4, #16]
 80073e0:	07d1      	lsls	r1, r2, #31
 80073e2:	d5e8      	bpl.n	80073b6 <_printf_float+0x18e>
 80073e4:	3301      	adds	r3, #1
 80073e6:	e7e5      	b.n	80073b4 <_printf_float+0x18c>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bfcc      	ite	gt
 80073ec:	2301      	movgt	r3, #1
 80073ee:	f1c3 0302 	rsble	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	e7de      	b.n	80073b4 <_printf_float+0x18c>
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	055a      	lsls	r2, r3, #21
 80073fa:	d407      	bmi.n	800740c <_printf_float+0x1e4>
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	463a      	mov	r2, r7
 8007400:	4659      	mov	r1, fp
 8007402:	4628      	mov	r0, r5
 8007404:	47b0      	blx	r6
 8007406:	3001      	adds	r0, #1
 8007408:	d129      	bne.n	800745e <_printf_float+0x236>
 800740a:	e764      	b.n	80072d6 <_printf_float+0xae>
 800740c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8007410:	f240 80d7 	bls.w	80075c2 <_printf_float+0x39a>
 8007414:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007418:	2200      	movs	r2, #0
 800741a:	2300      	movs	r3, #0
 800741c:	f7f9 fac4 	bl	80009a8 <__aeabi_dcmpeq>
 8007420:	b388      	cbz	r0, 8007486 <_printf_float+0x25e>
 8007422:	2301      	movs	r3, #1
 8007424:	4a40      	ldr	r2, [pc, #256]	; (8007528 <_printf_float+0x300>)
 8007426:	4659      	mov	r1, fp
 8007428:	4628      	mov	r0, r5
 800742a:	47b0      	blx	r6
 800742c:	3001      	adds	r0, #1
 800742e:	f43f af52 	beq.w	80072d6 <_printf_float+0xae>
 8007432:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007436:	429a      	cmp	r2, r3
 8007438:	db02      	blt.n	8007440 <_printf_float+0x218>
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	07d8      	lsls	r0, r3, #31
 800743e:	d50e      	bpl.n	800745e <_printf_float+0x236>
 8007440:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007444:	4659      	mov	r1, fp
 8007446:	4628      	mov	r0, r5
 8007448:	47b0      	blx	r6
 800744a:	3001      	adds	r0, #1
 800744c:	f43f af43 	beq.w	80072d6 <_printf_float+0xae>
 8007450:	2700      	movs	r7, #0
 8007452:	f104 081a 	add.w	r8, r4, #26
 8007456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007458:	3b01      	subs	r3, #1
 800745a:	42bb      	cmp	r3, r7
 800745c:	dc09      	bgt.n	8007472 <_printf_float+0x24a>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	079f      	lsls	r7, r3, #30
 8007462:	f100 80fd 	bmi.w	8007660 <_printf_float+0x438>
 8007466:	68e0      	ldr	r0, [r4, #12]
 8007468:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800746a:	4298      	cmp	r0, r3
 800746c:	bfb8      	it	lt
 800746e:	4618      	movlt	r0, r3
 8007470:	e733      	b.n	80072da <_printf_float+0xb2>
 8007472:	2301      	movs	r3, #1
 8007474:	4642      	mov	r2, r8
 8007476:	4659      	mov	r1, fp
 8007478:	4628      	mov	r0, r5
 800747a:	47b0      	blx	r6
 800747c:	3001      	adds	r0, #1
 800747e:	f43f af2a 	beq.w	80072d6 <_printf_float+0xae>
 8007482:	3701      	adds	r7, #1
 8007484:	e7e7      	b.n	8007456 <_printf_float+0x22e>
 8007486:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007488:	2b00      	cmp	r3, #0
 800748a:	dc2b      	bgt.n	80074e4 <_printf_float+0x2bc>
 800748c:	2301      	movs	r3, #1
 800748e:	4a26      	ldr	r2, [pc, #152]	; (8007528 <_printf_float+0x300>)
 8007490:	4659      	mov	r1, fp
 8007492:	4628      	mov	r0, r5
 8007494:	47b0      	blx	r6
 8007496:	3001      	adds	r0, #1
 8007498:	f43f af1d 	beq.w	80072d6 <_printf_float+0xae>
 800749c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800749e:	b923      	cbnz	r3, 80074aa <_printf_float+0x282>
 80074a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074a2:	b913      	cbnz	r3, 80074aa <_printf_float+0x282>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d5d9      	bpl.n	800745e <_printf_float+0x236>
 80074aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ae:	4659      	mov	r1, fp
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b0      	blx	r6
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f af0e 	beq.w	80072d6 <_printf_float+0xae>
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	f104 091a 	add.w	r9, r4, #26
 80074c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c4:	425b      	negs	r3, r3
 80074c6:	4543      	cmp	r3, r8
 80074c8:	dc01      	bgt.n	80074ce <_printf_float+0x2a6>
 80074ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074cc:	e797      	b.n	80073fe <_printf_float+0x1d6>
 80074ce:	2301      	movs	r3, #1
 80074d0:	464a      	mov	r2, r9
 80074d2:	4659      	mov	r1, fp
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f aefc 	beq.w	80072d6 <_printf_float+0xae>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	e7ee      	b.n	80074c2 <_printf_float+0x29a>
 80074e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074e8:	429a      	cmp	r2, r3
 80074ea:	bfa8      	it	ge
 80074ec:	461a      	movge	r2, r3
 80074ee:	2a00      	cmp	r2, #0
 80074f0:	4690      	mov	r8, r2
 80074f2:	dd07      	ble.n	8007504 <_printf_float+0x2dc>
 80074f4:	4613      	mov	r3, r2
 80074f6:	4659      	mov	r1, fp
 80074f8:	463a      	mov	r2, r7
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b0      	blx	r6
 80074fe:	3001      	adds	r0, #1
 8007500:	f43f aee9 	beq.w	80072d6 <_printf_float+0xae>
 8007504:	f104 031a 	add.w	r3, r4, #26
 8007508:	f04f 0a00 	mov.w	sl, #0
 800750c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007510:	930b      	str	r3, [sp, #44]	; 0x2c
 8007512:	e015      	b.n	8007540 <_printf_float+0x318>
 8007514:	7fefffff 	.word	0x7fefffff
 8007518:	0800c0b4 	.word	0x0800c0b4
 800751c:	0800c0b0 	.word	0x0800c0b0
 8007520:	0800c0bc 	.word	0x0800c0bc
 8007524:	0800c0b8 	.word	0x0800c0b8
 8007528:	0800c0c0 	.word	0x0800c0c0
 800752c:	2301      	movs	r3, #1
 800752e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007530:	4659      	mov	r1, fp
 8007532:	4628      	mov	r0, r5
 8007534:	47b0      	blx	r6
 8007536:	3001      	adds	r0, #1
 8007538:	f43f aecd 	beq.w	80072d6 <_printf_float+0xae>
 800753c:	f10a 0a01 	add.w	sl, sl, #1
 8007540:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007544:	eba9 0308 	sub.w	r3, r9, r8
 8007548:	4553      	cmp	r3, sl
 800754a:	dcef      	bgt.n	800752c <_printf_float+0x304>
 800754c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007550:	429a      	cmp	r2, r3
 8007552:	444f      	add	r7, r9
 8007554:	db14      	blt.n	8007580 <_printf_float+0x358>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	07da      	lsls	r2, r3, #31
 800755a:	d411      	bmi.n	8007580 <_printf_float+0x358>
 800755c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800755e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007560:	eba3 0209 	sub.w	r2, r3, r9
 8007564:	eba3 0901 	sub.w	r9, r3, r1
 8007568:	4591      	cmp	r9, r2
 800756a:	bfa8      	it	ge
 800756c:	4691      	movge	r9, r2
 800756e:	f1b9 0f00 	cmp.w	r9, #0
 8007572:	dc0d      	bgt.n	8007590 <_printf_float+0x368>
 8007574:	2700      	movs	r7, #0
 8007576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800757a:	f104 081a 	add.w	r8, r4, #26
 800757e:	e018      	b.n	80075b2 <_printf_float+0x38a>
 8007580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007584:	4659      	mov	r1, fp
 8007586:	4628      	mov	r0, r5
 8007588:	47b0      	blx	r6
 800758a:	3001      	adds	r0, #1
 800758c:	d1e6      	bne.n	800755c <_printf_float+0x334>
 800758e:	e6a2      	b.n	80072d6 <_printf_float+0xae>
 8007590:	464b      	mov	r3, r9
 8007592:	463a      	mov	r2, r7
 8007594:	4659      	mov	r1, fp
 8007596:	4628      	mov	r0, r5
 8007598:	47b0      	blx	r6
 800759a:	3001      	adds	r0, #1
 800759c:	d1ea      	bne.n	8007574 <_printf_float+0x34c>
 800759e:	e69a      	b.n	80072d6 <_printf_float+0xae>
 80075a0:	2301      	movs	r3, #1
 80075a2:	4642      	mov	r2, r8
 80075a4:	4659      	mov	r1, fp
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b0      	blx	r6
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f ae93 	beq.w	80072d6 <_printf_float+0xae>
 80075b0:	3701      	adds	r7, #1
 80075b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80075b6:	1a9b      	subs	r3, r3, r2
 80075b8:	eba3 0309 	sub.w	r3, r3, r9
 80075bc:	42bb      	cmp	r3, r7
 80075be:	dcef      	bgt.n	80075a0 <_printf_float+0x378>
 80075c0:	e74d      	b.n	800745e <_printf_float+0x236>
 80075c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c4:	2a01      	cmp	r2, #1
 80075c6:	dc01      	bgt.n	80075cc <_printf_float+0x3a4>
 80075c8:	07db      	lsls	r3, r3, #31
 80075ca:	d538      	bpl.n	800763e <_printf_float+0x416>
 80075cc:	2301      	movs	r3, #1
 80075ce:	463a      	mov	r2, r7
 80075d0:	4659      	mov	r1, fp
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b0      	blx	r6
 80075d6:	3001      	adds	r0, #1
 80075d8:	f43f ae7d 	beq.w	80072d6 <_printf_float+0xae>
 80075dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075e0:	4659      	mov	r1, fp
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b0      	blx	r6
 80075e6:	3001      	adds	r0, #1
 80075e8:	f107 0701 	add.w	r7, r7, #1
 80075ec:	f43f ae73 	beq.w	80072d6 <_printf_float+0xae>
 80075f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f6:	2200      	movs	r2, #0
 80075f8:	f103 38ff 	add.w	r8, r3, #4294967295
 80075fc:	2300      	movs	r3, #0
 80075fe:	f7f9 f9d3 	bl	80009a8 <__aeabi_dcmpeq>
 8007602:	b9c0      	cbnz	r0, 8007636 <_printf_float+0x40e>
 8007604:	4643      	mov	r3, r8
 8007606:	463a      	mov	r2, r7
 8007608:	4659      	mov	r1, fp
 800760a:	4628      	mov	r0, r5
 800760c:	47b0      	blx	r6
 800760e:	3001      	adds	r0, #1
 8007610:	d10d      	bne.n	800762e <_printf_float+0x406>
 8007612:	e660      	b.n	80072d6 <_printf_float+0xae>
 8007614:	2301      	movs	r3, #1
 8007616:	4642      	mov	r2, r8
 8007618:	4659      	mov	r1, fp
 800761a:	4628      	mov	r0, r5
 800761c:	47b0      	blx	r6
 800761e:	3001      	adds	r0, #1
 8007620:	f43f ae59 	beq.w	80072d6 <_printf_float+0xae>
 8007624:	3701      	adds	r7, #1
 8007626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007628:	3b01      	subs	r3, #1
 800762a:	42bb      	cmp	r3, r7
 800762c:	dcf2      	bgt.n	8007614 <_printf_float+0x3ec>
 800762e:	464b      	mov	r3, r9
 8007630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007634:	e6e4      	b.n	8007400 <_printf_float+0x1d8>
 8007636:	2700      	movs	r7, #0
 8007638:	f104 081a 	add.w	r8, r4, #26
 800763c:	e7f3      	b.n	8007626 <_printf_float+0x3fe>
 800763e:	2301      	movs	r3, #1
 8007640:	e7e1      	b.n	8007606 <_printf_float+0x3de>
 8007642:	2301      	movs	r3, #1
 8007644:	4642      	mov	r2, r8
 8007646:	4659      	mov	r1, fp
 8007648:	4628      	mov	r0, r5
 800764a:	47b0      	blx	r6
 800764c:	3001      	adds	r0, #1
 800764e:	f43f ae42 	beq.w	80072d6 <_printf_float+0xae>
 8007652:	3701      	adds	r7, #1
 8007654:	68e3      	ldr	r3, [r4, #12]
 8007656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007658:	1a9b      	subs	r3, r3, r2
 800765a:	42bb      	cmp	r3, r7
 800765c:	dcf1      	bgt.n	8007642 <_printf_float+0x41a>
 800765e:	e702      	b.n	8007466 <_printf_float+0x23e>
 8007660:	2700      	movs	r7, #0
 8007662:	f104 0819 	add.w	r8, r4, #25
 8007666:	e7f5      	b.n	8007654 <_printf_float+0x42c>
 8007668:	2b00      	cmp	r3, #0
 800766a:	f43f ae94 	beq.w	8007396 <_printf_float+0x16e>
 800766e:	f04f 0c00 	mov.w	ip, #0
 8007672:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007676:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007680:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	463a      	mov	r2, r7
 8007688:	464b      	mov	r3, r9
 800768a:	4628      	mov	r0, r5
 800768c:	f7ff fd3a 	bl	8007104 <__cvt>
 8007690:	4607      	mov	r7, r0
 8007692:	e64f      	b.n	8007334 <_printf_float+0x10c>

08007694 <_printf_common>:
 8007694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007698:	4691      	mov	r9, r2
 800769a:	461f      	mov	r7, r3
 800769c:	688a      	ldr	r2, [r1, #8]
 800769e:	690b      	ldr	r3, [r1, #16]
 80076a0:	4606      	mov	r6, r0
 80076a2:	4293      	cmp	r3, r2
 80076a4:	bfb8      	it	lt
 80076a6:	4613      	movlt	r3, r2
 80076a8:	f8c9 3000 	str.w	r3, [r9]
 80076ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076b0:	460c      	mov	r4, r1
 80076b2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076b6:	b112      	cbz	r2, 80076be <_printf_common+0x2a>
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c9 3000 	str.w	r3, [r9]
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	0699      	lsls	r1, r3, #26
 80076c2:	bf42      	ittt	mi
 80076c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076c8:	3302      	addmi	r3, #2
 80076ca:	f8c9 3000 	strmi.w	r3, [r9]
 80076ce:	6825      	ldr	r5, [r4, #0]
 80076d0:	f015 0506 	ands.w	r5, r5, #6
 80076d4:	d107      	bne.n	80076e6 <_printf_common+0x52>
 80076d6:	f104 0a19 	add.w	sl, r4, #25
 80076da:	68e3      	ldr	r3, [r4, #12]
 80076dc:	f8d9 2000 	ldr.w	r2, [r9]
 80076e0:	1a9b      	subs	r3, r3, r2
 80076e2:	42ab      	cmp	r3, r5
 80076e4:	dc29      	bgt.n	800773a <_printf_common+0xa6>
 80076e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076ea:	6822      	ldr	r2, [r4, #0]
 80076ec:	3300      	adds	r3, #0
 80076ee:	bf18      	it	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	0692      	lsls	r2, r2, #26
 80076f4:	d42e      	bmi.n	8007754 <_printf_common+0xc0>
 80076f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076fa:	4639      	mov	r1, r7
 80076fc:	4630      	mov	r0, r6
 80076fe:	47c0      	blx	r8
 8007700:	3001      	adds	r0, #1
 8007702:	d021      	beq.n	8007748 <_printf_common+0xb4>
 8007704:	6823      	ldr	r3, [r4, #0]
 8007706:	68e5      	ldr	r5, [r4, #12]
 8007708:	f003 0306 	and.w	r3, r3, #6
 800770c:	2b04      	cmp	r3, #4
 800770e:	bf18      	it	ne
 8007710:	2500      	movne	r5, #0
 8007712:	f8d9 2000 	ldr.w	r2, [r9]
 8007716:	f04f 0900 	mov.w	r9, #0
 800771a:	bf08      	it	eq
 800771c:	1aad      	subeq	r5, r5, r2
 800771e:	68a3      	ldr	r3, [r4, #8]
 8007720:	6922      	ldr	r2, [r4, #16]
 8007722:	bf08      	it	eq
 8007724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007728:	4293      	cmp	r3, r2
 800772a:	bfc4      	itt	gt
 800772c:	1a9b      	subgt	r3, r3, r2
 800772e:	18ed      	addgt	r5, r5, r3
 8007730:	341a      	adds	r4, #26
 8007732:	454d      	cmp	r5, r9
 8007734:	d11a      	bne.n	800776c <_printf_common+0xd8>
 8007736:	2000      	movs	r0, #0
 8007738:	e008      	b.n	800774c <_printf_common+0xb8>
 800773a:	2301      	movs	r3, #1
 800773c:	4652      	mov	r2, sl
 800773e:	4639      	mov	r1, r7
 8007740:	4630      	mov	r0, r6
 8007742:	47c0      	blx	r8
 8007744:	3001      	adds	r0, #1
 8007746:	d103      	bne.n	8007750 <_printf_common+0xbc>
 8007748:	f04f 30ff 	mov.w	r0, #4294967295
 800774c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007750:	3501      	adds	r5, #1
 8007752:	e7c2      	b.n	80076da <_printf_common+0x46>
 8007754:	2030      	movs	r0, #48	; 0x30
 8007756:	18e1      	adds	r1, r4, r3
 8007758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007762:	4422      	add	r2, r4
 8007764:	3302      	adds	r3, #2
 8007766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800776a:	e7c4      	b.n	80076f6 <_printf_common+0x62>
 800776c:	2301      	movs	r3, #1
 800776e:	4622      	mov	r2, r4
 8007770:	4639      	mov	r1, r7
 8007772:	4630      	mov	r0, r6
 8007774:	47c0      	blx	r8
 8007776:	3001      	adds	r0, #1
 8007778:	d0e6      	beq.n	8007748 <_printf_common+0xb4>
 800777a:	f109 0901 	add.w	r9, r9, #1
 800777e:	e7d8      	b.n	8007732 <_printf_common+0x9e>

08007780 <_printf_i>:
 8007780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007784:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007788:	460c      	mov	r4, r1
 800778a:	7e09      	ldrb	r1, [r1, #24]
 800778c:	b085      	sub	sp, #20
 800778e:	296e      	cmp	r1, #110	; 0x6e
 8007790:	4617      	mov	r7, r2
 8007792:	4606      	mov	r6, r0
 8007794:	4698      	mov	r8, r3
 8007796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007798:	f000 80b3 	beq.w	8007902 <_printf_i+0x182>
 800779c:	d822      	bhi.n	80077e4 <_printf_i+0x64>
 800779e:	2963      	cmp	r1, #99	; 0x63
 80077a0:	d036      	beq.n	8007810 <_printf_i+0x90>
 80077a2:	d80a      	bhi.n	80077ba <_printf_i+0x3a>
 80077a4:	2900      	cmp	r1, #0
 80077a6:	f000 80b9 	beq.w	800791c <_printf_i+0x19c>
 80077aa:	2958      	cmp	r1, #88	; 0x58
 80077ac:	f000 8083 	beq.w	80078b6 <_printf_i+0x136>
 80077b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077b8:	e032      	b.n	8007820 <_printf_i+0xa0>
 80077ba:	2964      	cmp	r1, #100	; 0x64
 80077bc:	d001      	beq.n	80077c2 <_printf_i+0x42>
 80077be:	2969      	cmp	r1, #105	; 0x69
 80077c0:	d1f6      	bne.n	80077b0 <_printf_i+0x30>
 80077c2:	6820      	ldr	r0, [r4, #0]
 80077c4:	6813      	ldr	r3, [r2, #0]
 80077c6:	0605      	lsls	r5, r0, #24
 80077c8:	f103 0104 	add.w	r1, r3, #4
 80077cc:	d52a      	bpl.n	8007824 <_printf_i+0xa4>
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	da03      	bge.n	80077de <_printf_i+0x5e>
 80077d6:	222d      	movs	r2, #45	; 0x2d
 80077d8:	425b      	negs	r3, r3
 80077da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80077de:	486f      	ldr	r0, [pc, #444]	; (800799c <_printf_i+0x21c>)
 80077e0:	220a      	movs	r2, #10
 80077e2:	e039      	b.n	8007858 <_printf_i+0xd8>
 80077e4:	2973      	cmp	r1, #115	; 0x73
 80077e6:	f000 809d 	beq.w	8007924 <_printf_i+0x1a4>
 80077ea:	d808      	bhi.n	80077fe <_printf_i+0x7e>
 80077ec:	296f      	cmp	r1, #111	; 0x6f
 80077ee:	d020      	beq.n	8007832 <_printf_i+0xb2>
 80077f0:	2970      	cmp	r1, #112	; 0x70
 80077f2:	d1dd      	bne.n	80077b0 <_printf_i+0x30>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	f043 0320 	orr.w	r3, r3, #32
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	e003      	b.n	8007806 <_printf_i+0x86>
 80077fe:	2975      	cmp	r1, #117	; 0x75
 8007800:	d017      	beq.n	8007832 <_printf_i+0xb2>
 8007802:	2978      	cmp	r1, #120	; 0x78
 8007804:	d1d4      	bne.n	80077b0 <_printf_i+0x30>
 8007806:	2378      	movs	r3, #120	; 0x78
 8007808:	4865      	ldr	r0, [pc, #404]	; (80079a0 <_printf_i+0x220>)
 800780a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800780e:	e055      	b.n	80078bc <_printf_i+0x13c>
 8007810:	6813      	ldr	r3, [r2, #0]
 8007812:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007816:	1d19      	adds	r1, r3, #4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6011      	str	r1, [r2, #0]
 800781c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007820:	2301      	movs	r3, #1
 8007822:	e08c      	b.n	800793e <_printf_i+0x1be>
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f010 0f40 	tst.w	r0, #64	; 0x40
 800782a:	6011      	str	r1, [r2, #0]
 800782c:	bf18      	it	ne
 800782e:	b21b      	sxthne	r3, r3
 8007830:	e7cf      	b.n	80077d2 <_printf_i+0x52>
 8007832:	6813      	ldr	r3, [r2, #0]
 8007834:	6825      	ldr	r5, [r4, #0]
 8007836:	1d18      	adds	r0, r3, #4
 8007838:	6010      	str	r0, [r2, #0]
 800783a:	0628      	lsls	r0, r5, #24
 800783c:	d501      	bpl.n	8007842 <_printf_i+0xc2>
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	e002      	b.n	8007848 <_printf_i+0xc8>
 8007842:	0668      	lsls	r0, r5, #25
 8007844:	d5fb      	bpl.n	800783e <_printf_i+0xbe>
 8007846:	881b      	ldrh	r3, [r3, #0]
 8007848:	296f      	cmp	r1, #111	; 0x6f
 800784a:	bf14      	ite	ne
 800784c:	220a      	movne	r2, #10
 800784e:	2208      	moveq	r2, #8
 8007850:	4852      	ldr	r0, [pc, #328]	; (800799c <_printf_i+0x21c>)
 8007852:	2100      	movs	r1, #0
 8007854:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007858:	6865      	ldr	r5, [r4, #4]
 800785a:	2d00      	cmp	r5, #0
 800785c:	60a5      	str	r5, [r4, #8]
 800785e:	f2c0 8095 	blt.w	800798c <_printf_i+0x20c>
 8007862:	6821      	ldr	r1, [r4, #0]
 8007864:	f021 0104 	bic.w	r1, r1, #4
 8007868:	6021      	str	r1, [r4, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d13d      	bne.n	80078ea <_printf_i+0x16a>
 800786e:	2d00      	cmp	r5, #0
 8007870:	f040 808e 	bne.w	8007990 <_printf_i+0x210>
 8007874:	4665      	mov	r5, ip
 8007876:	2a08      	cmp	r2, #8
 8007878:	d10b      	bne.n	8007892 <_printf_i+0x112>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	07db      	lsls	r3, r3, #31
 800787e:	d508      	bpl.n	8007892 <_printf_i+0x112>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	6862      	ldr	r2, [r4, #4]
 8007884:	429a      	cmp	r2, r3
 8007886:	bfde      	ittt	le
 8007888:	2330      	movle	r3, #48	; 0x30
 800788a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800788e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007892:	ebac 0305 	sub.w	r3, ip, r5
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	f8cd 8000 	str.w	r8, [sp]
 800789c:	463b      	mov	r3, r7
 800789e:	aa03      	add	r2, sp, #12
 80078a0:	4621      	mov	r1, r4
 80078a2:	4630      	mov	r0, r6
 80078a4:	f7ff fef6 	bl	8007694 <_printf_common>
 80078a8:	3001      	adds	r0, #1
 80078aa:	d14d      	bne.n	8007948 <_printf_i+0x1c8>
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	b005      	add	sp, #20
 80078b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078b6:	4839      	ldr	r0, [pc, #228]	; (800799c <_printf_i+0x21c>)
 80078b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078bc:	6813      	ldr	r3, [r2, #0]
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	1d1d      	adds	r5, r3, #4
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6015      	str	r5, [r2, #0]
 80078c6:	060a      	lsls	r2, r1, #24
 80078c8:	d50b      	bpl.n	80078e2 <_printf_i+0x162>
 80078ca:	07ca      	lsls	r2, r1, #31
 80078cc:	bf44      	itt	mi
 80078ce:	f041 0120 	orrmi.w	r1, r1, #32
 80078d2:	6021      	strmi	r1, [r4, #0]
 80078d4:	b91b      	cbnz	r3, 80078de <_printf_i+0x15e>
 80078d6:	6822      	ldr	r2, [r4, #0]
 80078d8:	f022 0220 	bic.w	r2, r2, #32
 80078dc:	6022      	str	r2, [r4, #0]
 80078de:	2210      	movs	r2, #16
 80078e0:	e7b7      	b.n	8007852 <_printf_i+0xd2>
 80078e2:	064d      	lsls	r5, r1, #25
 80078e4:	bf48      	it	mi
 80078e6:	b29b      	uxthmi	r3, r3
 80078e8:	e7ef      	b.n	80078ca <_printf_i+0x14a>
 80078ea:	4665      	mov	r5, ip
 80078ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80078f0:	fb02 3311 	mls	r3, r2, r1, r3
 80078f4:	5cc3      	ldrb	r3, [r0, r3]
 80078f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078fa:	460b      	mov	r3, r1
 80078fc:	2900      	cmp	r1, #0
 80078fe:	d1f5      	bne.n	80078ec <_printf_i+0x16c>
 8007900:	e7b9      	b.n	8007876 <_printf_i+0xf6>
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	6825      	ldr	r5, [r4, #0]
 8007906:	1d18      	adds	r0, r3, #4
 8007908:	6961      	ldr	r1, [r4, #20]
 800790a:	6010      	str	r0, [r2, #0]
 800790c:	0628      	lsls	r0, r5, #24
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	d501      	bpl.n	8007916 <_printf_i+0x196>
 8007912:	6019      	str	r1, [r3, #0]
 8007914:	e002      	b.n	800791c <_printf_i+0x19c>
 8007916:	066a      	lsls	r2, r5, #25
 8007918:	d5fb      	bpl.n	8007912 <_printf_i+0x192>
 800791a:	8019      	strh	r1, [r3, #0]
 800791c:	2300      	movs	r3, #0
 800791e:	4665      	mov	r5, ip
 8007920:	6123      	str	r3, [r4, #16]
 8007922:	e7b9      	b.n	8007898 <_printf_i+0x118>
 8007924:	6813      	ldr	r3, [r2, #0]
 8007926:	1d19      	adds	r1, r3, #4
 8007928:	6011      	str	r1, [r2, #0]
 800792a:	681d      	ldr	r5, [r3, #0]
 800792c:	6862      	ldr	r2, [r4, #4]
 800792e:	2100      	movs	r1, #0
 8007930:	4628      	mov	r0, r5
 8007932:	f002 f81f 	bl	8009974 <memchr>
 8007936:	b108      	cbz	r0, 800793c <_printf_i+0x1bc>
 8007938:	1b40      	subs	r0, r0, r5
 800793a:	6060      	str	r0, [r4, #4]
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	6123      	str	r3, [r4, #16]
 8007940:	2300      	movs	r3, #0
 8007942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007946:	e7a7      	b.n	8007898 <_printf_i+0x118>
 8007948:	6923      	ldr	r3, [r4, #16]
 800794a:	462a      	mov	r2, r5
 800794c:	4639      	mov	r1, r7
 800794e:	4630      	mov	r0, r6
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d0aa      	beq.n	80078ac <_printf_i+0x12c>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	079b      	lsls	r3, r3, #30
 800795a:	d413      	bmi.n	8007984 <_printf_i+0x204>
 800795c:	68e0      	ldr	r0, [r4, #12]
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	4298      	cmp	r0, r3
 8007962:	bfb8      	it	lt
 8007964:	4618      	movlt	r0, r3
 8007966:	e7a3      	b.n	80078b0 <_printf_i+0x130>
 8007968:	2301      	movs	r3, #1
 800796a:	464a      	mov	r2, r9
 800796c:	4639      	mov	r1, r7
 800796e:	4630      	mov	r0, r6
 8007970:	47c0      	blx	r8
 8007972:	3001      	adds	r0, #1
 8007974:	d09a      	beq.n	80078ac <_printf_i+0x12c>
 8007976:	3501      	adds	r5, #1
 8007978:	68e3      	ldr	r3, [r4, #12]
 800797a:	9a03      	ldr	r2, [sp, #12]
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	42ab      	cmp	r3, r5
 8007980:	dcf2      	bgt.n	8007968 <_printf_i+0x1e8>
 8007982:	e7eb      	b.n	800795c <_printf_i+0x1dc>
 8007984:	2500      	movs	r5, #0
 8007986:	f104 0919 	add.w	r9, r4, #25
 800798a:	e7f5      	b.n	8007978 <_printf_i+0x1f8>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1ac      	bne.n	80078ea <_printf_i+0x16a>
 8007990:	7803      	ldrb	r3, [r0, #0]
 8007992:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800799a:	e76c      	b.n	8007876 <_printf_i+0xf6>
 800799c:	0800c0c2 	.word	0x0800c0c2
 80079a0:	0800c0d3 	.word	0x0800c0d3

080079a4 <siprintf>:
 80079a4:	b40e      	push	{r1, r2, r3}
 80079a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079aa:	b500      	push	{lr}
 80079ac:	b09c      	sub	sp, #112	; 0x70
 80079ae:	ab1d      	add	r3, sp, #116	; 0x74
 80079b0:	9002      	str	r0, [sp, #8]
 80079b2:	9006      	str	r0, [sp, #24]
 80079b4:	9107      	str	r1, [sp, #28]
 80079b6:	9104      	str	r1, [sp, #16]
 80079b8:	4808      	ldr	r0, [pc, #32]	; (80079dc <siprintf+0x38>)
 80079ba:	4909      	ldr	r1, [pc, #36]	; (80079e0 <siprintf+0x3c>)
 80079bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c0:	9105      	str	r1, [sp, #20]
 80079c2:	6800      	ldr	r0, [r0, #0]
 80079c4:	a902      	add	r1, sp, #8
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	f002 fcf4 	bl	800a3b4 <_svfiprintf_r>
 80079cc:	2200      	movs	r2, #0
 80079ce:	9b02      	ldr	r3, [sp, #8]
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	b01c      	add	sp, #112	; 0x70
 80079d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079d8:	b003      	add	sp, #12
 80079da:	4770      	bx	lr
 80079dc:	2000002c 	.word	0x2000002c
 80079e0:	ffff0208 	.word	0xffff0208

080079e4 <sulp>:
 80079e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e8:	460f      	mov	r7, r1
 80079ea:	4690      	mov	r8, r2
 80079ec:	f002 faa6 	bl	8009f3c <__ulp>
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	f1b8 0f00 	cmp.w	r8, #0
 80079f8:	d011      	beq.n	8007a1e <sulp+0x3a>
 80079fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	dd0b      	ble.n	8007a1e <sulp+0x3a>
 8007a06:	2400      	movs	r4, #0
 8007a08:	051b      	lsls	r3, r3, #20
 8007a0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a0e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fd5f 	bl	80004d8 <__aeabi_dmul>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007a28 <_strtod_l>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	461f      	mov	r7, r3
 8007a2e:	2300      	movs	r3, #0
 8007a30:	b0a1      	sub	sp, #132	; 0x84
 8007a32:	4683      	mov	fp, r0
 8007a34:	4638      	mov	r0, r7
 8007a36:	460e      	mov	r6, r1
 8007a38:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a3a:	931c      	str	r3, [sp, #112]	; 0x70
 8007a3c:	f001 ff70 	bl	8009920 <__localeconv_l>
 8007a40:	4680      	mov	r8, r0
 8007a42:	6800      	ldr	r0, [r0, #0]
 8007a44:	f7f8 fb84 	bl	8000150 <strlen>
 8007a48:	f04f 0900 	mov.w	r9, #0
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	f04f 0a00 	mov.w	sl, #0
 8007a52:	961b      	str	r6, [sp, #108]	; 0x6c
 8007a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a56:	781a      	ldrb	r2, [r3, #0]
 8007a58:	2a0d      	cmp	r2, #13
 8007a5a:	d832      	bhi.n	8007ac2 <_strtod_l+0x9a>
 8007a5c:	2a09      	cmp	r2, #9
 8007a5e:	d236      	bcs.n	8007ace <_strtod_l+0xa6>
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	d03e      	beq.n	8007ae2 <_strtod_l+0xba>
 8007a64:	2300      	movs	r3, #0
 8007a66:	930d      	str	r3, [sp, #52]	; 0x34
 8007a68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007a6a:	782b      	ldrb	r3, [r5, #0]
 8007a6c:	2b30      	cmp	r3, #48	; 0x30
 8007a6e:	f040 80ac 	bne.w	8007bca <_strtod_l+0x1a2>
 8007a72:	786b      	ldrb	r3, [r5, #1]
 8007a74:	2b58      	cmp	r3, #88	; 0x58
 8007a76:	d001      	beq.n	8007a7c <_strtod_l+0x54>
 8007a78:	2b78      	cmp	r3, #120	; 0x78
 8007a7a:	d167      	bne.n	8007b4c <_strtod_l+0x124>
 8007a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a7e:	9702      	str	r7, [sp, #8]
 8007a80:	9301      	str	r3, [sp, #4]
 8007a82:	ab1c      	add	r3, sp, #112	; 0x70
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4a89      	ldr	r2, [pc, #548]	; (8007cac <_strtod_l+0x284>)
 8007a88:	ab1d      	add	r3, sp, #116	; 0x74
 8007a8a:	a91b      	add	r1, sp, #108	; 0x6c
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f001 fc6f 	bl	8009370 <__gethex>
 8007a92:	f010 0407 	ands.w	r4, r0, #7
 8007a96:	4606      	mov	r6, r0
 8007a98:	d005      	beq.n	8007aa6 <_strtod_l+0x7e>
 8007a9a:	2c06      	cmp	r4, #6
 8007a9c:	d12b      	bne.n	8007af6 <_strtod_l+0xce>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	3501      	adds	r5, #1
 8007aa2:	951b      	str	r5, [sp, #108]	; 0x6c
 8007aa4:	930d      	str	r3, [sp, #52]	; 0x34
 8007aa6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f040 85a6 	bne.w	80085fa <_strtod_l+0xbd2>
 8007aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ab0:	b1e3      	cbz	r3, 8007aec <_strtod_l+0xc4>
 8007ab2:	464a      	mov	r2, r9
 8007ab4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	b021      	add	sp, #132	; 0x84
 8007abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac2:	2a2b      	cmp	r2, #43	; 0x2b
 8007ac4:	d015      	beq.n	8007af2 <_strtod_l+0xca>
 8007ac6:	2a2d      	cmp	r2, #45	; 0x2d
 8007ac8:	d004      	beq.n	8007ad4 <_strtod_l+0xac>
 8007aca:	2a20      	cmp	r2, #32
 8007acc:	d1ca      	bne.n	8007a64 <_strtod_l+0x3c>
 8007ace:	3301      	adds	r3, #1
 8007ad0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ad2:	e7bf      	b.n	8007a54 <_strtod_l+0x2c>
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	920d      	str	r2, [sp, #52]	; 0x34
 8007ad8:	1c5a      	adds	r2, r3, #1
 8007ada:	921b      	str	r2, [sp, #108]	; 0x6c
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1c2      	bne.n	8007a68 <_strtod_l+0x40>
 8007ae2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ae4:	961b      	str	r6, [sp, #108]	; 0x6c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f040 8585 	bne.w	80085f6 <_strtod_l+0xbce>
 8007aec:	464a      	mov	r2, r9
 8007aee:	4653      	mov	r3, sl
 8007af0:	e7e2      	b.n	8007ab8 <_strtod_l+0x90>
 8007af2:	2200      	movs	r2, #0
 8007af4:	e7ef      	b.n	8007ad6 <_strtod_l+0xae>
 8007af6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007af8:	b13a      	cbz	r2, 8007b0a <_strtod_l+0xe2>
 8007afa:	2135      	movs	r1, #53	; 0x35
 8007afc:	a81e      	add	r0, sp, #120	; 0x78
 8007afe:	f002 fb10 	bl	800a122 <__copybits>
 8007b02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b04:	4658      	mov	r0, fp
 8007b06:	f001 ff82 	bl	8009a0e <_Bfree>
 8007b0a:	3c01      	subs	r4, #1
 8007b0c:	2c04      	cmp	r4, #4
 8007b0e:	d806      	bhi.n	8007b1e <_strtod_l+0xf6>
 8007b10:	e8df f004 	tbb	[pc, r4]
 8007b14:	1714030a 	.word	0x1714030a
 8007b18:	0a          	.byte	0x0a
 8007b19:	00          	.byte	0x00
 8007b1a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8007b1e:	0731      	lsls	r1, r6, #28
 8007b20:	d5c1      	bpl.n	8007aa6 <_strtod_l+0x7e>
 8007b22:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8007b26:	e7be      	b.n	8007aa6 <_strtod_l+0x7e>
 8007b28:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007b2a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8007b2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b36:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8007b3a:	e7f0      	b.n	8007b1e <_strtod_l+0xf6>
 8007b3c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8007cb0 <_strtod_l+0x288>
 8007b40:	e7ed      	b.n	8007b1e <_strtod_l+0xf6>
 8007b42:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8007b46:	f04f 39ff 	mov.w	r9, #4294967295
 8007b4a:	e7e8      	b.n	8007b1e <_strtod_l+0xf6>
 8007b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	921b      	str	r2, [sp, #108]	; 0x6c
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b30      	cmp	r3, #48	; 0x30
 8007b56:	d0f9      	beq.n	8007b4c <_strtod_l+0x124>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0a4      	beq.n	8007aa6 <_strtod_l+0x7e>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	2500      	movs	r5, #0
 8007b60:	220a      	movs	r2, #10
 8007b62:	9307      	str	r3, [sp, #28]
 8007b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b66:	9506      	str	r5, [sp, #24]
 8007b68:	9308      	str	r3, [sp, #32]
 8007b6a:	9504      	str	r5, [sp, #16]
 8007b6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007b6e:	7807      	ldrb	r7, [r0, #0]
 8007b70:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007b74:	b2d9      	uxtb	r1, r3
 8007b76:	2909      	cmp	r1, #9
 8007b78:	d929      	bls.n	8007bce <_strtod_l+0x1a6>
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	f8d8 1000 	ldr.w	r1, [r8]
 8007b80:	f002 fd20 	bl	800a5c4 <strncmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	d031      	beq.n	8007bec <_strtod_l+0x1c4>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	463b      	mov	r3, r7
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	9c04      	ldr	r4, [sp, #16]
 8007b90:	9005      	str	r0, [sp, #20]
 8007b92:	2b65      	cmp	r3, #101	; 0x65
 8007b94:	d001      	beq.n	8007b9a <_strtod_l+0x172>
 8007b96:	2b45      	cmp	r3, #69	; 0x45
 8007b98:	d114      	bne.n	8007bc4 <_strtod_l+0x19c>
 8007b9a:	b924      	cbnz	r4, 8007ba6 <_strtod_l+0x17e>
 8007b9c:	b910      	cbnz	r0, 8007ba4 <_strtod_l+0x17c>
 8007b9e:	9b07      	ldr	r3, [sp, #28]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d09e      	beq.n	8007ae2 <_strtod_l+0xba>
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007ba8:	1c73      	adds	r3, r6, #1
 8007baa:	931b      	str	r3, [sp, #108]	; 0x6c
 8007bac:	7873      	ldrb	r3, [r6, #1]
 8007bae:	2b2b      	cmp	r3, #43	; 0x2b
 8007bb0:	d078      	beq.n	8007ca4 <_strtod_l+0x27c>
 8007bb2:	2b2d      	cmp	r3, #45	; 0x2d
 8007bb4:	d070      	beq.n	8007c98 <_strtod_l+0x270>
 8007bb6:	f04f 0c00 	mov.w	ip, #0
 8007bba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007bbe:	2f09      	cmp	r7, #9
 8007bc0:	d97c      	bls.n	8007cbc <_strtod_l+0x294>
 8007bc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8007bc4:	f04f 0e00 	mov.w	lr, #0
 8007bc8:	e09a      	b.n	8007d00 <_strtod_l+0x2d8>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	e7c7      	b.n	8007b5e <_strtod_l+0x136>
 8007bce:	9904      	ldr	r1, [sp, #16]
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	2908      	cmp	r1, #8
 8007bd4:	bfd7      	itett	le
 8007bd6:	9906      	ldrle	r1, [sp, #24]
 8007bd8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007bdc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007be0:	9306      	strle	r3, [sp, #24]
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	901b      	str	r0, [sp, #108]	; 0x6c
 8007be6:	3301      	adds	r3, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	e7bf      	b.n	8007b6c <_strtod_l+0x144>
 8007bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bee:	191a      	adds	r2, r3, r4
 8007bf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8007bf2:	9a04      	ldr	r2, [sp, #16]
 8007bf4:	5d1b      	ldrb	r3, [r3, r4]
 8007bf6:	2a00      	cmp	r2, #0
 8007bf8:	d037      	beq.n	8007c6a <_strtod_l+0x242>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	9c04      	ldr	r4, [sp, #16]
 8007bfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007c02:	2909      	cmp	r1, #9
 8007c04:	d913      	bls.n	8007c2e <_strtod_l+0x206>
 8007c06:	2101      	movs	r1, #1
 8007c08:	9105      	str	r1, [sp, #20]
 8007c0a:	e7c2      	b.n	8007b92 <_strtod_l+0x16a>
 8007c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c0e:	3001      	adds	r0, #1
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c14:	785b      	ldrb	r3, [r3, #1]
 8007c16:	2b30      	cmp	r3, #48	; 0x30
 8007c18:	d0f8      	beq.n	8007c0c <_strtod_l+0x1e4>
 8007c1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007c1e:	2a08      	cmp	r2, #8
 8007c20:	f200 84f0 	bhi.w	8008604 <_strtod_l+0xbdc>
 8007c24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007c26:	9208      	str	r2, [sp, #32]
 8007c28:	4602      	mov	r2, r0
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007c32:	f100 0101 	add.w	r1, r0, #1
 8007c36:	d012      	beq.n	8007c5e <_strtod_l+0x236>
 8007c38:	440a      	add	r2, r1
 8007c3a:	270a      	movs	r7, #10
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	eb00 0c04 	add.w	ip, r0, r4
 8007c42:	458c      	cmp	ip, r1
 8007c44:	d113      	bne.n	8007c6e <_strtod_l+0x246>
 8007c46:	1821      	adds	r1, r4, r0
 8007c48:	2908      	cmp	r1, #8
 8007c4a:	f104 0401 	add.w	r4, r4, #1
 8007c4e:	4404      	add	r4, r0
 8007c50:	dc19      	bgt.n	8007c86 <_strtod_l+0x25e>
 8007c52:	210a      	movs	r1, #10
 8007c54:	9b06      	ldr	r3, [sp, #24]
 8007c56:	fb01 e303 	mla	r3, r1, r3, lr
 8007c5a:	9306      	str	r3, [sp, #24]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007c60:	1c58      	adds	r0, r3, #1
 8007c62:	901b      	str	r0, [sp, #108]	; 0x6c
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	4608      	mov	r0, r1
 8007c68:	e7c9      	b.n	8007bfe <_strtod_l+0x1d6>
 8007c6a:	9804      	ldr	r0, [sp, #16]
 8007c6c:	e7d3      	b.n	8007c16 <_strtod_l+0x1ee>
 8007c6e:	2908      	cmp	r1, #8
 8007c70:	f101 0101 	add.w	r1, r1, #1
 8007c74:	dc03      	bgt.n	8007c7e <_strtod_l+0x256>
 8007c76:	9b06      	ldr	r3, [sp, #24]
 8007c78:	437b      	muls	r3, r7
 8007c7a:	9306      	str	r3, [sp, #24]
 8007c7c:	e7e1      	b.n	8007c42 <_strtod_l+0x21a>
 8007c7e:	2910      	cmp	r1, #16
 8007c80:	bfd8      	it	le
 8007c82:	437d      	mulle	r5, r7
 8007c84:	e7dd      	b.n	8007c42 <_strtod_l+0x21a>
 8007c86:	2c10      	cmp	r4, #16
 8007c88:	bfdc      	itt	le
 8007c8a:	210a      	movle	r1, #10
 8007c8c:	fb01 e505 	mlale	r5, r1, r5, lr
 8007c90:	e7e4      	b.n	8007c5c <_strtod_l+0x234>
 8007c92:	2301      	movs	r3, #1
 8007c94:	9305      	str	r3, [sp, #20]
 8007c96:	e781      	b.n	8007b9c <_strtod_l+0x174>
 8007c98:	f04f 0c01 	mov.w	ip, #1
 8007c9c:	1cb3      	adds	r3, r6, #2
 8007c9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ca0:	78b3      	ldrb	r3, [r6, #2]
 8007ca2:	e78a      	b.n	8007bba <_strtod_l+0x192>
 8007ca4:	f04f 0c00 	mov.w	ip, #0
 8007ca8:	e7f8      	b.n	8007c9c <_strtod_l+0x274>
 8007caa:	bf00      	nop
 8007cac:	0800c0e4 	.word	0x0800c0e4
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cb6:	1c5f      	adds	r7, r3, #1
 8007cb8:	971b      	str	r7, [sp, #108]	; 0x6c
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b30      	cmp	r3, #48	; 0x30
 8007cbe:	d0f9      	beq.n	8007cb4 <_strtod_l+0x28c>
 8007cc0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007cc4:	2f08      	cmp	r7, #8
 8007cc6:	f63f af7d 	bhi.w	8007bc4 <_strtod_l+0x19c>
 8007cca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007cce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cd4:	1c5f      	adds	r7, r3, #1
 8007cd6:	971b      	str	r7, [sp, #108]	; 0x6c
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007cde:	f1b8 0f09 	cmp.w	r8, #9
 8007ce2:	d937      	bls.n	8007d54 <_strtod_l+0x32c>
 8007ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ce6:	1a7f      	subs	r7, r7, r1
 8007ce8:	2f08      	cmp	r7, #8
 8007cea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007cee:	dc37      	bgt.n	8007d60 <_strtod_l+0x338>
 8007cf0:	45be      	cmp	lr, r7
 8007cf2:	bfa8      	it	ge
 8007cf4:	46be      	movge	lr, r7
 8007cf6:	f1bc 0f00 	cmp.w	ip, #0
 8007cfa:	d001      	beq.n	8007d00 <_strtod_l+0x2d8>
 8007cfc:	f1ce 0e00 	rsb	lr, lr, #0
 8007d00:	2c00      	cmp	r4, #0
 8007d02:	d151      	bne.n	8007da8 <_strtod_l+0x380>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	f47f aece 	bne.w	8007aa6 <_strtod_l+0x7e>
 8007d0a:	9a07      	ldr	r2, [sp, #28]
 8007d0c:	2a00      	cmp	r2, #0
 8007d0e:	f47f aeca 	bne.w	8007aa6 <_strtod_l+0x7e>
 8007d12:	9a05      	ldr	r2, [sp, #20]
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	f47f aee4 	bne.w	8007ae2 <_strtod_l+0xba>
 8007d1a:	2b4e      	cmp	r3, #78	; 0x4e
 8007d1c:	d027      	beq.n	8007d6e <_strtod_l+0x346>
 8007d1e:	dc21      	bgt.n	8007d64 <_strtod_l+0x33c>
 8007d20:	2b49      	cmp	r3, #73	; 0x49
 8007d22:	f47f aede 	bne.w	8007ae2 <_strtod_l+0xba>
 8007d26:	49a4      	ldr	r1, [pc, #656]	; (8007fb8 <_strtod_l+0x590>)
 8007d28:	a81b      	add	r0, sp, #108	; 0x6c
 8007d2a:	f001 fd55 	bl	80097d8 <__match>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f43f aed7 	beq.w	8007ae2 <_strtod_l+0xba>
 8007d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d36:	49a1      	ldr	r1, [pc, #644]	; (8007fbc <_strtod_l+0x594>)
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	a81b      	add	r0, sp, #108	; 0x6c
 8007d3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d3e:	f001 fd4b 	bl	80097d8 <__match>
 8007d42:	b910      	cbnz	r0, 8007d4a <_strtod_l+0x322>
 8007d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d46:	3301      	adds	r3, #1
 8007d48:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d4a:	f8df a284 	ldr.w	sl, [pc, #644]	; 8007fd0 <_strtod_l+0x5a8>
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	e6a8      	b.n	8007aa6 <_strtod_l+0x7e>
 8007d54:	210a      	movs	r1, #10
 8007d56:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007d5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d5e:	e7b8      	b.n	8007cd2 <_strtod_l+0x2aa>
 8007d60:	46be      	mov	lr, r7
 8007d62:	e7c8      	b.n	8007cf6 <_strtod_l+0x2ce>
 8007d64:	2b69      	cmp	r3, #105	; 0x69
 8007d66:	d0de      	beq.n	8007d26 <_strtod_l+0x2fe>
 8007d68:	2b6e      	cmp	r3, #110	; 0x6e
 8007d6a:	f47f aeba 	bne.w	8007ae2 <_strtod_l+0xba>
 8007d6e:	4994      	ldr	r1, [pc, #592]	; (8007fc0 <_strtod_l+0x598>)
 8007d70:	a81b      	add	r0, sp, #108	; 0x6c
 8007d72:	f001 fd31 	bl	80097d8 <__match>
 8007d76:	2800      	cmp	r0, #0
 8007d78:	f43f aeb3 	beq.w	8007ae2 <_strtod_l+0xba>
 8007d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b28      	cmp	r3, #40	; 0x28
 8007d82:	d10e      	bne.n	8007da2 <_strtod_l+0x37a>
 8007d84:	aa1e      	add	r2, sp, #120	; 0x78
 8007d86:	498f      	ldr	r1, [pc, #572]	; (8007fc4 <_strtod_l+0x59c>)
 8007d88:	a81b      	add	r0, sp, #108	; 0x6c
 8007d8a:	f001 fd39 	bl	8009800 <__hexnan>
 8007d8e:	2805      	cmp	r0, #5
 8007d90:	d107      	bne.n	8007da2 <_strtod_l+0x37a>
 8007d92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d94:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8007d98:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8007d9c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8007da0:	e681      	b.n	8007aa6 <_strtod_l+0x7e>
 8007da2:	f8df a234 	ldr.w	sl, [pc, #564]	; 8007fd8 <_strtod_l+0x5b0>
 8007da6:	e7d2      	b.n	8007d4e <_strtod_l+0x326>
 8007da8:	ebae 0302 	sub.w	r3, lr, r2
 8007dac:	9307      	str	r3, [sp, #28]
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	9806      	ldr	r0, [sp, #24]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bf08      	it	eq
 8007db6:	4623      	moveq	r3, r4
 8007db8:	2c10      	cmp	r4, #16
 8007dba:	9304      	str	r3, [sp, #16]
 8007dbc:	46a0      	mov	r8, r4
 8007dbe:	bfa8      	it	ge
 8007dc0:	f04f 0810 	movge.w	r8, #16
 8007dc4:	f7f8 fb0e 	bl	80003e4 <__aeabi_ui2d>
 8007dc8:	2c09      	cmp	r4, #9
 8007dca:	4681      	mov	r9, r0
 8007dcc:	468a      	mov	sl, r1
 8007dce:	dc13      	bgt.n	8007df8 <_strtod_l+0x3d0>
 8007dd0:	9b07      	ldr	r3, [sp, #28]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	f43f ae67 	beq.w	8007aa6 <_strtod_l+0x7e>
 8007dd8:	9b07      	ldr	r3, [sp, #28]
 8007dda:	dd7e      	ble.n	8007eda <_strtod_l+0x4b2>
 8007ddc:	2b16      	cmp	r3, #22
 8007dde:	dc65      	bgt.n	8007eac <_strtod_l+0x484>
 8007de0:	4a79      	ldr	r2, [pc, #484]	; (8007fc8 <_strtod_l+0x5a0>)
 8007de2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007de6:	464a      	mov	r2, r9
 8007de8:	e9de 0100 	ldrd	r0, r1, [lr]
 8007dec:	4653      	mov	r3, sl
 8007dee:	f7f8 fb73 	bl	80004d8 <__aeabi_dmul>
 8007df2:	4681      	mov	r9, r0
 8007df4:	468a      	mov	sl, r1
 8007df6:	e656      	b.n	8007aa6 <_strtod_l+0x7e>
 8007df8:	4b73      	ldr	r3, [pc, #460]	; (8007fc8 <_strtod_l+0x5a0>)
 8007dfa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007dfe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e02:	f7f8 fb69 	bl	80004d8 <__aeabi_dmul>
 8007e06:	4606      	mov	r6, r0
 8007e08:	4628      	mov	r0, r5
 8007e0a:	460f      	mov	r7, r1
 8007e0c:	f7f8 faea 	bl	80003e4 <__aeabi_ui2d>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 f9a8 	bl	800016c <__adddf3>
 8007e1c:	2c0f      	cmp	r4, #15
 8007e1e:	4681      	mov	r9, r0
 8007e20:	468a      	mov	sl, r1
 8007e22:	ddd5      	ble.n	8007dd0 <_strtod_l+0x3a8>
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	eba4 0808 	sub.w	r8, r4, r8
 8007e2a:	4498      	add	r8, r3
 8007e2c:	f1b8 0f00 	cmp.w	r8, #0
 8007e30:	f340 809a 	ble.w	8007f68 <_strtod_l+0x540>
 8007e34:	f018 030f 	ands.w	r3, r8, #15
 8007e38:	d00a      	beq.n	8007e50 <_strtod_l+0x428>
 8007e3a:	4963      	ldr	r1, [pc, #396]	; (8007fc8 <_strtod_l+0x5a0>)
 8007e3c:	464a      	mov	r2, r9
 8007e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e46:	4653      	mov	r3, sl
 8007e48:	f7f8 fb46 	bl	80004d8 <__aeabi_dmul>
 8007e4c:	4681      	mov	r9, r0
 8007e4e:	468a      	mov	sl, r1
 8007e50:	f038 080f 	bics.w	r8, r8, #15
 8007e54:	d077      	beq.n	8007f46 <_strtod_l+0x51e>
 8007e56:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007e5a:	dd4b      	ble.n	8007ef4 <_strtod_l+0x4cc>
 8007e5c:	f04f 0800 	mov.w	r8, #0
 8007e60:	f8cd 8010 	str.w	r8, [sp, #16]
 8007e64:	f8cd 8020 	str.w	r8, [sp, #32]
 8007e68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e6c:	2322      	movs	r3, #34	; 0x22
 8007e6e:	f04f 0900 	mov.w	r9, #0
 8007e72:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8007fd0 <_strtod_l+0x5a8>
 8007e76:	f8cb 3000 	str.w	r3, [fp]
 8007e7a:	9b08      	ldr	r3, [sp, #32]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f43f ae12 	beq.w	8007aa6 <_strtod_l+0x7e>
 8007e82:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e84:	4658      	mov	r0, fp
 8007e86:	f001 fdc2 	bl	8009a0e <_Bfree>
 8007e8a:	9906      	ldr	r1, [sp, #24]
 8007e8c:	4658      	mov	r0, fp
 8007e8e:	f001 fdbe 	bl	8009a0e <_Bfree>
 8007e92:	9904      	ldr	r1, [sp, #16]
 8007e94:	4658      	mov	r0, fp
 8007e96:	f001 fdba 	bl	8009a0e <_Bfree>
 8007e9a:	9908      	ldr	r1, [sp, #32]
 8007e9c:	4658      	mov	r0, fp
 8007e9e:	f001 fdb6 	bl	8009a0e <_Bfree>
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f001 fdb2 	bl	8009a0e <_Bfree>
 8007eaa:	e5fc      	b.n	8007aa6 <_strtod_l+0x7e>
 8007eac:	9a07      	ldr	r2, [sp, #28]
 8007eae:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	dbb6      	blt.n	8007e24 <_strtod_l+0x3fc>
 8007eb6:	4d44      	ldr	r5, [pc, #272]	; (8007fc8 <_strtod_l+0x5a0>)
 8007eb8:	f1c4 040f 	rsb	r4, r4, #15
 8007ebc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007ec0:	464a      	mov	r2, r9
 8007ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec6:	4653      	mov	r3, sl
 8007ec8:	f7f8 fb06 	bl	80004d8 <__aeabi_dmul>
 8007ecc:	9b07      	ldr	r3, [sp, #28]
 8007ece:	1b1c      	subs	r4, r3, r4
 8007ed0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007ed4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ed8:	e789      	b.n	8007dee <_strtod_l+0x3c6>
 8007eda:	f113 0f16 	cmn.w	r3, #22
 8007ede:	dba1      	blt.n	8007e24 <_strtod_l+0x3fc>
 8007ee0:	4a39      	ldr	r2, [pc, #228]	; (8007fc8 <_strtod_l+0x5a0>)
 8007ee2:	4648      	mov	r0, r9
 8007ee4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007ee8:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007eec:	4651      	mov	r1, sl
 8007eee:	f7f8 fc1d 	bl	800072c <__aeabi_ddiv>
 8007ef2:	e77e      	b.n	8007df2 <_strtod_l+0x3ca>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	4648      	mov	r0, r9
 8007ef8:	4651      	mov	r1, sl
 8007efa:	461d      	mov	r5, r3
 8007efc:	4e33      	ldr	r6, [pc, #204]	; (8007fcc <_strtod_l+0x5a4>)
 8007efe:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f02:	f1b8 0f01 	cmp.w	r8, #1
 8007f06:	dc21      	bgt.n	8007f4c <_strtod_l+0x524>
 8007f08:	b10b      	cbz	r3, 8007f0e <_strtod_l+0x4e6>
 8007f0a:	4681      	mov	r9, r0
 8007f0c:	468a      	mov	sl, r1
 8007f0e:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <_strtod_l+0x5a4>)
 8007f10:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007f14:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007f18:	464a      	mov	r2, r9
 8007f1a:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007f1e:	4653      	mov	r3, sl
 8007f20:	f7f8 fada 	bl	80004d8 <__aeabi_dmul>
 8007f24:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <_strtod_l+0x5a8>)
 8007f26:	460a      	mov	r2, r1
 8007f28:	400b      	ands	r3, r1
 8007f2a:	492a      	ldr	r1, [pc, #168]	; (8007fd4 <_strtod_l+0x5ac>)
 8007f2c:	4681      	mov	r9, r0
 8007f2e:	428b      	cmp	r3, r1
 8007f30:	d894      	bhi.n	8007e5c <_strtod_l+0x434>
 8007f32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f36:	428b      	cmp	r3, r1
 8007f38:	bf86      	itte	hi
 8007f3a:	f04f 39ff 	movhi.w	r9, #4294967295
 8007f3e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8007fdc <_strtod_l+0x5b4>
 8007f42:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007f46:	2300      	movs	r3, #0
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	e07b      	b.n	8008044 <_strtod_l+0x61c>
 8007f4c:	f018 0f01 	tst.w	r8, #1
 8007f50:	d006      	beq.n	8007f60 <_strtod_l+0x538>
 8007f52:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5a:	f7f8 fabd 	bl	80004d8 <__aeabi_dmul>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	3501      	adds	r5, #1
 8007f62:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f66:	e7cc      	b.n	8007f02 <_strtod_l+0x4da>
 8007f68:	d0ed      	beq.n	8007f46 <_strtod_l+0x51e>
 8007f6a:	f1c8 0800 	rsb	r8, r8, #0
 8007f6e:	f018 020f 	ands.w	r2, r8, #15
 8007f72:	d00a      	beq.n	8007f8a <_strtod_l+0x562>
 8007f74:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <_strtod_l+0x5a0>)
 8007f76:	4648      	mov	r0, r9
 8007f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f7c:	4651      	mov	r1, sl
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	f7f8 fbd3 	bl	800072c <__aeabi_ddiv>
 8007f86:	4681      	mov	r9, r0
 8007f88:	468a      	mov	sl, r1
 8007f8a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f8e:	d0da      	beq.n	8007f46 <_strtod_l+0x51e>
 8007f90:	f1b8 0f1f 	cmp.w	r8, #31
 8007f94:	dd24      	ble.n	8007fe0 <_strtod_l+0x5b8>
 8007f96:	f04f 0800 	mov.w	r8, #0
 8007f9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007f9e:	f8cd 8020 	str.w	r8, [sp, #32]
 8007fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fa6:	2322      	movs	r3, #34	; 0x22
 8007fa8:	f04f 0900 	mov.w	r9, #0
 8007fac:	f04f 0a00 	mov.w	sl, #0
 8007fb0:	f8cb 3000 	str.w	r3, [fp]
 8007fb4:	e761      	b.n	8007e7a <_strtod_l+0x452>
 8007fb6:	bf00      	nop
 8007fb8:	0800c0b5 	.word	0x0800c0b5
 8007fbc:	0800c13b 	.word	0x0800c13b
 8007fc0:	0800c0bd 	.word	0x0800c0bd
 8007fc4:	0800c0f8 	.word	0x0800c0f8
 8007fc8:	0800c178 	.word	0x0800c178
 8007fcc:	0800c150 	.word	0x0800c150
 8007fd0:	7ff00000 	.word	0x7ff00000
 8007fd4:	7ca00000 	.word	0x7ca00000
 8007fd8:	fff80000 	.word	0xfff80000
 8007fdc:	7fefffff 	.word	0x7fefffff
 8007fe0:	f018 0310 	ands.w	r3, r8, #16
 8007fe4:	bf18      	it	ne
 8007fe6:	236a      	movne	r3, #106	; 0x6a
 8007fe8:	4648      	mov	r0, r9
 8007fea:	9305      	str	r3, [sp, #20]
 8007fec:	4651      	mov	r1, sl
 8007fee:	2300      	movs	r3, #0
 8007ff0:	4da1      	ldr	r5, [pc, #644]	; (8008278 <_strtod_l+0x850>)
 8007ff2:	f1b8 0f00 	cmp.w	r8, #0
 8007ff6:	f300 8113 	bgt.w	8008220 <_strtod_l+0x7f8>
 8007ffa:	b10b      	cbz	r3, 8008000 <_strtod_l+0x5d8>
 8007ffc:	4681      	mov	r9, r0
 8007ffe:	468a      	mov	sl, r1
 8008000:	9b05      	ldr	r3, [sp, #20]
 8008002:	b1bb      	cbz	r3, 8008034 <_strtod_l+0x60c>
 8008004:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008008:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800800c:	2b00      	cmp	r3, #0
 800800e:	4651      	mov	r1, sl
 8008010:	dd10      	ble.n	8008034 <_strtod_l+0x60c>
 8008012:	2b1f      	cmp	r3, #31
 8008014:	f340 8110 	ble.w	8008238 <_strtod_l+0x810>
 8008018:	2b34      	cmp	r3, #52	; 0x34
 800801a:	bfd8      	it	le
 800801c:	f04f 32ff 	movle.w	r2, #4294967295
 8008020:	f04f 0900 	mov.w	r9, #0
 8008024:	bfcf      	iteee	gt
 8008026:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800802a:	3b20      	suble	r3, #32
 800802c:	fa02 f303 	lslle.w	r3, r2, r3
 8008030:	ea03 0a01 	andle.w	sl, r3, r1
 8008034:	2200      	movs	r2, #0
 8008036:	2300      	movs	r3, #0
 8008038:	4648      	mov	r0, r9
 800803a:	4651      	mov	r1, sl
 800803c:	f7f8 fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 8008040:	2800      	cmp	r0, #0
 8008042:	d1a8      	bne.n	8007f96 <_strtod_l+0x56e>
 8008044:	9b06      	ldr	r3, [sp, #24]
 8008046:	9a04      	ldr	r2, [sp, #16]
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	9908      	ldr	r1, [sp, #32]
 800804c:	4623      	mov	r3, r4
 800804e:	4658      	mov	r0, fp
 8008050:	f001 fd2f 	bl	8009ab2 <__s2b>
 8008054:	9008      	str	r0, [sp, #32]
 8008056:	2800      	cmp	r0, #0
 8008058:	f43f af00 	beq.w	8007e5c <_strtod_l+0x434>
 800805c:	9a07      	ldr	r2, [sp, #28]
 800805e:	9b07      	ldr	r3, [sp, #28]
 8008060:	2a00      	cmp	r2, #0
 8008062:	f1c3 0300 	rsb	r3, r3, #0
 8008066:	bfa8      	it	ge
 8008068:	2300      	movge	r3, #0
 800806a:	f04f 0800 	mov.w	r8, #0
 800806e:	930e      	str	r3, [sp, #56]	; 0x38
 8008070:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008074:	9316      	str	r3, [sp, #88]	; 0x58
 8008076:	f8cd 8010 	str.w	r8, [sp, #16]
 800807a:	9b08      	ldr	r3, [sp, #32]
 800807c:	4658      	mov	r0, fp
 800807e:	6859      	ldr	r1, [r3, #4]
 8008080:	f001 fc91 	bl	80099a6 <_Balloc>
 8008084:	9006      	str	r0, [sp, #24]
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f aef0 	beq.w	8007e6c <_strtod_l+0x444>
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	300c      	adds	r0, #12
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	f103 010c 	add.w	r1, r3, #12
 8008096:	3202      	adds	r2, #2
 8008098:	0092      	lsls	r2, r2, #2
 800809a:	f001 fc79 	bl	8009990 <memcpy>
 800809e:	ab1e      	add	r3, sp, #120	; 0x78
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	ab1d      	add	r3, sp, #116	; 0x74
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	464a      	mov	r2, r9
 80080a8:	4653      	mov	r3, sl
 80080aa:	4658      	mov	r0, fp
 80080ac:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80080b0:	f001 ffba 	bl	800a028 <__d2b>
 80080b4:	901c      	str	r0, [sp, #112]	; 0x70
 80080b6:	2800      	cmp	r0, #0
 80080b8:	f43f aed8 	beq.w	8007e6c <_strtod_l+0x444>
 80080bc:	2101      	movs	r1, #1
 80080be:	4658      	mov	r0, fp
 80080c0:	f001 fd83 	bl	8009bca <__i2b>
 80080c4:	9004      	str	r0, [sp, #16]
 80080c6:	4603      	mov	r3, r0
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f43f aecf 	beq.w	8007e6c <_strtod_l+0x444>
 80080ce:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80080d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	bfab      	itete	ge
 80080d6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80080d8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80080da:	18ee      	addge	r6, r5, r3
 80080dc:	1b5c      	sublt	r4, r3, r5
 80080de:	9b05      	ldr	r3, [sp, #20]
 80080e0:	bfa8      	it	ge
 80080e2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80080e4:	eba5 0503 	sub.w	r5, r5, r3
 80080e8:	4415      	add	r5, r2
 80080ea:	4b64      	ldr	r3, [pc, #400]	; (800827c <_strtod_l+0x854>)
 80080ec:	f105 35ff 	add.w	r5, r5, #4294967295
 80080f0:	bfb8      	it	lt
 80080f2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80080f4:	429d      	cmp	r5, r3
 80080f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080fa:	f280 80af 	bge.w	800825c <_strtod_l+0x834>
 80080fe:	1b5b      	subs	r3, r3, r5
 8008100:	2b1f      	cmp	r3, #31
 8008102:	eba2 0203 	sub.w	r2, r2, r3
 8008106:	f04f 0701 	mov.w	r7, #1
 800810a:	f300 809c 	bgt.w	8008246 <_strtod_l+0x81e>
 800810e:	2500      	movs	r5, #0
 8008110:	fa07 f303 	lsl.w	r3, r7, r3
 8008114:	930f      	str	r3, [sp, #60]	; 0x3c
 8008116:	18b7      	adds	r7, r6, r2
 8008118:	9b05      	ldr	r3, [sp, #20]
 800811a:	42be      	cmp	r6, r7
 800811c:	4414      	add	r4, r2
 800811e:	441c      	add	r4, r3
 8008120:	4633      	mov	r3, r6
 8008122:	bfa8      	it	ge
 8008124:	463b      	movge	r3, r7
 8008126:	42a3      	cmp	r3, r4
 8008128:	bfa8      	it	ge
 800812a:	4623      	movge	r3, r4
 800812c:	2b00      	cmp	r3, #0
 800812e:	bfc2      	ittt	gt
 8008130:	1aff      	subgt	r7, r7, r3
 8008132:	1ae4      	subgt	r4, r4, r3
 8008134:	1af6      	subgt	r6, r6, r3
 8008136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008138:	b1bb      	cbz	r3, 800816a <_strtod_l+0x742>
 800813a:	461a      	mov	r2, r3
 800813c:	9904      	ldr	r1, [sp, #16]
 800813e:	4658      	mov	r0, fp
 8008140:	f001 fde2 	bl	8009d08 <__pow5mult>
 8008144:	9004      	str	r0, [sp, #16]
 8008146:	2800      	cmp	r0, #0
 8008148:	f43f ae90 	beq.w	8007e6c <_strtod_l+0x444>
 800814c:	4601      	mov	r1, r0
 800814e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008150:	4658      	mov	r0, fp
 8008152:	f001 fd43 	bl	8009bdc <__multiply>
 8008156:	9009      	str	r0, [sp, #36]	; 0x24
 8008158:	2800      	cmp	r0, #0
 800815a:	f43f ae87 	beq.w	8007e6c <_strtod_l+0x444>
 800815e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008160:	4658      	mov	r0, fp
 8008162:	f001 fc54 	bl	8009a0e <_Bfree>
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	931c      	str	r3, [sp, #112]	; 0x70
 800816a:	2f00      	cmp	r7, #0
 800816c:	dc7a      	bgt.n	8008264 <_strtod_l+0x83c>
 800816e:	9b07      	ldr	r3, [sp, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd08      	ble.n	8008186 <_strtod_l+0x75e>
 8008174:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008176:	9906      	ldr	r1, [sp, #24]
 8008178:	4658      	mov	r0, fp
 800817a:	f001 fdc5 	bl	8009d08 <__pow5mult>
 800817e:	9006      	str	r0, [sp, #24]
 8008180:	2800      	cmp	r0, #0
 8008182:	f43f ae73 	beq.w	8007e6c <_strtod_l+0x444>
 8008186:	2c00      	cmp	r4, #0
 8008188:	dd08      	ble.n	800819c <_strtod_l+0x774>
 800818a:	4622      	mov	r2, r4
 800818c:	9906      	ldr	r1, [sp, #24]
 800818e:	4658      	mov	r0, fp
 8008190:	f001 fe08 	bl	8009da4 <__lshift>
 8008194:	9006      	str	r0, [sp, #24]
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f ae68 	beq.w	8007e6c <_strtod_l+0x444>
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd08      	ble.n	80081b2 <_strtod_l+0x78a>
 80081a0:	4632      	mov	r2, r6
 80081a2:	9904      	ldr	r1, [sp, #16]
 80081a4:	4658      	mov	r0, fp
 80081a6:	f001 fdfd 	bl	8009da4 <__lshift>
 80081aa:	9004      	str	r0, [sp, #16]
 80081ac:	2800      	cmp	r0, #0
 80081ae:	f43f ae5d 	beq.w	8007e6c <_strtod_l+0x444>
 80081b2:	9a06      	ldr	r2, [sp, #24]
 80081b4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80081b6:	4658      	mov	r0, fp
 80081b8:	f001 fe62 	bl	8009e80 <__mdiff>
 80081bc:	4680      	mov	r8, r0
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f ae54 	beq.w	8007e6c <_strtod_l+0x444>
 80081c4:	2400      	movs	r4, #0
 80081c6:	68c3      	ldr	r3, [r0, #12]
 80081c8:	9904      	ldr	r1, [sp, #16]
 80081ca:	60c4      	str	r4, [r0, #12]
 80081cc:	930c      	str	r3, [sp, #48]	; 0x30
 80081ce:	f001 fe3d 	bl	8009e4c <__mcmp>
 80081d2:	42a0      	cmp	r0, r4
 80081d4:	da54      	bge.n	8008280 <_strtod_l+0x858>
 80081d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081d8:	b9f3      	cbnz	r3, 8008218 <_strtod_l+0x7f0>
 80081da:	f1b9 0f00 	cmp.w	r9, #0
 80081de:	d11b      	bne.n	8008218 <_strtod_l+0x7f0>
 80081e0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80081e4:	b9c3      	cbnz	r3, 8008218 <_strtod_l+0x7f0>
 80081e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80081ea:	0d1b      	lsrs	r3, r3, #20
 80081ec:	051b      	lsls	r3, r3, #20
 80081ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081f2:	d911      	bls.n	8008218 <_strtod_l+0x7f0>
 80081f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80081f8:	b91b      	cbnz	r3, 8008202 <_strtod_l+0x7da>
 80081fa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	dd0a      	ble.n	8008218 <_strtod_l+0x7f0>
 8008202:	4641      	mov	r1, r8
 8008204:	2201      	movs	r2, #1
 8008206:	4658      	mov	r0, fp
 8008208:	f001 fdcc 	bl	8009da4 <__lshift>
 800820c:	9904      	ldr	r1, [sp, #16]
 800820e:	4680      	mov	r8, r0
 8008210:	f001 fe1c 	bl	8009e4c <__mcmp>
 8008214:	2800      	cmp	r0, #0
 8008216:	dc68      	bgt.n	80082ea <_strtod_l+0x8c2>
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d172      	bne.n	8008304 <_strtod_l+0x8dc>
 800821e:	e630      	b.n	8007e82 <_strtod_l+0x45a>
 8008220:	f018 0f01 	tst.w	r8, #1
 8008224:	d004      	beq.n	8008230 <_strtod_l+0x808>
 8008226:	e9d5 2300 	ldrd	r2, r3, [r5]
 800822a:	f7f8 f955 	bl	80004d8 <__aeabi_dmul>
 800822e:	2301      	movs	r3, #1
 8008230:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008234:	3508      	adds	r5, #8
 8008236:	e6dc      	b.n	8007ff2 <_strtod_l+0x5ca>
 8008238:	f04f 32ff 	mov.w	r2, #4294967295
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	ea03 0909 	and.w	r9, r3, r9
 8008244:	e6f6      	b.n	8008034 <_strtod_l+0x60c>
 8008246:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800824a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800824e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008252:	35e2      	adds	r5, #226	; 0xe2
 8008254:	fa07 f505 	lsl.w	r5, r7, r5
 8008258:	970f      	str	r7, [sp, #60]	; 0x3c
 800825a:	e75c      	b.n	8008116 <_strtod_l+0x6ee>
 800825c:	2301      	movs	r3, #1
 800825e:	2500      	movs	r5, #0
 8008260:	930f      	str	r3, [sp, #60]	; 0x3c
 8008262:	e758      	b.n	8008116 <_strtod_l+0x6ee>
 8008264:	463a      	mov	r2, r7
 8008266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008268:	4658      	mov	r0, fp
 800826a:	f001 fd9b 	bl	8009da4 <__lshift>
 800826e:	901c      	str	r0, [sp, #112]	; 0x70
 8008270:	2800      	cmp	r0, #0
 8008272:	f47f af7c 	bne.w	800816e <_strtod_l+0x746>
 8008276:	e5f9      	b.n	8007e6c <_strtod_l+0x444>
 8008278:	0800c110 	.word	0x0800c110
 800827c:	fffffc02 	.word	0xfffffc02
 8008280:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008284:	f040 8089 	bne.w	800839a <_strtod_l+0x972>
 8008288:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800828a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800828e:	b342      	cbz	r2, 80082e2 <_strtod_l+0x8ba>
 8008290:	4aaf      	ldr	r2, [pc, #700]	; (8008550 <_strtod_l+0xb28>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d156      	bne.n	8008344 <_strtod_l+0x91c>
 8008296:	9b05      	ldr	r3, [sp, #20]
 8008298:	4648      	mov	r0, r9
 800829a:	b1eb      	cbz	r3, 80082d8 <_strtod_l+0x8b0>
 800829c:	4653      	mov	r3, sl
 800829e:	4aad      	ldr	r2, [pc, #692]	; (8008554 <_strtod_l+0xb2c>)
 80082a0:	f04f 31ff 	mov.w	r1, #4294967295
 80082a4:	401a      	ands	r2, r3
 80082a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80082aa:	d818      	bhi.n	80082de <_strtod_l+0x8b6>
 80082ac:	0d12      	lsrs	r2, r2, #20
 80082ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80082b2:	fa01 f303 	lsl.w	r3, r1, r3
 80082b6:	4298      	cmp	r0, r3
 80082b8:	d144      	bne.n	8008344 <_strtod_l+0x91c>
 80082ba:	4ba7      	ldr	r3, [pc, #668]	; (8008558 <_strtod_l+0xb30>)
 80082bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082be:	429a      	cmp	r2, r3
 80082c0:	d102      	bne.n	80082c8 <_strtod_l+0x8a0>
 80082c2:	3001      	adds	r0, #1
 80082c4:	f43f add2 	beq.w	8007e6c <_strtod_l+0x444>
 80082c8:	4ba2      	ldr	r3, [pc, #648]	; (8008554 <_strtod_l+0xb2c>)
 80082ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082cc:	f04f 0900 	mov.w	r9, #0
 80082d0:	401a      	ands	r2, r3
 80082d2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80082d6:	e79f      	b.n	8008218 <_strtod_l+0x7f0>
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295
 80082dc:	e7eb      	b.n	80082b6 <_strtod_l+0x88e>
 80082de:	460b      	mov	r3, r1
 80082e0:	e7e9      	b.n	80082b6 <_strtod_l+0x88e>
 80082e2:	bb7b      	cbnz	r3, 8008344 <_strtod_l+0x91c>
 80082e4:	f1b9 0f00 	cmp.w	r9, #0
 80082e8:	d12c      	bne.n	8008344 <_strtod_l+0x91c>
 80082ea:	9905      	ldr	r1, [sp, #20]
 80082ec:	4653      	mov	r3, sl
 80082ee:	4a99      	ldr	r2, [pc, #612]	; (8008554 <_strtod_l+0xb2c>)
 80082f0:	b1f1      	cbz	r1, 8008330 <_strtod_l+0x908>
 80082f2:	ea02 010a 	and.w	r1, r2, sl
 80082f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80082fa:	dc19      	bgt.n	8008330 <_strtod_l+0x908>
 80082fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008300:	f77f ae51 	ble.w	8007fa6 <_strtod_l+0x57e>
 8008304:	2300      	movs	r3, #0
 8008306:	4a95      	ldr	r2, [pc, #596]	; (800855c <_strtod_l+0xb34>)
 8008308:	4648      	mov	r0, r9
 800830a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800830e:	4651      	mov	r1, sl
 8008310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008314:	f7f8 f8e0 	bl	80004d8 <__aeabi_dmul>
 8008318:	4681      	mov	r9, r0
 800831a:	468a      	mov	sl, r1
 800831c:	2900      	cmp	r1, #0
 800831e:	f47f adb0 	bne.w	8007e82 <_strtod_l+0x45a>
 8008322:	2800      	cmp	r0, #0
 8008324:	f47f adad 	bne.w	8007e82 <_strtod_l+0x45a>
 8008328:	2322      	movs	r3, #34	; 0x22
 800832a:	f8cb 3000 	str.w	r3, [fp]
 800832e:	e5a8      	b.n	8007e82 <_strtod_l+0x45a>
 8008330:	4013      	ands	r3, r2
 8008332:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008336:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800833a:	f04f 39ff 	mov.w	r9, #4294967295
 800833e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008342:	e769      	b.n	8008218 <_strtod_l+0x7f0>
 8008344:	b19d      	cbz	r5, 800836e <_strtod_l+0x946>
 8008346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008348:	421d      	tst	r5, r3
 800834a:	f43f af65 	beq.w	8008218 <_strtod_l+0x7f0>
 800834e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008350:	9a05      	ldr	r2, [sp, #20]
 8008352:	4648      	mov	r0, r9
 8008354:	4651      	mov	r1, sl
 8008356:	b173      	cbz	r3, 8008376 <_strtod_l+0x94e>
 8008358:	f7ff fb44 	bl	80079e4 <sulp>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008364:	f7f7 ff02 	bl	800016c <__adddf3>
 8008368:	4681      	mov	r9, r0
 800836a:	468a      	mov	sl, r1
 800836c:	e754      	b.n	8008218 <_strtod_l+0x7f0>
 800836e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008370:	ea13 0f09 	tst.w	r3, r9
 8008374:	e7e9      	b.n	800834a <_strtod_l+0x922>
 8008376:	f7ff fb35 	bl	80079e4 <sulp>
 800837a:	4602      	mov	r2, r0
 800837c:	460b      	mov	r3, r1
 800837e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008382:	f7f7 fef1 	bl	8000168 <__aeabi_dsub>
 8008386:	2200      	movs	r2, #0
 8008388:	2300      	movs	r3, #0
 800838a:	4681      	mov	r9, r0
 800838c:	468a      	mov	sl, r1
 800838e:	f7f8 fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 8008392:	2800      	cmp	r0, #0
 8008394:	f47f ae07 	bne.w	8007fa6 <_strtod_l+0x57e>
 8008398:	e73e      	b.n	8008218 <_strtod_l+0x7f0>
 800839a:	9904      	ldr	r1, [sp, #16]
 800839c:	4640      	mov	r0, r8
 800839e:	f001 fe92 	bl	800a0c6 <__ratio>
 80083a2:	2200      	movs	r2, #0
 80083a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083a8:	4606      	mov	r6, r0
 80083aa:	460f      	mov	r7, r1
 80083ac:	f7f8 fb10 	bl	80009d0 <__aeabi_dcmple>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	d075      	beq.n	80084a0 <_strtod_l+0xa78>
 80083b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d047      	beq.n	800844a <_strtod_l+0xa22>
 80083ba:	2600      	movs	r6, #0
 80083bc:	4f68      	ldr	r7, [pc, #416]	; (8008560 <_strtod_l+0xb38>)
 80083be:	4d68      	ldr	r5, [pc, #416]	; (8008560 <_strtod_l+0xb38>)
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083c6:	0d1b      	lsrs	r3, r3, #20
 80083c8:	051b      	lsls	r3, r3, #20
 80083ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80083cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083ce:	4b65      	ldr	r3, [pc, #404]	; (8008564 <_strtod_l+0xb3c>)
 80083d0:	429a      	cmp	r2, r3
 80083d2:	f040 80cf 	bne.w	8008574 <_strtod_l+0xb4c>
 80083d6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80083da:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80083de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083e0:	4648      	mov	r0, r9
 80083e2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80083e6:	4651      	mov	r1, sl
 80083e8:	f001 fda8 	bl	8009f3c <__ulp>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4630      	mov	r0, r6
 80083f2:	4639      	mov	r1, r7
 80083f4:	f7f8 f870 	bl	80004d8 <__aeabi_dmul>
 80083f8:	464a      	mov	r2, r9
 80083fa:	4653      	mov	r3, sl
 80083fc:	f7f7 feb6 	bl	800016c <__adddf3>
 8008400:	460b      	mov	r3, r1
 8008402:	4954      	ldr	r1, [pc, #336]	; (8008554 <_strtod_l+0xb2c>)
 8008404:	4a58      	ldr	r2, [pc, #352]	; (8008568 <_strtod_l+0xb40>)
 8008406:	4019      	ands	r1, r3
 8008408:	4291      	cmp	r1, r2
 800840a:	4681      	mov	r9, r0
 800840c:	d95e      	bls.n	80084cc <_strtod_l+0xaa4>
 800840e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008410:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008414:	4293      	cmp	r3, r2
 8008416:	d103      	bne.n	8008420 <_strtod_l+0x9f8>
 8008418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800841a:	3301      	adds	r3, #1
 800841c:	f43f ad26 	beq.w	8007e6c <_strtod_l+0x444>
 8008420:	f04f 39ff 	mov.w	r9, #4294967295
 8008424:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008558 <_strtod_l+0xb30>
 8008428:	991c      	ldr	r1, [sp, #112]	; 0x70
 800842a:	4658      	mov	r0, fp
 800842c:	f001 faef 	bl	8009a0e <_Bfree>
 8008430:	9906      	ldr	r1, [sp, #24]
 8008432:	4658      	mov	r0, fp
 8008434:	f001 faeb 	bl	8009a0e <_Bfree>
 8008438:	9904      	ldr	r1, [sp, #16]
 800843a:	4658      	mov	r0, fp
 800843c:	f001 fae7 	bl	8009a0e <_Bfree>
 8008440:	4641      	mov	r1, r8
 8008442:	4658      	mov	r0, fp
 8008444:	f001 fae3 	bl	8009a0e <_Bfree>
 8008448:	e617      	b.n	800807a <_strtod_l+0x652>
 800844a:	f1b9 0f00 	cmp.w	r9, #0
 800844e:	d119      	bne.n	8008484 <_strtod_l+0xa5c>
 8008450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008456:	b9e3      	cbnz	r3, 8008492 <_strtod_l+0xa6a>
 8008458:	2200      	movs	r2, #0
 800845a:	4b41      	ldr	r3, [pc, #260]	; (8008560 <_strtod_l+0xb38>)
 800845c:	4630      	mov	r0, r6
 800845e:	4639      	mov	r1, r7
 8008460:	f7f8 faac 	bl	80009bc <__aeabi_dcmplt>
 8008464:	b9c8      	cbnz	r0, 800849a <_strtod_l+0xa72>
 8008466:	2200      	movs	r2, #0
 8008468:	4b40      	ldr	r3, [pc, #256]	; (800856c <_strtod_l+0xb44>)
 800846a:	4630      	mov	r0, r6
 800846c:	4639      	mov	r1, r7
 800846e:	f7f8 f833 	bl	80004d8 <__aeabi_dmul>
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800847a:	9418      	str	r4, [sp, #96]	; 0x60
 800847c:	9319      	str	r3, [sp, #100]	; 0x64
 800847e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008482:	e79d      	b.n	80083c0 <_strtod_l+0x998>
 8008484:	f1b9 0f01 	cmp.w	r9, #1
 8008488:	d103      	bne.n	8008492 <_strtod_l+0xa6a>
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	2b00      	cmp	r3, #0
 800848e:	f43f ad8a 	beq.w	8007fa6 <_strtod_l+0x57e>
 8008492:	2600      	movs	r6, #0
 8008494:	4f36      	ldr	r7, [pc, #216]	; (8008570 <_strtod_l+0xb48>)
 8008496:	2400      	movs	r4, #0
 8008498:	e791      	b.n	80083be <_strtod_l+0x996>
 800849a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800849c:	4d33      	ldr	r5, [pc, #204]	; (800856c <_strtod_l+0xb44>)
 800849e:	e7ea      	b.n	8008476 <_strtod_l+0xa4e>
 80084a0:	4b32      	ldr	r3, [pc, #200]	; (800856c <_strtod_l+0xb44>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	4630      	mov	r0, r6
 80084a6:	4639      	mov	r1, r7
 80084a8:	f7f8 f816 	bl	80004d8 <__aeabi_dmul>
 80084ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ae:	4604      	mov	r4, r0
 80084b0:	460d      	mov	r5, r1
 80084b2:	b933      	cbnz	r3, 80084c2 <_strtod_l+0xa9a>
 80084b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084b8:	9010      	str	r0, [sp, #64]	; 0x40
 80084ba:	9311      	str	r3, [sp, #68]	; 0x44
 80084bc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80084c0:	e77e      	b.n	80083c0 <_strtod_l+0x998>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80084ca:	e7f7      	b.n	80084bc <_strtod_l+0xa94>
 80084cc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80084d0:	9b05      	ldr	r3, [sp, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1a8      	bne.n	8008428 <_strtod_l+0xa00>
 80084d6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80084da:	0d1b      	lsrs	r3, r3, #20
 80084dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80084de:	051b      	lsls	r3, r3, #20
 80084e0:	429a      	cmp	r2, r3
 80084e2:	4656      	mov	r6, sl
 80084e4:	d1a0      	bne.n	8008428 <_strtod_l+0xa00>
 80084e6:	4629      	mov	r1, r5
 80084e8:	4620      	mov	r0, r4
 80084ea:	f7f8 faa5 	bl	8000a38 <__aeabi_d2iz>
 80084ee:	f7f7 ff89 	bl	8000404 <__aeabi_i2d>
 80084f2:	460b      	mov	r3, r1
 80084f4:	4602      	mov	r2, r0
 80084f6:	4629      	mov	r1, r5
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7f7 fe35 	bl	8000168 <__aeabi_dsub>
 80084fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	b933      	cbnz	r3, 8008514 <_strtod_l+0xaec>
 8008506:	f1b9 0f00 	cmp.w	r9, #0
 800850a:	d103      	bne.n	8008514 <_strtod_l+0xaec>
 800850c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008510:	2e00      	cmp	r6, #0
 8008512:	d06a      	beq.n	80085ea <_strtod_l+0xbc2>
 8008514:	a30a      	add	r3, pc, #40	; (adr r3, 8008540 <_strtod_l+0xb18>)
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	4620      	mov	r0, r4
 800851c:	4629      	mov	r1, r5
 800851e:	f7f8 fa4d 	bl	80009bc <__aeabi_dcmplt>
 8008522:	2800      	cmp	r0, #0
 8008524:	f47f acad 	bne.w	8007e82 <_strtod_l+0x45a>
 8008528:	a307      	add	r3, pc, #28	; (adr r3, 8008548 <_strtod_l+0xb20>)
 800852a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852e:	4620      	mov	r0, r4
 8008530:	4629      	mov	r1, r5
 8008532:	f7f8 fa61 	bl	80009f8 <__aeabi_dcmpgt>
 8008536:	2800      	cmp	r0, #0
 8008538:	f43f af76 	beq.w	8008428 <_strtod_l+0xa00>
 800853c:	e4a1      	b.n	8007e82 <_strtod_l+0x45a>
 800853e:	bf00      	nop
 8008540:	94a03595 	.word	0x94a03595
 8008544:	3fdfffff 	.word	0x3fdfffff
 8008548:	35afe535 	.word	0x35afe535
 800854c:	3fe00000 	.word	0x3fe00000
 8008550:	000fffff 	.word	0x000fffff
 8008554:	7ff00000 	.word	0x7ff00000
 8008558:	7fefffff 	.word	0x7fefffff
 800855c:	39500000 	.word	0x39500000
 8008560:	3ff00000 	.word	0x3ff00000
 8008564:	7fe00000 	.word	0x7fe00000
 8008568:	7c9fffff 	.word	0x7c9fffff
 800856c:	3fe00000 	.word	0x3fe00000
 8008570:	bff00000 	.word	0xbff00000
 8008574:	9b05      	ldr	r3, [sp, #20]
 8008576:	b313      	cbz	r3, 80085be <_strtod_l+0xb96>
 8008578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800857a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800857e:	d81e      	bhi.n	80085be <_strtod_l+0xb96>
 8008580:	a325      	add	r3, pc, #148	; (adr r3, 8008618 <_strtod_l+0xbf0>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 fa21 	bl	80009d0 <__aeabi_dcmple>
 800858e:	b190      	cbz	r0, 80085b6 <_strtod_l+0xb8e>
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f7f8 fa78 	bl	8000a88 <__aeabi_d2uiz>
 8008598:	2800      	cmp	r0, #0
 800859a:	bf08      	it	eq
 800859c:	2001      	moveq	r0, #1
 800859e:	f7f7 ff21 	bl	80003e4 <__aeabi_ui2d>
 80085a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085a4:	4604      	mov	r4, r0
 80085a6:	460d      	mov	r5, r1
 80085a8:	b9d3      	cbnz	r3, 80085e0 <_strtod_l+0xbb8>
 80085aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085ae:	9012      	str	r0, [sp, #72]	; 0x48
 80085b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80085b2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80085b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80085b8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80085bc:	1a9f      	subs	r7, r3, r2
 80085be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085c2:	f001 fcbb 	bl	8009f3c <__ulp>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f7 ff83 	bl	80004d8 <__aeabi_dmul>
 80085d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085d6:	f7f7 fdc9 	bl	800016c <__adddf3>
 80085da:	4681      	mov	r9, r0
 80085dc:	468a      	mov	sl, r1
 80085de:	e777      	b.n	80084d0 <_strtod_l+0xaa8>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80085e8:	e7e3      	b.n	80085b2 <_strtod_l+0xb8a>
 80085ea:	a30d      	add	r3, pc, #52	; (adr r3, 8008620 <_strtod_l+0xbf8>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f8 f9e4 	bl	80009bc <__aeabi_dcmplt>
 80085f4:	e79f      	b.n	8008536 <_strtod_l+0xb0e>
 80085f6:	2300      	movs	r3, #0
 80085f8:	930d      	str	r3, [sp, #52]	; 0x34
 80085fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	f7ff ba55 	b.w	8007aae <_strtod_l+0x86>
 8008604:	2b65      	cmp	r3, #101	; 0x65
 8008606:	f04f 0200 	mov.w	r2, #0
 800860a:	f43f ab42 	beq.w	8007c92 <_strtod_l+0x26a>
 800860e:	2101      	movs	r1, #1
 8008610:	4614      	mov	r4, r2
 8008612:	9105      	str	r1, [sp, #20]
 8008614:	f7ff babf 	b.w	8007b96 <_strtod_l+0x16e>
 8008618:	ffc00000 	.word	0xffc00000
 800861c:	41dfffff 	.word	0x41dfffff
 8008620:	94a03595 	.word	0x94a03595
 8008624:	3fcfffff 	.word	0x3fcfffff

08008628 <strtod>:
 8008628:	4b06      	ldr	r3, [pc, #24]	; (8008644 <strtod+0x1c>)
 800862a:	b410      	push	{r4}
 800862c:	681c      	ldr	r4, [r3, #0]
 800862e:	4a06      	ldr	r2, [pc, #24]	; (8008648 <strtod+0x20>)
 8008630:	6a23      	ldr	r3, [r4, #32]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf08      	it	eq
 8008636:	4613      	moveq	r3, r2
 8008638:	460a      	mov	r2, r1
 800863a:	4601      	mov	r1, r0
 800863c:	4620      	mov	r0, r4
 800863e:	bc10      	pop	{r4}
 8008640:	f7ff b9f2 	b.w	8007a28 <_strtod_l>
 8008644:	2000002c 	.word	0x2000002c
 8008648:	20000090 	.word	0x20000090

0800864c <quorem>:
 800864c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	6903      	ldr	r3, [r0, #16]
 8008652:	690c      	ldr	r4, [r1, #16]
 8008654:	4680      	mov	r8, r0
 8008656:	42a3      	cmp	r3, r4
 8008658:	f2c0 8084 	blt.w	8008764 <quorem+0x118>
 800865c:	3c01      	subs	r4, #1
 800865e:	f101 0714 	add.w	r7, r1, #20
 8008662:	f100 0614 	add.w	r6, r0, #20
 8008666:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800866a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800866e:	3501      	adds	r5, #1
 8008670:	fbb0 f5f5 	udiv	r5, r0, r5
 8008674:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008678:	eb06 030c 	add.w	r3, r6, ip
 800867c:	eb07 090c 	add.w	r9, r7, ip
 8008680:	9301      	str	r3, [sp, #4]
 8008682:	b39d      	cbz	r5, 80086ec <quorem+0xa0>
 8008684:	f04f 0a00 	mov.w	sl, #0
 8008688:	4638      	mov	r0, r7
 800868a:	46b6      	mov	lr, r6
 800868c:	46d3      	mov	fp, sl
 800868e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008692:	b293      	uxth	r3, r2
 8008694:	fb05 a303 	mla	r3, r5, r3, sl
 8008698:	0c12      	lsrs	r2, r2, #16
 800869a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800869e:	fb05 a202 	mla	r2, r5, r2, sl
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	ebab 0303 	sub.w	r3, fp, r3
 80086a8:	f8de b000 	ldr.w	fp, [lr]
 80086ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80086b0:	fa1f fb8b 	uxth.w	fp, fp
 80086b4:	445b      	add	r3, fp
 80086b6:	fa1f fb82 	uxth.w	fp, r2
 80086ba:	f8de 2000 	ldr.w	r2, [lr]
 80086be:	4581      	cmp	r9, r0
 80086c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80086c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086ce:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80086d2:	f84e 3b04 	str.w	r3, [lr], #4
 80086d6:	d2da      	bcs.n	800868e <quorem+0x42>
 80086d8:	f856 300c 	ldr.w	r3, [r6, ip]
 80086dc:	b933      	cbnz	r3, 80086ec <quorem+0xa0>
 80086de:	9b01      	ldr	r3, [sp, #4]
 80086e0:	3b04      	subs	r3, #4
 80086e2:	429e      	cmp	r6, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	d331      	bcc.n	800874c <quorem+0x100>
 80086e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80086ec:	4640      	mov	r0, r8
 80086ee:	f001 fbad 	bl	8009e4c <__mcmp>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	db26      	blt.n	8008744 <quorem+0xf8>
 80086f6:	4630      	mov	r0, r6
 80086f8:	f04f 0c00 	mov.w	ip, #0
 80086fc:	3501      	adds	r5, #1
 80086fe:	f857 1b04 	ldr.w	r1, [r7], #4
 8008702:	f8d0 e000 	ldr.w	lr, [r0]
 8008706:	b28b      	uxth	r3, r1
 8008708:	ebac 0303 	sub.w	r3, ip, r3
 800870c:	fa1f f28e 	uxth.w	r2, lr
 8008710:	4413      	add	r3, r2
 8008712:	0c0a      	lsrs	r2, r1, #16
 8008714:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008718:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800871c:	b29b      	uxth	r3, r3
 800871e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008722:	45b9      	cmp	r9, r7
 8008724:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008728:	f840 3b04 	str.w	r3, [r0], #4
 800872c:	d2e7      	bcs.n	80086fe <quorem+0xb2>
 800872e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008732:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008736:	b92a      	cbnz	r2, 8008744 <quorem+0xf8>
 8008738:	3b04      	subs	r3, #4
 800873a:	429e      	cmp	r6, r3
 800873c:	461a      	mov	r2, r3
 800873e:	d30b      	bcc.n	8008758 <quorem+0x10c>
 8008740:	f8c8 4010 	str.w	r4, [r8, #16]
 8008744:	4628      	mov	r0, r5
 8008746:	b003      	add	sp, #12
 8008748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	3b04      	subs	r3, #4
 8008750:	2a00      	cmp	r2, #0
 8008752:	d1c9      	bne.n	80086e8 <quorem+0x9c>
 8008754:	3c01      	subs	r4, #1
 8008756:	e7c4      	b.n	80086e2 <quorem+0x96>
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	3b04      	subs	r3, #4
 800875c:	2a00      	cmp	r2, #0
 800875e:	d1ef      	bne.n	8008740 <quorem+0xf4>
 8008760:	3c01      	subs	r4, #1
 8008762:	e7ea      	b.n	800873a <quorem+0xee>
 8008764:	2000      	movs	r0, #0
 8008766:	e7ee      	b.n	8008746 <quorem+0xfa>

08008768 <_dtoa_r>:
 8008768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800876c:	4616      	mov	r6, r2
 800876e:	461f      	mov	r7, r3
 8008770:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008772:	b095      	sub	sp, #84	; 0x54
 8008774:	4604      	mov	r4, r0
 8008776:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800877a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800877e:	b93d      	cbnz	r5, 8008790 <_dtoa_r+0x28>
 8008780:	2010      	movs	r0, #16
 8008782:	f001 f8dd 	bl	8009940 <malloc>
 8008786:	6260      	str	r0, [r4, #36]	; 0x24
 8008788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800878c:	6005      	str	r5, [r0, #0]
 800878e:	60c5      	str	r5, [r0, #12]
 8008790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	b151      	cbz	r1, 80087ac <_dtoa_r+0x44>
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	2301      	movs	r3, #1
 800879a:	4093      	lsls	r3, r2
 800879c:	604a      	str	r2, [r1, #4]
 800879e:	608b      	str	r3, [r1, #8]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f001 f934 	bl	8009a0e <_Bfree>
 80087a6:	2200      	movs	r2, #0
 80087a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	1e3b      	subs	r3, r7, #0
 80087ae:	bfaf      	iteee	ge
 80087b0:	2300      	movge	r3, #0
 80087b2:	2201      	movlt	r2, #1
 80087b4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087b8:	9303      	strlt	r3, [sp, #12]
 80087ba:	bfac      	ite	ge
 80087bc:	f8c8 3000 	strge.w	r3, [r8]
 80087c0:	f8c8 2000 	strlt.w	r2, [r8]
 80087c4:	4bae      	ldr	r3, [pc, #696]	; (8008a80 <_dtoa_r+0x318>)
 80087c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087ca:	ea33 0308 	bics.w	r3, r3, r8
 80087ce:	d11b      	bne.n	8008808 <_dtoa_r+0xa0>
 80087d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80087d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	9b02      	ldr	r3, [sp, #8]
 80087da:	b923      	cbnz	r3, 80087e6 <_dtoa_r+0x7e>
 80087dc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80087e0:	2800      	cmp	r0, #0
 80087e2:	f000 8545 	beq.w	8009270 <_dtoa_r+0xb08>
 80087e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087e8:	b953      	cbnz	r3, 8008800 <_dtoa_r+0x98>
 80087ea:	4ba6      	ldr	r3, [pc, #664]	; (8008a84 <_dtoa_r+0x31c>)
 80087ec:	e021      	b.n	8008832 <_dtoa_r+0xca>
 80087ee:	4ba6      	ldr	r3, [pc, #664]	; (8008a88 <_dtoa_r+0x320>)
 80087f0:	9306      	str	r3, [sp, #24]
 80087f2:	3308      	adds	r3, #8
 80087f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80087f6:	6013      	str	r3, [r2, #0]
 80087f8:	9806      	ldr	r0, [sp, #24]
 80087fa:	b015      	add	sp, #84	; 0x54
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	4ba0      	ldr	r3, [pc, #640]	; (8008a84 <_dtoa_r+0x31c>)
 8008802:	9306      	str	r3, [sp, #24]
 8008804:	3303      	adds	r3, #3
 8008806:	e7f5      	b.n	80087f4 <_dtoa_r+0x8c>
 8008808:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	2300      	movs	r3, #0
 8008810:	4630      	mov	r0, r6
 8008812:	4639      	mov	r1, r7
 8008814:	f7f8 f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8008818:	4682      	mov	sl, r0
 800881a:	b160      	cbz	r0, 8008836 <_dtoa_r+0xce>
 800881c:	2301      	movs	r3, #1
 800881e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8520 	beq.w	800926a <_dtoa_r+0xb02>
 800882a:	4b98      	ldr	r3, [pc, #608]	; (8008a8c <_dtoa_r+0x324>)
 800882c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	3b01      	subs	r3, #1
 8008832:	9306      	str	r3, [sp, #24]
 8008834:	e7e0      	b.n	80087f8 <_dtoa_r+0x90>
 8008836:	ab12      	add	r3, sp, #72	; 0x48
 8008838:	9301      	str	r3, [sp, #4]
 800883a:	ab13      	add	r3, sp, #76	; 0x4c
 800883c:	9300      	str	r3, [sp, #0]
 800883e:	4632      	mov	r2, r6
 8008840:	463b      	mov	r3, r7
 8008842:	4620      	mov	r0, r4
 8008844:	f001 fbf0 	bl	800a028 <__d2b>
 8008848:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800884c:	4683      	mov	fp, r0
 800884e:	2d00      	cmp	r5, #0
 8008850:	d07d      	beq.n	800894e <_dtoa_r+0x1e6>
 8008852:	46b0      	mov	r8, r6
 8008854:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008858:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800885c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8008860:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008864:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8008868:	2200      	movs	r2, #0
 800886a:	4b89      	ldr	r3, [pc, #548]	; (8008a90 <_dtoa_r+0x328>)
 800886c:	4640      	mov	r0, r8
 800886e:	4649      	mov	r1, r9
 8008870:	f7f7 fc7a 	bl	8000168 <__aeabi_dsub>
 8008874:	a37c      	add	r3, pc, #496	; (adr r3, 8008a68 <_dtoa_r+0x300>)
 8008876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887a:	f7f7 fe2d 	bl	80004d8 <__aeabi_dmul>
 800887e:	a37c      	add	r3, pc, #496	; (adr r3, 8008a70 <_dtoa_r+0x308>)
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	f7f7 fc72 	bl	800016c <__adddf3>
 8008888:	4606      	mov	r6, r0
 800888a:	4628      	mov	r0, r5
 800888c:	460f      	mov	r7, r1
 800888e:	f7f7 fdb9 	bl	8000404 <__aeabi_i2d>
 8008892:	a379      	add	r3, pc, #484	; (adr r3, 8008a78 <_dtoa_r+0x310>)
 8008894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008898:	f7f7 fe1e 	bl	80004d8 <__aeabi_dmul>
 800889c:	4602      	mov	r2, r0
 800889e:	460b      	mov	r3, r1
 80088a0:	4630      	mov	r0, r6
 80088a2:	4639      	mov	r1, r7
 80088a4:	f7f7 fc62 	bl	800016c <__adddf3>
 80088a8:	4606      	mov	r6, r0
 80088aa:	460f      	mov	r7, r1
 80088ac:	f7f8 f8c4 	bl	8000a38 <__aeabi_d2iz>
 80088b0:	2200      	movs	r2, #0
 80088b2:	4682      	mov	sl, r0
 80088b4:	2300      	movs	r3, #0
 80088b6:	4630      	mov	r0, r6
 80088b8:	4639      	mov	r1, r7
 80088ba:	f7f8 f87f 	bl	80009bc <__aeabi_dcmplt>
 80088be:	b148      	cbz	r0, 80088d4 <_dtoa_r+0x16c>
 80088c0:	4650      	mov	r0, sl
 80088c2:	f7f7 fd9f 	bl	8000404 <__aeabi_i2d>
 80088c6:	4632      	mov	r2, r6
 80088c8:	463b      	mov	r3, r7
 80088ca:	f7f8 f86d 	bl	80009a8 <__aeabi_dcmpeq>
 80088ce:	b908      	cbnz	r0, 80088d4 <_dtoa_r+0x16c>
 80088d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d4:	f1ba 0f16 	cmp.w	sl, #22
 80088d8:	d85a      	bhi.n	8008990 <_dtoa_r+0x228>
 80088da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088de:	496d      	ldr	r1, [pc, #436]	; (8008a94 <_dtoa_r+0x32c>)
 80088e0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80088e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088e8:	f7f8 f886 	bl	80009f8 <__aeabi_dcmpgt>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d051      	beq.n	8008994 <_dtoa_r+0x22c>
 80088f0:	2300      	movs	r3, #0
 80088f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088f6:	930d      	str	r3, [sp, #52]	; 0x34
 80088f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088fa:	1b5d      	subs	r5, r3, r5
 80088fc:	1e6b      	subs	r3, r5, #1
 80088fe:	9307      	str	r3, [sp, #28]
 8008900:	bf43      	ittte	mi
 8008902:	2300      	movmi	r3, #0
 8008904:	f1c5 0901 	rsbmi	r9, r5, #1
 8008908:	9307      	strmi	r3, [sp, #28]
 800890a:	f04f 0900 	movpl.w	r9, #0
 800890e:	f1ba 0f00 	cmp.w	sl, #0
 8008912:	db41      	blt.n	8008998 <_dtoa_r+0x230>
 8008914:	9b07      	ldr	r3, [sp, #28]
 8008916:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800891a:	4453      	add	r3, sl
 800891c:	9307      	str	r3, [sp, #28]
 800891e:	2300      	movs	r3, #0
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008924:	2b09      	cmp	r3, #9
 8008926:	f200 808f 	bhi.w	8008a48 <_dtoa_r+0x2e0>
 800892a:	2b05      	cmp	r3, #5
 800892c:	bfc4      	itt	gt
 800892e:	3b04      	subgt	r3, #4
 8008930:	931e      	strgt	r3, [sp, #120]	; 0x78
 8008932:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008934:	bfc8      	it	gt
 8008936:	2500      	movgt	r5, #0
 8008938:	f1a3 0302 	sub.w	r3, r3, #2
 800893c:	bfd8      	it	le
 800893e:	2501      	movle	r5, #1
 8008940:	2b03      	cmp	r3, #3
 8008942:	f200 808d 	bhi.w	8008a60 <_dtoa_r+0x2f8>
 8008946:	e8df f003 	tbb	[pc, r3]
 800894a:	7d7b      	.short	0x7d7b
 800894c:	6f2f      	.short	0x6f2f
 800894e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008952:	441d      	add	r5, r3
 8008954:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008958:	2820      	cmp	r0, #32
 800895a:	dd13      	ble.n	8008984 <_dtoa_r+0x21c>
 800895c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	fa08 f800 	lsl.w	r8, r8, r0
 8008966:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800896a:	fa23 f000 	lsr.w	r0, r3, r0
 800896e:	ea48 0000 	orr.w	r0, r8, r0
 8008972:	f7f7 fd37 	bl	80003e4 <__aeabi_ui2d>
 8008976:	2301      	movs	r3, #1
 8008978:	4680      	mov	r8, r0
 800897a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800897e:	3d01      	subs	r5, #1
 8008980:	9310      	str	r3, [sp, #64]	; 0x40
 8008982:	e771      	b.n	8008868 <_dtoa_r+0x100>
 8008984:	9b02      	ldr	r3, [sp, #8]
 8008986:	f1c0 0020 	rsb	r0, r0, #32
 800898a:	fa03 f000 	lsl.w	r0, r3, r0
 800898e:	e7f0      	b.n	8008972 <_dtoa_r+0x20a>
 8008990:	2301      	movs	r3, #1
 8008992:	e7b0      	b.n	80088f6 <_dtoa_r+0x18e>
 8008994:	900d      	str	r0, [sp, #52]	; 0x34
 8008996:	e7af      	b.n	80088f8 <_dtoa_r+0x190>
 8008998:	f1ca 0300 	rsb	r3, sl, #0
 800899c:	9308      	str	r3, [sp, #32]
 800899e:	2300      	movs	r3, #0
 80089a0:	eba9 090a 	sub.w	r9, r9, sl
 80089a4:	930c      	str	r3, [sp, #48]	; 0x30
 80089a6:	e7bc      	b.n	8008922 <_dtoa_r+0x1ba>
 80089a8:	2301      	movs	r3, #1
 80089aa:	9309      	str	r3, [sp, #36]	; 0x24
 80089ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	dd74      	ble.n	8008a9c <_dtoa_r+0x334>
 80089b2:	4698      	mov	r8, r3
 80089b4:	9304      	str	r3, [sp, #16]
 80089b6:	2200      	movs	r2, #0
 80089b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80089ba:	6072      	str	r2, [r6, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	f102 0014 	add.w	r0, r2, #20
 80089c2:	4298      	cmp	r0, r3
 80089c4:	6871      	ldr	r1, [r6, #4]
 80089c6:	d96e      	bls.n	8008aa6 <_dtoa_r+0x33e>
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 ffec 	bl	80099a6 <_Balloc>
 80089ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089d0:	6030      	str	r0, [r6, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f1b8 0f0e 	cmp.w	r8, #14
 80089d8:	9306      	str	r3, [sp, #24]
 80089da:	f200 80ed 	bhi.w	8008bb8 <_dtoa_r+0x450>
 80089de:	2d00      	cmp	r5, #0
 80089e0:	f000 80ea 	beq.w	8008bb8 <_dtoa_r+0x450>
 80089e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80089f0:	dd77      	ble.n	8008ae2 <_dtoa_r+0x37a>
 80089f2:	4a28      	ldr	r2, [pc, #160]	; (8008a94 <_dtoa_r+0x32c>)
 80089f4:	f00a 030f 	and.w	r3, sl, #15
 80089f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80089fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a00:	06f0      	lsls	r0, r6, #27
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008a0a:	d568      	bpl.n	8008ade <_dtoa_r+0x376>
 8008a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008a10:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <_dtoa_r+0x330>)
 8008a12:	2503      	movs	r5, #3
 8008a14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008a18:	f7f7 fe88 	bl	800072c <__aeabi_ddiv>
 8008a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a20:	f006 060f 	and.w	r6, r6, #15
 8008a24:	4f1c      	ldr	r7, [pc, #112]	; (8008a98 <_dtoa_r+0x330>)
 8008a26:	e04f      	b.n	8008ac8 <_dtoa_r+0x360>
 8008a28:	2301      	movs	r3, #1
 8008a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a2e:	4453      	add	r3, sl
 8008a30:	f103 0801 	add.w	r8, r3, #1
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	4643      	mov	r3, r8
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	bfb8      	it	lt
 8008a3c:	2301      	movlt	r3, #1
 8008a3e:	e7ba      	b.n	80089b6 <_dtoa_r+0x24e>
 8008a40:	2300      	movs	r3, #0
 8008a42:	e7b2      	b.n	80089aa <_dtoa_r+0x242>
 8008a44:	2300      	movs	r3, #0
 8008a46:	e7f0      	b.n	8008a2a <_dtoa_r+0x2c2>
 8008a48:	2501      	movs	r5, #1
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	9509      	str	r5, [sp, #36]	; 0x24
 8008a4e:	931e      	str	r3, [sp, #120]	; 0x78
 8008a50:	f04f 33ff 	mov.w	r3, #4294967295
 8008a54:	2200      	movs	r2, #0
 8008a56:	9304      	str	r3, [sp, #16]
 8008a58:	4698      	mov	r8, r3
 8008a5a:	2312      	movs	r3, #18
 8008a5c:	921f      	str	r2, [sp, #124]	; 0x7c
 8008a5e:	e7aa      	b.n	80089b6 <_dtoa_r+0x24e>
 8008a60:	2301      	movs	r3, #1
 8008a62:	9309      	str	r3, [sp, #36]	; 0x24
 8008a64:	e7f4      	b.n	8008a50 <_dtoa_r+0x2e8>
 8008a66:	bf00      	nop
 8008a68:	636f4361 	.word	0x636f4361
 8008a6c:	3fd287a7 	.word	0x3fd287a7
 8008a70:	8b60c8b3 	.word	0x8b60c8b3
 8008a74:	3fc68a28 	.word	0x3fc68a28
 8008a78:	509f79fb 	.word	0x509f79fb
 8008a7c:	3fd34413 	.word	0x3fd34413
 8008a80:	7ff00000 	.word	0x7ff00000
 8008a84:	0800c141 	.word	0x0800c141
 8008a88:	0800c138 	.word	0x0800c138
 8008a8c:	0800c0c1 	.word	0x0800c0c1
 8008a90:	3ff80000 	.word	0x3ff80000
 8008a94:	0800c178 	.word	0x0800c178
 8008a98:	0800c150 	.word	0x0800c150
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	9304      	str	r3, [sp, #16]
 8008aa0:	4698      	mov	r8, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	e7da      	b.n	8008a5c <_dtoa_r+0x2f4>
 8008aa6:	3101      	adds	r1, #1
 8008aa8:	6071      	str	r1, [r6, #4]
 8008aaa:	0052      	lsls	r2, r2, #1
 8008aac:	e787      	b.n	80089be <_dtoa_r+0x256>
 8008aae:	07f1      	lsls	r1, r6, #31
 8008ab0:	d508      	bpl.n	8008ac4 <_dtoa_r+0x35c>
 8008ab2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aba:	f7f7 fd0d 	bl	80004d8 <__aeabi_dmul>
 8008abe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	1076      	asrs	r6, r6, #1
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	2e00      	cmp	r6, #0
 8008aca:	d1f0      	bne.n	8008aae <_dtoa_r+0x346>
 8008acc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ad0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ad4:	f7f7 fe2a 	bl	800072c <__aeabi_ddiv>
 8008ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008adc:	e01b      	b.n	8008b16 <_dtoa_r+0x3ae>
 8008ade:	2502      	movs	r5, #2
 8008ae0:	e7a0      	b.n	8008a24 <_dtoa_r+0x2bc>
 8008ae2:	f000 80a4 	beq.w	8008c2e <_dtoa_r+0x4c6>
 8008ae6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008aea:	f1ca 0600 	rsb	r6, sl, #0
 8008aee:	4ba0      	ldr	r3, [pc, #640]	; (8008d70 <_dtoa_r+0x608>)
 8008af0:	f006 020f 	and.w	r2, r6, #15
 8008af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fcec 	bl	80004d8 <__aeabi_dmul>
 8008b00:	2502      	movs	r5, #2
 8008b02:	2300      	movs	r3, #0
 8008b04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b08:	4f9a      	ldr	r7, [pc, #616]	; (8008d74 <_dtoa_r+0x60c>)
 8008b0a:	1136      	asrs	r6, r6, #4
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	f040 8083 	bne.w	8008c18 <_dtoa_r+0x4b0>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e0      	bne.n	8008ad8 <_dtoa_r+0x370>
 8008b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 808a 	beq.w	8008c32 <_dtoa_r+0x4ca>
 8008b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	4b92      	ldr	r3, [pc, #584]	; (8008d78 <_dtoa_r+0x610>)
 8008b2e:	f7f7 ff45 	bl	80009bc <__aeabi_dcmplt>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d07d      	beq.n	8008c32 <_dtoa_r+0x4ca>
 8008b36:	f1b8 0f00 	cmp.w	r8, #0
 8008b3a:	d07a      	beq.n	8008c32 <_dtoa_r+0x4ca>
 8008b3c:	9b04      	ldr	r3, [sp, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dd36      	ble.n	8008bb0 <_dtoa_r+0x448>
 8008b42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b46:	2200      	movs	r2, #0
 8008b48:	4b8c      	ldr	r3, [pc, #560]	; (8008d7c <_dtoa_r+0x614>)
 8008b4a:	f7f7 fcc5 	bl	80004d8 <__aeabi_dmul>
 8008b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b52:	9e04      	ldr	r6, [sp, #16]
 8008b54:	f10a 37ff 	add.w	r7, sl, #4294967295
 8008b58:	3501      	adds	r5, #1
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	f7f7 fc52 	bl	8000404 <__aeabi_i2d>
 8008b60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b64:	f7f7 fcb8 	bl	80004d8 <__aeabi_dmul>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	4b85      	ldr	r3, [pc, #532]	; (8008d80 <_dtoa_r+0x618>)
 8008b6c:	f7f7 fafe 	bl	800016c <__adddf3>
 8008b70:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8008b74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008b78:	950b      	str	r5, [sp, #44]	; 0x2c
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d15c      	bne.n	8008c38 <_dtoa_r+0x4d0>
 8008b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	4b7f      	ldr	r3, [pc, #508]	; (8008d84 <_dtoa_r+0x61c>)
 8008b86:	f7f7 faef 	bl	8000168 <__aeabi_dsub>
 8008b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b8c:	462b      	mov	r3, r5
 8008b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b92:	f7f7 ff31 	bl	80009f8 <__aeabi_dcmpgt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	f040 8281 	bne.w	800909e <_dtoa_r+0x936>
 8008b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ba2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008ba6:	f7f7 ff09 	bl	80009bc <__aeabi_dcmplt>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	f040 8275 	bne.w	800909a <_dtoa_r+0x932>
 8008bb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f2c0 814b 	blt.w	8008e56 <_dtoa_r+0x6ee>
 8008bc0:	f1ba 0f0e 	cmp.w	sl, #14
 8008bc4:	f300 8147 	bgt.w	8008e56 <_dtoa_r+0x6ee>
 8008bc8:	4b69      	ldr	r3, [pc, #420]	; (8008d70 <_dtoa_r+0x608>)
 8008bca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008bd6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f280 80d7 	bge.w	8008d8c <_dtoa_r+0x624>
 8008bde:	f1b8 0f00 	cmp.w	r8, #0
 8008be2:	f300 80d3 	bgt.w	8008d8c <_dtoa_r+0x624>
 8008be6:	f040 8257 	bne.w	8009098 <_dtoa_r+0x930>
 8008bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	4b64      	ldr	r3, [pc, #400]	; (8008d84 <_dtoa_r+0x61c>)
 8008bf2:	f7f7 fc71 	bl	80004d8 <__aeabi_dmul>
 8008bf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bfa:	f7f7 fef3 	bl	80009e4 <__aeabi_dcmpge>
 8008bfe:	4646      	mov	r6, r8
 8008c00:	4647      	mov	r7, r8
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f040 822d 	bne.w	8009062 <_dtoa_r+0x8fa>
 8008c08:	9b06      	ldr	r3, [sp, #24]
 8008c0a:	9a06      	ldr	r2, [sp, #24]
 8008c0c:	1c5d      	adds	r5, r3, #1
 8008c0e:	2331      	movs	r3, #49	; 0x31
 8008c10:	f10a 0a01 	add.w	sl, sl, #1
 8008c14:	7013      	strb	r3, [r2, #0]
 8008c16:	e228      	b.n	800906a <_dtoa_r+0x902>
 8008c18:	07f2      	lsls	r2, r6, #31
 8008c1a:	d505      	bpl.n	8008c28 <_dtoa_r+0x4c0>
 8008c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c20:	f7f7 fc5a 	bl	80004d8 <__aeabi_dmul>
 8008c24:	2301      	movs	r3, #1
 8008c26:	3501      	adds	r5, #1
 8008c28:	1076      	asrs	r6, r6, #1
 8008c2a:	3708      	adds	r7, #8
 8008c2c:	e76e      	b.n	8008b0c <_dtoa_r+0x3a4>
 8008c2e:	2502      	movs	r5, #2
 8008c30:	e771      	b.n	8008b16 <_dtoa_r+0x3ae>
 8008c32:	4657      	mov	r7, sl
 8008c34:	4646      	mov	r6, r8
 8008c36:	e790      	b.n	8008b5a <_dtoa_r+0x3f2>
 8008c38:	4b4d      	ldr	r3, [pc, #308]	; (8008d70 <_dtoa_r+0x608>)
 8008c3a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c3e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d048      	beq.n	8008cda <_dtoa_r+0x572>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	494e      	ldr	r1, [pc, #312]	; (8008d88 <_dtoa_r+0x620>)
 8008c50:	f7f7 fd6c 	bl	800072c <__aeabi_ddiv>
 8008c54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c58:	f7f7 fa86 	bl	8000168 <__aeabi_dsub>
 8008c5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008c60:	9d06      	ldr	r5, [sp, #24]
 8008c62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c66:	f7f7 fee7 	bl	8000a38 <__aeabi_d2iz>
 8008c6a:	9011      	str	r0, [sp, #68]	; 0x44
 8008c6c:	f7f7 fbca 	bl	8000404 <__aeabi_i2d>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c78:	f7f7 fa76 	bl	8000168 <__aeabi_dsub>
 8008c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008c7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c82:	3330      	adds	r3, #48	; 0x30
 8008c84:	f805 3b01 	strb.w	r3, [r5], #1
 8008c88:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008c8c:	f7f7 fe96 	bl	80009bc <__aeabi_dcmplt>
 8008c90:	2800      	cmp	r0, #0
 8008c92:	d163      	bne.n	8008d5c <_dtoa_r+0x5f4>
 8008c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c98:	2000      	movs	r0, #0
 8008c9a:	4937      	ldr	r1, [pc, #220]	; (8008d78 <_dtoa_r+0x610>)
 8008c9c:	f7f7 fa64 	bl	8000168 <__aeabi_dsub>
 8008ca0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008ca4:	f7f7 fe8a 	bl	80009bc <__aeabi_dcmplt>
 8008ca8:	2800      	cmp	r0, #0
 8008caa:	f040 80b5 	bne.w	8008e18 <_dtoa_r+0x6b0>
 8008cae:	9b06      	ldr	r3, [sp, #24]
 8008cb0:	1aeb      	subs	r3, r5, r3
 8008cb2:	429e      	cmp	r6, r3
 8008cb4:	f77f af7c 	ble.w	8008bb0 <_dtoa_r+0x448>
 8008cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	4b2f      	ldr	r3, [pc, #188]	; (8008d7c <_dtoa_r+0x614>)
 8008cc0:	f7f7 fc0a 	bl	80004d8 <__aeabi_dmul>
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cce:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <_dtoa_r+0x614>)
 8008cd0:	f7f7 fc02 	bl	80004d8 <__aeabi_dmul>
 8008cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd8:	e7c3      	b.n	8008c62 <_dtoa_r+0x4fa>
 8008cda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008cde:	f7f7 fbfb 	bl	80004d8 <__aeabi_dmul>
 8008ce2:	9b06      	ldr	r3, [sp, #24]
 8008ce4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008ce8:	199d      	adds	r5, r3, r6
 8008cea:	461e      	mov	r6, r3
 8008cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cf0:	f7f7 fea2 	bl	8000a38 <__aeabi_d2iz>
 8008cf4:	9011      	str	r0, [sp, #68]	; 0x44
 8008cf6:	f7f7 fb85 	bl	8000404 <__aeabi_i2d>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d02:	f7f7 fa31 	bl	8000168 <__aeabi_dsub>
 8008d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0c:	3330      	adds	r3, #48	; 0x30
 8008d0e:	f806 3b01 	strb.w	r3, [r6], #1
 8008d12:	42ae      	cmp	r6, r5
 8008d14:	f04f 0200 	mov.w	r2, #0
 8008d18:	d124      	bne.n	8008d64 <_dtoa_r+0x5fc>
 8008d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008d1e:	4b1a      	ldr	r3, [pc, #104]	; (8008d88 <_dtoa_r+0x620>)
 8008d20:	f7f7 fa24 	bl	800016c <__adddf3>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d2c:	f7f7 fe64 	bl	80009f8 <__aeabi_dcmpgt>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d171      	bne.n	8008e18 <_dtoa_r+0x6b0>
 8008d34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d38:	2000      	movs	r0, #0
 8008d3a:	4913      	ldr	r1, [pc, #76]	; (8008d88 <_dtoa_r+0x620>)
 8008d3c:	f7f7 fa14 	bl	8000168 <__aeabi_dsub>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d48:	f7f7 fe38 	bl	80009bc <__aeabi_dcmplt>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f43f af2f 	beq.w	8008bb0 <_dtoa_r+0x448>
 8008d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d56:	1e6a      	subs	r2, r5, #1
 8008d58:	2b30      	cmp	r3, #48	; 0x30
 8008d5a:	d001      	beq.n	8008d60 <_dtoa_r+0x5f8>
 8008d5c:	46ba      	mov	sl, r7
 8008d5e:	e04a      	b.n	8008df6 <_dtoa_r+0x68e>
 8008d60:	4615      	mov	r5, r2
 8008d62:	e7f6      	b.n	8008d52 <_dtoa_r+0x5ea>
 8008d64:	4b05      	ldr	r3, [pc, #20]	; (8008d7c <_dtoa_r+0x614>)
 8008d66:	f7f7 fbb7 	bl	80004d8 <__aeabi_dmul>
 8008d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d6e:	e7bd      	b.n	8008cec <_dtoa_r+0x584>
 8008d70:	0800c178 	.word	0x0800c178
 8008d74:	0800c150 	.word	0x0800c150
 8008d78:	3ff00000 	.word	0x3ff00000
 8008d7c:	40240000 	.word	0x40240000
 8008d80:	401c0000 	.word	0x401c0000
 8008d84:	40140000 	.word	0x40140000
 8008d88:	3fe00000 	.word	0x3fe00000
 8008d8c:	9d06      	ldr	r5, [sp, #24]
 8008d8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fcc7 	bl	800072c <__aeabi_ddiv>
 8008d9e:	f7f7 fe4b 	bl	8000a38 <__aeabi_d2iz>
 8008da2:	4681      	mov	r9, r0
 8008da4:	f7f7 fb2e 	bl	8000404 <__aeabi_i2d>
 8008da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dac:	f7f7 fb94 	bl	80004d8 <__aeabi_dmul>
 8008db0:	4602      	mov	r2, r0
 8008db2:	460b      	mov	r3, r1
 8008db4:	4630      	mov	r0, r6
 8008db6:	4639      	mov	r1, r7
 8008db8:	f7f7 f9d6 	bl	8000168 <__aeabi_dsub>
 8008dbc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8008dc0:	f805 6b01 	strb.w	r6, [r5], #1
 8008dc4:	9e06      	ldr	r6, [sp, #24]
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	1bae      	subs	r6, r5, r6
 8008dca:	45b0      	cmp	r8, r6
 8008dcc:	460b      	mov	r3, r1
 8008dce:	d135      	bne.n	8008e3c <_dtoa_r+0x6d4>
 8008dd0:	f7f7 f9cc 	bl	800016c <__adddf3>
 8008dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008dd8:	4606      	mov	r6, r0
 8008dda:	460f      	mov	r7, r1
 8008ddc:	f7f7 fe0c 	bl	80009f8 <__aeabi_dcmpgt>
 8008de0:	b9c8      	cbnz	r0, 8008e16 <_dtoa_r+0x6ae>
 8008de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008de6:	4630      	mov	r0, r6
 8008de8:	4639      	mov	r1, r7
 8008dea:	f7f7 fddd 	bl	80009a8 <__aeabi_dcmpeq>
 8008dee:	b110      	cbz	r0, 8008df6 <_dtoa_r+0x68e>
 8008df0:	f019 0f01 	tst.w	r9, #1
 8008df4:	d10f      	bne.n	8008e16 <_dtoa_r+0x6ae>
 8008df6:	4659      	mov	r1, fp
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 fe08 	bl	8009a0e <_Bfree>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e02:	702b      	strb	r3, [r5, #0]
 8008e04:	f10a 0301 	add.w	r3, sl, #1
 8008e08:	6013      	str	r3, [r2, #0]
 8008e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f43f acf3 	beq.w	80087f8 <_dtoa_r+0x90>
 8008e12:	601d      	str	r5, [r3, #0]
 8008e14:	e4f0      	b.n	80087f8 <_dtoa_r+0x90>
 8008e16:	4657      	mov	r7, sl
 8008e18:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e1c:	1e6b      	subs	r3, r5, #1
 8008e1e:	2a39      	cmp	r2, #57	; 0x39
 8008e20:	d106      	bne.n	8008e30 <_dtoa_r+0x6c8>
 8008e22:	9a06      	ldr	r2, [sp, #24]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d107      	bne.n	8008e38 <_dtoa_r+0x6d0>
 8008e28:	2330      	movs	r3, #48	; 0x30
 8008e2a:	7013      	strb	r3, [r2, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	3701      	adds	r7, #1
 8008e30:	781a      	ldrb	r2, [r3, #0]
 8008e32:	3201      	adds	r2, #1
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	e791      	b.n	8008d5c <_dtoa_r+0x5f4>
 8008e38:	461d      	mov	r5, r3
 8008e3a:	e7ed      	b.n	8008e18 <_dtoa_r+0x6b0>
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4b99      	ldr	r3, [pc, #612]	; (80090a4 <_dtoa_r+0x93c>)
 8008e40:	f7f7 fb4a 	bl	80004d8 <__aeabi_dmul>
 8008e44:	2200      	movs	r2, #0
 8008e46:	2300      	movs	r3, #0
 8008e48:	4606      	mov	r6, r0
 8008e4a:	460f      	mov	r7, r1
 8008e4c:	f7f7 fdac 	bl	80009a8 <__aeabi_dcmpeq>
 8008e50:	2800      	cmp	r0, #0
 8008e52:	d09e      	beq.n	8008d92 <_dtoa_r+0x62a>
 8008e54:	e7cf      	b.n	8008df6 <_dtoa_r+0x68e>
 8008e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e58:	2a00      	cmp	r2, #0
 8008e5a:	f000 8088 	beq.w	8008f6e <_dtoa_r+0x806>
 8008e5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e60:	2a01      	cmp	r2, #1
 8008e62:	dc6d      	bgt.n	8008f40 <_dtoa_r+0x7d8>
 8008e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	d066      	beq.n	8008f38 <_dtoa_r+0x7d0>
 8008e6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e6e:	464d      	mov	r5, r9
 8008e70:	9e08      	ldr	r6, [sp, #32]
 8008e72:	9a07      	ldr	r2, [sp, #28]
 8008e74:	2101      	movs	r1, #1
 8008e76:	441a      	add	r2, r3
 8008e78:	4620      	mov	r0, r4
 8008e7a:	4499      	add	r9, r3
 8008e7c:	9207      	str	r2, [sp, #28]
 8008e7e:	f000 fea4 	bl	8009bca <__i2b>
 8008e82:	4607      	mov	r7, r0
 8008e84:	2d00      	cmp	r5, #0
 8008e86:	dd0b      	ble.n	8008ea0 <_dtoa_r+0x738>
 8008e88:	9b07      	ldr	r3, [sp, #28]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dd08      	ble.n	8008ea0 <_dtoa_r+0x738>
 8008e8e:	42ab      	cmp	r3, r5
 8008e90:	bfa8      	it	ge
 8008e92:	462b      	movge	r3, r5
 8008e94:	9a07      	ldr	r2, [sp, #28]
 8008e96:	eba9 0903 	sub.w	r9, r9, r3
 8008e9a:	1aed      	subs	r5, r5, r3
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	9b08      	ldr	r3, [sp, #32]
 8008ea2:	b1eb      	cbz	r3, 8008ee0 <_dtoa_r+0x778>
 8008ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d065      	beq.n	8008f76 <_dtoa_r+0x80e>
 8008eaa:	b18e      	cbz	r6, 8008ed0 <_dtoa_r+0x768>
 8008eac:	4639      	mov	r1, r7
 8008eae:	4632      	mov	r2, r6
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 ff29 	bl	8009d08 <__pow5mult>
 8008eb6:	465a      	mov	r2, fp
 8008eb8:	4601      	mov	r1, r0
 8008eba:	4607      	mov	r7, r0
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 fe8d 	bl	8009bdc <__multiply>
 8008ec2:	4659      	mov	r1, fp
 8008ec4:	900a      	str	r0, [sp, #40]	; 0x28
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f000 fda1 	bl	8009a0e <_Bfree>
 8008ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ece:	469b      	mov	fp, r3
 8008ed0:	9b08      	ldr	r3, [sp, #32]
 8008ed2:	1b9a      	subs	r2, r3, r6
 8008ed4:	d004      	beq.n	8008ee0 <_dtoa_r+0x778>
 8008ed6:	4659      	mov	r1, fp
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 ff15 	bl	8009d08 <__pow5mult>
 8008ede:	4683      	mov	fp, r0
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f000 fe71 	bl	8009bca <__i2b>
 8008ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eea:	4606      	mov	r6, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 81c6 	beq.w	800927e <_dtoa_r+0xb16>
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	4601      	mov	r1, r0
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	f000 ff06 	bl	8009d08 <__pow5mult>
 8008efc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008efe:	4606      	mov	r6, r0
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	dc3e      	bgt.n	8008f82 <_dtoa_r+0x81a>
 8008f04:	9b02      	ldr	r3, [sp, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d137      	bne.n	8008f7a <_dtoa_r+0x812>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d134      	bne.n	8008f7e <_dtoa_r+0x816>
 8008f14:	9b03      	ldr	r3, [sp, #12]
 8008f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	0d1b      	lsrs	r3, r3, #20
 8008f1c:	051b      	lsls	r3, r3, #20
 8008f1e:	b12b      	cbz	r3, 8008f2c <_dtoa_r+0x7c4>
 8008f20:	9b07      	ldr	r3, [sp, #28]
 8008f22:	f109 0901 	add.w	r9, r9, #1
 8008f26:	3301      	adds	r3, #1
 8008f28:	9307      	str	r3, [sp, #28]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	9308      	str	r3, [sp, #32]
 8008f2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d128      	bne.n	8008f86 <_dtoa_r+0x81e>
 8008f34:	2001      	movs	r0, #1
 8008f36:	e02e      	b.n	8008f96 <_dtoa_r+0x82e>
 8008f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008f3e:	e796      	b.n	8008e6e <_dtoa_r+0x706>
 8008f40:	9b08      	ldr	r3, [sp, #32]
 8008f42:	f108 36ff 	add.w	r6, r8, #4294967295
 8008f46:	42b3      	cmp	r3, r6
 8008f48:	bfb7      	itett	lt
 8008f4a:	9b08      	ldrlt	r3, [sp, #32]
 8008f4c:	1b9e      	subge	r6, r3, r6
 8008f4e:	1af2      	sublt	r2, r6, r3
 8008f50:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8008f52:	bfbf      	itttt	lt
 8008f54:	9608      	strlt	r6, [sp, #32]
 8008f56:	189b      	addlt	r3, r3, r2
 8008f58:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008f5a:	2600      	movlt	r6, #0
 8008f5c:	f1b8 0f00 	cmp.w	r8, #0
 8008f60:	bfb9      	ittee	lt
 8008f62:	eba9 0508 	sublt.w	r5, r9, r8
 8008f66:	2300      	movlt	r3, #0
 8008f68:	464d      	movge	r5, r9
 8008f6a:	4643      	movge	r3, r8
 8008f6c:	e781      	b.n	8008e72 <_dtoa_r+0x70a>
 8008f6e:	9e08      	ldr	r6, [sp, #32]
 8008f70:	464d      	mov	r5, r9
 8008f72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f74:	e786      	b.n	8008e84 <_dtoa_r+0x71c>
 8008f76:	9a08      	ldr	r2, [sp, #32]
 8008f78:	e7ad      	b.n	8008ed6 <_dtoa_r+0x76e>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e7d6      	b.n	8008f2c <_dtoa_r+0x7c4>
 8008f7e:	9b02      	ldr	r3, [sp, #8]
 8008f80:	e7d4      	b.n	8008f2c <_dtoa_r+0x7c4>
 8008f82:	2300      	movs	r3, #0
 8008f84:	9308      	str	r3, [sp, #32]
 8008f86:	6933      	ldr	r3, [r6, #16]
 8008f88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f8c:	6918      	ldr	r0, [r3, #16]
 8008f8e:	f000 fdce 	bl	8009b2e <__hi0bits>
 8008f92:	f1c0 0020 	rsb	r0, r0, #32
 8008f96:	9b07      	ldr	r3, [sp, #28]
 8008f98:	4418      	add	r0, r3
 8008f9a:	f010 001f 	ands.w	r0, r0, #31
 8008f9e:	d047      	beq.n	8009030 <_dtoa_r+0x8c8>
 8008fa0:	f1c0 0320 	rsb	r3, r0, #32
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	dd3b      	ble.n	8009020 <_dtoa_r+0x8b8>
 8008fa8:	9b07      	ldr	r3, [sp, #28]
 8008faa:	f1c0 001c 	rsb	r0, r0, #28
 8008fae:	4481      	add	r9, r0
 8008fb0:	4405      	add	r5, r0
 8008fb2:	4403      	add	r3, r0
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f1b9 0f00 	cmp.w	r9, #0
 8008fba:	dd05      	ble.n	8008fc8 <_dtoa_r+0x860>
 8008fbc:	4659      	mov	r1, fp
 8008fbe:	464a      	mov	r2, r9
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	f000 feef 	bl	8009da4 <__lshift>
 8008fc6:	4683      	mov	fp, r0
 8008fc8:	9b07      	ldr	r3, [sp, #28]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dd05      	ble.n	8008fda <_dtoa_r+0x872>
 8008fce:	4631      	mov	r1, r6
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	f000 fee6 	bl	8009da4 <__lshift>
 8008fd8:	4606      	mov	r6, r0
 8008fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fdc:	b353      	cbz	r3, 8009034 <_dtoa_r+0x8cc>
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4658      	mov	r0, fp
 8008fe2:	f000 ff33 	bl	8009e4c <__mcmp>
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	da24      	bge.n	8009034 <_dtoa_r+0x8cc>
 8008fea:	2300      	movs	r3, #0
 8008fec:	4659      	mov	r1, fp
 8008fee:	220a      	movs	r2, #10
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fd23 	bl	8009a3c <__multadd>
 8008ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ff8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ffc:	4683      	mov	fp, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 8144 	beq.w	800928c <_dtoa_r+0xb24>
 8009004:	2300      	movs	r3, #0
 8009006:	4639      	mov	r1, r7
 8009008:	220a      	movs	r2, #10
 800900a:	4620      	mov	r0, r4
 800900c:	f000 fd16 	bl	8009a3c <__multadd>
 8009010:	9b04      	ldr	r3, [sp, #16]
 8009012:	4607      	mov	r7, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc4d      	bgt.n	80090b4 <_dtoa_r+0x94c>
 8009018:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800901a:	2b02      	cmp	r3, #2
 800901c:	dd4a      	ble.n	80090b4 <_dtoa_r+0x94c>
 800901e:	e011      	b.n	8009044 <_dtoa_r+0x8dc>
 8009020:	d0c9      	beq.n	8008fb6 <_dtoa_r+0x84e>
 8009022:	9a07      	ldr	r2, [sp, #28]
 8009024:	331c      	adds	r3, #28
 8009026:	441a      	add	r2, r3
 8009028:	4499      	add	r9, r3
 800902a:	441d      	add	r5, r3
 800902c:	4613      	mov	r3, r2
 800902e:	e7c1      	b.n	8008fb4 <_dtoa_r+0x84c>
 8009030:	4603      	mov	r3, r0
 8009032:	e7f6      	b.n	8009022 <_dtoa_r+0x8ba>
 8009034:	f1b8 0f00 	cmp.w	r8, #0
 8009038:	dc36      	bgt.n	80090a8 <_dtoa_r+0x940>
 800903a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800903c:	2b02      	cmp	r3, #2
 800903e:	dd33      	ble.n	80090a8 <_dtoa_r+0x940>
 8009040:	f8cd 8010 	str.w	r8, [sp, #16]
 8009044:	9b04      	ldr	r3, [sp, #16]
 8009046:	b963      	cbnz	r3, 8009062 <_dtoa_r+0x8fa>
 8009048:	4631      	mov	r1, r6
 800904a:	2205      	movs	r2, #5
 800904c:	4620      	mov	r0, r4
 800904e:	f000 fcf5 	bl	8009a3c <__multadd>
 8009052:	4601      	mov	r1, r0
 8009054:	4606      	mov	r6, r0
 8009056:	4658      	mov	r0, fp
 8009058:	f000 fef8 	bl	8009e4c <__mcmp>
 800905c:	2800      	cmp	r0, #0
 800905e:	f73f add3 	bgt.w	8008c08 <_dtoa_r+0x4a0>
 8009062:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009064:	9d06      	ldr	r5, [sp, #24]
 8009066:	ea6f 0a03 	mvn.w	sl, r3
 800906a:	f04f 0900 	mov.w	r9, #0
 800906e:	4631      	mov	r1, r6
 8009070:	4620      	mov	r0, r4
 8009072:	f000 fccc 	bl	8009a0e <_Bfree>
 8009076:	2f00      	cmp	r7, #0
 8009078:	f43f aebd 	beq.w	8008df6 <_dtoa_r+0x68e>
 800907c:	f1b9 0f00 	cmp.w	r9, #0
 8009080:	d005      	beq.n	800908e <_dtoa_r+0x926>
 8009082:	45b9      	cmp	r9, r7
 8009084:	d003      	beq.n	800908e <_dtoa_r+0x926>
 8009086:	4649      	mov	r1, r9
 8009088:	4620      	mov	r0, r4
 800908a:	f000 fcc0 	bl	8009a0e <_Bfree>
 800908e:	4639      	mov	r1, r7
 8009090:	4620      	mov	r0, r4
 8009092:	f000 fcbc 	bl	8009a0e <_Bfree>
 8009096:	e6ae      	b.n	8008df6 <_dtoa_r+0x68e>
 8009098:	2600      	movs	r6, #0
 800909a:	4637      	mov	r7, r6
 800909c:	e7e1      	b.n	8009062 <_dtoa_r+0x8fa>
 800909e:	46ba      	mov	sl, r7
 80090a0:	4637      	mov	r7, r6
 80090a2:	e5b1      	b.n	8008c08 <_dtoa_r+0x4a0>
 80090a4:	40240000 	.word	0x40240000
 80090a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80f3 	beq.w	800929a <_dtoa_r+0xb32>
 80090b4:	2d00      	cmp	r5, #0
 80090b6:	dd05      	ble.n	80090c4 <_dtoa_r+0x95c>
 80090b8:	4639      	mov	r1, r7
 80090ba:	462a      	mov	r2, r5
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 fe71 	bl	8009da4 <__lshift>
 80090c2:	4607      	mov	r7, r0
 80090c4:	9b08      	ldr	r3, [sp, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d04c      	beq.n	8009164 <_dtoa_r+0x9fc>
 80090ca:	6879      	ldr	r1, [r7, #4]
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 fc6a 	bl	80099a6 <_Balloc>
 80090d2:	4605      	mov	r5, r0
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	f107 010c 	add.w	r1, r7, #12
 80090da:	3202      	adds	r2, #2
 80090dc:	0092      	lsls	r2, r2, #2
 80090de:	300c      	adds	r0, #12
 80090e0:	f000 fc56 	bl	8009990 <memcpy>
 80090e4:	2201      	movs	r2, #1
 80090e6:	4629      	mov	r1, r5
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fe5b 	bl	8009da4 <__lshift>
 80090ee:	46b9      	mov	r9, r7
 80090f0:	4607      	mov	r7, r0
 80090f2:	9b06      	ldr	r3, [sp, #24]
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	9b02      	ldr	r3, [sp, #8]
 80090f8:	f003 0301 	and.w	r3, r3, #1
 80090fc:	9308      	str	r3, [sp, #32]
 80090fe:	4631      	mov	r1, r6
 8009100:	4658      	mov	r0, fp
 8009102:	f7ff faa3 	bl	800864c <quorem>
 8009106:	4649      	mov	r1, r9
 8009108:	4605      	mov	r5, r0
 800910a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800910e:	4658      	mov	r0, fp
 8009110:	f000 fe9c 	bl	8009e4c <__mcmp>
 8009114:	463a      	mov	r2, r7
 8009116:	9002      	str	r0, [sp, #8]
 8009118:	4631      	mov	r1, r6
 800911a:	4620      	mov	r0, r4
 800911c:	f000 feb0 	bl	8009e80 <__mdiff>
 8009120:	68c3      	ldr	r3, [r0, #12]
 8009122:	4602      	mov	r2, r0
 8009124:	bb03      	cbnz	r3, 8009168 <_dtoa_r+0xa00>
 8009126:	4601      	mov	r1, r0
 8009128:	9009      	str	r0, [sp, #36]	; 0x24
 800912a:	4658      	mov	r0, fp
 800912c:	f000 fe8e 	bl	8009e4c <__mcmp>
 8009130:	4603      	mov	r3, r0
 8009132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009134:	4611      	mov	r1, r2
 8009136:	4620      	mov	r0, r4
 8009138:	9309      	str	r3, [sp, #36]	; 0x24
 800913a:	f000 fc68 	bl	8009a0e <_Bfree>
 800913e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009140:	b9a3      	cbnz	r3, 800916c <_dtoa_r+0xa04>
 8009142:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009144:	b992      	cbnz	r2, 800916c <_dtoa_r+0xa04>
 8009146:	9a08      	ldr	r2, [sp, #32]
 8009148:	b982      	cbnz	r2, 800916c <_dtoa_r+0xa04>
 800914a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800914e:	d029      	beq.n	80091a4 <_dtoa_r+0xa3c>
 8009150:	9b02      	ldr	r3, [sp, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	dd01      	ble.n	800915a <_dtoa_r+0x9f2>
 8009156:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800915a:	9b07      	ldr	r3, [sp, #28]
 800915c:	1c5d      	adds	r5, r3, #1
 800915e:	f883 8000 	strb.w	r8, [r3]
 8009162:	e784      	b.n	800906e <_dtoa_r+0x906>
 8009164:	4638      	mov	r0, r7
 8009166:	e7c2      	b.n	80090ee <_dtoa_r+0x986>
 8009168:	2301      	movs	r3, #1
 800916a:	e7e3      	b.n	8009134 <_dtoa_r+0x9cc>
 800916c:	9a02      	ldr	r2, [sp, #8]
 800916e:	2a00      	cmp	r2, #0
 8009170:	db04      	blt.n	800917c <_dtoa_r+0xa14>
 8009172:	d123      	bne.n	80091bc <_dtoa_r+0xa54>
 8009174:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009176:	bb0a      	cbnz	r2, 80091bc <_dtoa_r+0xa54>
 8009178:	9a08      	ldr	r2, [sp, #32]
 800917a:	b9fa      	cbnz	r2, 80091bc <_dtoa_r+0xa54>
 800917c:	2b00      	cmp	r3, #0
 800917e:	ddec      	ble.n	800915a <_dtoa_r+0x9f2>
 8009180:	4659      	mov	r1, fp
 8009182:	2201      	movs	r2, #1
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fe0d 	bl	8009da4 <__lshift>
 800918a:	4631      	mov	r1, r6
 800918c:	4683      	mov	fp, r0
 800918e:	f000 fe5d 	bl	8009e4c <__mcmp>
 8009192:	2800      	cmp	r0, #0
 8009194:	dc03      	bgt.n	800919e <_dtoa_r+0xa36>
 8009196:	d1e0      	bne.n	800915a <_dtoa_r+0x9f2>
 8009198:	f018 0f01 	tst.w	r8, #1
 800919c:	d0dd      	beq.n	800915a <_dtoa_r+0x9f2>
 800919e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091a2:	d1d8      	bne.n	8009156 <_dtoa_r+0x9ee>
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	9a07      	ldr	r2, [sp, #28]
 80091a8:	1c5d      	adds	r5, r3, #1
 80091aa:	2339      	movs	r3, #57	; 0x39
 80091ac:	7013      	strb	r3, [r2, #0]
 80091ae:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091b2:	1e6a      	subs	r2, r5, #1
 80091b4:	2b39      	cmp	r3, #57	; 0x39
 80091b6:	d04d      	beq.n	8009254 <_dtoa_r+0xaec>
 80091b8:	3301      	adds	r3, #1
 80091ba:	e052      	b.n	8009262 <_dtoa_r+0xafa>
 80091bc:	9a07      	ldr	r2, [sp, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f102 0501 	add.w	r5, r2, #1
 80091c4:	dd06      	ble.n	80091d4 <_dtoa_r+0xa6c>
 80091c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80091ca:	d0eb      	beq.n	80091a4 <_dtoa_r+0xa3c>
 80091cc:	f108 0801 	add.w	r8, r8, #1
 80091d0:	9b07      	ldr	r3, [sp, #28]
 80091d2:	e7c4      	b.n	800915e <_dtoa_r+0x9f6>
 80091d4:	9b06      	ldr	r3, [sp, #24]
 80091d6:	9a04      	ldr	r2, [sp, #16]
 80091d8:	1aeb      	subs	r3, r5, r3
 80091da:	4293      	cmp	r3, r2
 80091dc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80091e0:	d021      	beq.n	8009226 <_dtoa_r+0xabe>
 80091e2:	4659      	mov	r1, fp
 80091e4:	2300      	movs	r3, #0
 80091e6:	220a      	movs	r2, #10
 80091e8:	4620      	mov	r0, r4
 80091ea:	f000 fc27 	bl	8009a3c <__multadd>
 80091ee:	45b9      	cmp	r9, r7
 80091f0:	4683      	mov	fp, r0
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	f04f 020a 	mov.w	r2, #10
 80091fa:	4649      	mov	r1, r9
 80091fc:	4620      	mov	r0, r4
 80091fe:	d105      	bne.n	800920c <_dtoa_r+0xaa4>
 8009200:	f000 fc1c 	bl	8009a3c <__multadd>
 8009204:	4681      	mov	r9, r0
 8009206:	4607      	mov	r7, r0
 8009208:	9507      	str	r5, [sp, #28]
 800920a:	e778      	b.n	80090fe <_dtoa_r+0x996>
 800920c:	f000 fc16 	bl	8009a3c <__multadd>
 8009210:	4639      	mov	r1, r7
 8009212:	4681      	mov	r9, r0
 8009214:	2300      	movs	r3, #0
 8009216:	220a      	movs	r2, #10
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fc0f 	bl	8009a3c <__multadd>
 800921e:	4607      	mov	r7, r0
 8009220:	e7f2      	b.n	8009208 <_dtoa_r+0xaa0>
 8009222:	f04f 0900 	mov.w	r9, #0
 8009226:	4659      	mov	r1, fp
 8009228:	2201      	movs	r2, #1
 800922a:	4620      	mov	r0, r4
 800922c:	f000 fdba 	bl	8009da4 <__lshift>
 8009230:	4631      	mov	r1, r6
 8009232:	4683      	mov	fp, r0
 8009234:	f000 fe0a 	bl	8009e4c <__mcmp>
 8009238:	2800      	cmp	r0, #0
 800923a:	dcb8      	bgt.n	80091ae <_dtoa_r+0xa46>
 800923c:	d102      	bne.n	8009244 <_dtoa_r+0xadc>
 800923e:	f018 0f01 	tst.w	r8, #1
 8009242:	d1b4      	bne.n	80091ae <_dtoa_r+0xa46>
 8009244:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009248:	1e6a      	subs	r2, r5, #1
 800924a:	2b30      	cmp	r3, #48	; 0x30
 800924c:	f47f af0f 	bne.w	800906e <_dtoa_r+0x906>
 8009250:	4615      	mov	r5, r2
 8009252:	e7f7      	b.n	8009244 <_dtoa_r+0xadc>
 8009254:	9b06      	ldr	r3, [sp, #24]
 8009256:	4293      	cmp	r3, r2
 8009258:	d105      	bne.n	8009266 <_dtoa_r+0xafe>
 800925a:	2331      	movs	r3, #49	; 0x31
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	f10a 0a01 	add.w	sl, sl, #1
 8009262:	7013      	strb	r3, [r2, #0]
 8009264:	e703      	b.n	800906e <_dtoa_r+0x906>
 8009266:	4615      	mov	r5, r2
 8009268:	e7a1      	b.n	80091ae <_dtoa_r+0xa46>
 800926a:	4b17      	ldr	r3, [pc, #92]	; (80092c8 <_dtoa_r+0xb60>)
 800926c:	f7ff bae1 	b.w	8008832 <_dtoa_r+0xca>
 8009270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009272:	2b00      	cmp	r3, #0
 8009274:	f47f aabb 	bne.w	80087ee <_dtoa_r+0x86>
 8009278:	4b14      	ldr	r3, [pc, #80]	; (80092cc <_dtoa_r+0xb64>)
 800927a:	f7ff bada 	b.w	8008832 <_dtoa_r+0xca>
 800927e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009280:	2b01      	cmp	r3, #1
 8009282:	f77f ae3f 	ble.w	8008f04 <_dtoa_r+0x79c>
 8009286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009288:	9308      	str	r3, [sp, #32]
 800928a:	e653      	b.n	8008f34 <_dtoa_r+0x7cc>
 800928c:	9b04      	ldr	r3, [sp, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	dc03      	bgt.n	800929a <_dtoa_r+0xb32>
 8009292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009294:	2b02      	cmp	r3, #2
 8009296:	f73f aed5 	bgt.w	8009044 <_dtoa_r+0x8dc>
 800929a:	9d06      	ldr	r5, [sp, #24]
 800929c:	4631      	mov	r1, r6
 800929e:	4658      	mov	r0, fp
 80092a0:	f7ff f9d4 	bl	800864c <quorem>
 80092a4:	9b06      	ldr	r3, [sp, #24]
 80092a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80092aa:	f805 8b01 	strb.w	r8, [r5], #1
 80092ae:	9a04      	ldr	r2, [sp, #16]
 80092b0:	1aeb      	subs	r3, r5, r3
 80092b2:	429a      	cmp	r2, r3
 80092b4:	ddb5      	ble.n	8009222 <_dtoa_r+0xaba>
 80092b6:	4659      	mov	r1, fp
 80092b8:	2300      	movs	r3, #0
 80092ba:	220a      	movs	r2, #10
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fbbd 	bl	8009a3c <__multadd>
 80092c2:	4683      	mov	fp, r0
 80092c4:	e7ea      	b.n	800929c <_dtoa_r+0xb34>
 80092c6:	bf00      	nop
 80092c8:	0800c0c0 	.word	0x0800c0c0
 80092cc:	0800c138 	.word	0x0800c138

080092d0 <rshift>:
 80092d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d2:	6906      	ldr	r6, [r0, #16]
 80092d4:	114b      	asrs	r3, r1, #5
 80092d6:	429e      	cmp	r6, r3
 80092d8:	f100 0414 	add.w	r4, r0, #20
 80092dc:	dd31      	ble.n	8009342 <rshift+0x72>
 80092de:	f011 011f 	ands.w	r1, r1, #31
 80092e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80092e6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80092ea:	d108      	bne.n	80092fe <rshift+0x2e>
 80092ec:	4621      	mov	r1, r4
 80092ee:	42b2      	cmp	r2, r6
 80092f0:	460b      	mov	r3, r1
 80092f2:	d211      	bcs.n	8009318 <rshift+0x48>
 80092f4:	f852 3b04 	ldr.w	r3, [r2], #4
 80092f8:	f841 3b04 	str.w	r3, [r1], #4
 80092fc:	e7f7      	b.n	80092ee <rshift+0x1e>
 80092fe:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009302:	4623      	mov	r3, r4
 8009304:	f1c1 0c20 	rsb	ip, r1, #32
 8009308:	40cd      	lsrs	r5, r1
 800930a:	3204      	adds	r2, #4
 800930c:	42b2      	cmp	r2, r6
 800930e:	4617      	mov	r7, r2
 8009310:	d30d      	bcc.n	800932e <rshift+0x5e>
 8009312:	601d      	str	r5, [r3, #0]
 8009314:	b105      	cbz	r5, 8009318 <rshift+0x48>
 8009316:	3304      	adds	r3, #4
 8009318:	42a3      	cmp	r3, r4
 800931a:	eba3 0204 	sub.w	r2, r3, r4
 800931e:	bf08      	it	eq
 8009320:	2300      	moveq	r3, #0
 8009322:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009326:	6102      	str	r2, [r0, #16]
 8009328:	bf08      	it	eq
 800932a:	6143      	streq	r3, [r0, #20]
 800932c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800932e:	683f      	ldr	r7, [r7, #0]
 8009330:	fa07 f70c 	lsl.w	r7, r7, ip
 8009334:	433d      	orrs	r5, r7
 8009336:	f843 5b04 	str.w	r5, [r3], #4
 800933a:	f852 5b04 	ldr.w	r5, [r2], #4
 800933e:	40cd      	lsrs	r5, r1
 8009340:	e7e4      	b.n	800930c <rshift+0x3c>
 8009342:	4623      	mov	r3, r4
 8009344:	e7e8      	b.n	8009318 <rshift+0x48>

08009346 <__hexdig_fun>:
 8009346:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800934a:	2b09      	cmp	r3, #9
 800934c:	d802      	bhi.n	8009354 <__hexdig_fun+0xe>
 800934e:	3820      	subs	r0, #32
 8009350:	b2c0      	uxtb	r0, r0
 8009352:	4770      	bx	lr
 8009354:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009358:	2b05      	cmp	r3, #5
 800935a:	d801      	bhi.n	8009360 <__hexdig_fun+0x1a>
 800935c:	3847      	subs	r0, #71	; 0x47
 800935e:	e7f7      	b.n	8009350 <__hexdig_fun+0xa>
 8009360:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009364:	2b05      	cmp	r3, #5
 8009366:	d801      	bhi.n	800936c <__hexdig_fun+0x26>
 8009368:	3827      	subs	r0, #39	; 0x27
 800936a:	e7f1      	b.n	8009350 <__hexdig_fun+0xa>
 800936c:	2000      	movs	r0, #0
 800936e:	4770      	bx	lr

08009370 <__gethex>:
 8009370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009374:	b08b      	sub	sp, #44	; 0x2c
 8009376:	9002      	str	r0, [sp, #8]
 8009378:	9816      	ldr	r0, [sp, #88]	; 0x58
 800937a:	468a      	mov	sl, r1
 800937c:	4690      	mov	r8, r2
 800937e:	9306      	str	r3, [sp, #24]
 8009380:	f000 face 	bl	8009920 <__localeconv_l>
 8009384:	6803      	ldr	r3, [r0, #0]
 8009386:	f04f 0b00 	mov.w	fp, #0
 800938a:	4618      	mov	r0, r3
 800938c:	9303      	str	r3, [sp, #12]
 800938e:	f7f6 fedf 	bl	8000150 <strlen>
 8009392:	9b03      	ldr	r3, [sp, #12]
 8009394:	9001      	str	r0, [sp, #4]
 8009396:	4403      	add	r3, r0
 8009398:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800939c:	9307      	str	r3, [sp, #28]
 800939e:	f8da 3000 	ldr.w	r3, [sl]
 80093a2:	3302      	adds	r3, #2
 80093a4:	461f      	mov	r7, r3
 80093a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80093aa:	2830      	cmp	r0, #48	; 0x30
 80093ac:	d06c      	beq.n	8009488 <__gethex+0x118>
 80093ae:	f7ff ffca 	bl	8009346 <__hexdig_fun>
 80093b2:	4604      	mov	r4, r0
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d16a      	bne.n	800948e <__gethex+0x11e>
 80093b8:	9a01      	ldr	r2, [sp, #4]
 80093ba:	9903      	ldr	r1, [sp, #12]
 80093bc:	4638      	mov	r0, r7
 80093be:	f001 f901 	bl	800a5c4 <strncmp>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d166      	bne.n	8009494 <__gethex+0x124>
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	5cf8      	ldrb	r0, [r7, r3]
 80093ca:	18fe      	adds	r6, r7, r3
 80093cc:	f7ff ffbb 	bl	8009346 <__hexdig_fun>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d062      	beq.n	800949a <__gethex+0x12a>
 80093d4:	4633      	mov	r3, r6
 80093d6:	7818      	ldrb	r0, [r3, #0]
 80093d8:	461f      	mov	r7, r3
 80093da:	2830      	cmp	r0, #48	; 0x30
 80093dc:	f103 0301 	add.w	r3, r3, #1
 80093e0:	d0f9      	beq.n	80093d6 <__gethex+0x66>
 80093e2:	f7ff ffb0 	bl	8009346 <__hexdig_fun>
 80093e6:	fab0 f580 	clz	r5, r0
 80093ea:	4634      	mov	r4, r6
 80093ec:	f04f 0b01 	mov.w	fp, #1
 80093f0:	096d      	lsrs	r5, r5, #5
 80093f2:	463a      	mov	r2, r7
 80093f4:	4616      	mov	r6, r2
 80093f6:	7830      	ldrb	r0, [r6, #0]
 80093f8:	3201      	adds	r2, #1
 80093fa:	f7ff ffa4 	bl	8009346 <__hexdig_fun>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d1f8      	bne.n	80093f4 <__gethex+0x84>
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	9903      	ldr	r1, [sp, #12]
 8009406:	4630      	mov	r0, r6
 8009408:	f001 f8dc 	bl	800a5c4 <strncmp>
 800940c:	b950      	cbnz	r0, 8009424 <__gethex+0xb4>
 800940e:	b954      	cbnz	r4, 8009426 <__gethex+0xb6>
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	18f4      	adds	r4, r6, r3
 8009414:	4622      	mov	r2, r4
 8009416:	4616      	mov	r6, r2
 8009418:	7830      	ldrb	r0, [r6, #0]
 800941a:	3201      	adds	r2, #1
 800941c:	f7ff ff93 	bl	8009346 <__hexdig_fun>
 8009420:	2800      	cmp	r0, #0
 8009422:	d1f8      	bne.n	8009416 <__gethex+0xa6>
 8009424:	b10c      	cbz	r4, 800942a <__gethex+0xba>
 8009426:	1ba4      	subs	r4, r4, r6
 8009428:	00a4      	lsls	r4, r4, #2
 800942a:	7833      	ldrb	r3, [r6, #0]
 800942c:	2b50      	cmp	r3, #80	; 0x50
 800942e:	d001      	beq.n	8009434 <__gethex+0xc4>
 8009430:	2b70      	cmp	r3, #112	; 0x70
 8009432:	d140      	bne.n	80094b6 <__gethex+0x146>
 8009434:	7873      	ldrb	r3, [r6, #1]
 8009436:	2b2b      	cmp	r3, #43	; 0x2b
 8009438:	d031      	beq.n	800949e <__gethex+0x12e>
 800943a:	2b2d      	cmp	r3, #45	; 0x2d
 800943c:	d033      	beq.n	80094a6 <__gethex+0x136>
 800943e:	f04f 0900 	mov.w	r9, #0
 8009442:	1c71      	adds	r1, r6, #1
 8009444:	7808      	ldrb	r0, [r1, #0]
 8009446:	f7ff ff7e 	bl	8009346 <__hexdig_fun>
 800944a:	1e43      	subs	r3, r0, #1
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b18      	cmp	r3, #24
 8009450:	d831      	bhi.n	80094b6 <__gethex+0x146>
 8009452:	f1a0 0210 	sub.w	r2, r0, #16
 8009456:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800945a:	f7ff ff74 	bl	8009346 <__hexdig_fun>
 800945e:	1e43      	subs	r3, r0, #1
 8009460:	b2db      	uxtb	r3, r3
 8009462:	2b18      	cmp	r3, #24
 8009464:	d922      	bls.n	80094ac <__gethex+0x13c>
 8009466:	f1b9 0f00 	cmp.w	r9, #0
 800946a:	d000      	beq.n	800946e <__gethex+0xfe>
 800946c:	4252      	negs	r2, r2
 800946e:	4414      	add	r4, r2
 8009470:	f8ca 1000 	str.w	r1, [sl]
 8009474:	b30d      	cbz	r5, 80094ba <__gethex+0x14a>
 8009476:	f1bb 0f00 	cmp.w	fp, #0
 800947a:	bf0c      	ite	eq
 800947c:	2706      	moveq	r7, #6
 800947e:	2700      	movne	r7, #0
 8009480:	4638      	mov	r0, r7
 8009482:	b00b      	add	sp, #44	; 0x2c
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009488:	f10b 0b01 	add.w	fp, fp, #1
 800948c:	e78a      	b.n	80093a4 <__gethex+0x34>
 800948e:	2500      	movs	r5, #0
 8009490:	462c      	mov	r4, r5
 8009492:	e7ae      	b.n	80093f2 <__gethex+0x82>
 8009494:	463e      	mov	r6, r7
 8009496:	2501      	movs	r5, #1
 8009498:	e7c7      	b.n	800942a <__gethex+0xba>
 800949a:	4604      	mov	r4, r0
 800949c:	e7fb      	b.n	8009496 <__gethex+0x126>
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	1cb1      	adds	r1, r6, #2
 80094a4:	e7ce      	b.n	8009444 <__gethex+0xd4>
 80094a6:	f04f 0901 	mov.w	r9, #1
 80094aa:	e7fa      	b.n	80094a2 <__gethex+0x132>
 80094ac:	230a      	movs	r3, #10
 80094ae:	fb03 0202 	mla	r2, r3, r2, r0
 80094b2:	3a10      	subs	r2, #16
 80094b4:	e7cf      	b.n	8009456 <__gethex+0xe6>
 80094b6:	4631      	mov	r1, r6
 80094b8:	e7da      	b.n	8009470 <__gethex+0x100>
 80094ba:	4629      	mov	r1, r5
 80094bc:	1bf3      	subs	r3, r6, r7
 80094be:	3b01      	subs	r3, #1
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	dc49      	bgt.n	8009558 <__gethex+0x1e8>
 80094c4:	9802      	ldr	r0, [sp, #8]
 80094c6:	f000 fa6e 	bl	80099a6 <_Balloc>
 80094ca:	f04f 0b00 	mov.w	fp, #0
 80094ce:	4605      	mov	r5, r0
 80094d0:	46da      	mov	sl, fp
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	f100 0914 	add.w	r9, r0, #20
 80094d8:	f1c3 0301 	rsb	r3, r3, #1
 80094dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80094e0:	9308      	str	r3, [sp, #32]
 80094e2:	42b7      	cmp	r7, r6
 80094e4:	d33b      	bcc.n	800955e <__gethex+0x1ee>
 80094e6:	9804      	ldr	r0, [sp, #16]
 80094e8:	f840 ab04 	str.w	sl, [r0], #4
 80094ec:	eba0 0009 	sub.w	r0, r0, r9
 80094f0:	1080      	asrs	r0, r0, #2
 80094f2:	6128      	str	r0, [r5, #16]
 80094f4:	0147      	lsls	r7, r0, #5
 80094f6:	4650      	mov	r0, sl
 80094f8:	f000 fb19 	bl	8009b2e <__hi0bits>
 80094fc:	f8d8 6000 	ldr.w	r6, [r8]
 8009500:	1a3f      	subs	r7, r7, r0
 8009502:	42b7      	cmp	r7, r6
 8009504:	dd64      	ble.n	80095d0 <__gethex+0x260>
 8009506:	1bbf      	subs	r7, r7, r6
 8009508:	4639      	mov	r1, r7
 800950a:	4628      	mov	r0, r5
 800950c:	f000 fe23 	bl	800a156 <__any_on>
 8009510:	4682      	mov	sl, r0
 8009512:	b178      	cbz	r0, 8009534 <__gethex+0x1c4>
 8009514:	f04f 0a01 	mov.w	sl, #1
 8009518:	1e7b      	subs	r3, r7, #1
 800951a:	1159      	asrs	r1, r3, #5
 800951c:	f003 021f 	and.w	r2, r3, #31
 8009520:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009524:	fa0a f202 	lsl.w	r2, sl, r2
 8009528:	420a      	tst	r2, r1
 800952a:	d003      	beq.n	8009534 <__gethex+0x1c4>
 800952c:	4553      	cmp	r3, sl
 800952e:	dc46      	bgt.n	80095be <__gethex+0x24e>
 8009530:	f04f 0a02 	mov.w	sl, #2
 8009534:	4639      	mov	r1, r7
 8009536:	4628      	mov	r0, r5
 8009538:	f7ff feca 	bl	80092d0 <rshift>
 800953c:	443c      	add	r4, r7
 800953e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009542:	42a3      	cmp	r3, r4
 8009544:	da52      	bge.n	80095ec <__gethex+0x27c>
 8009546:	4629      	mov	r1, r5
 8009548:	9802      	ldr	r0, [sp, #8]
 800954a:	f000 fa60 	bl	8009a0e <_Bfree>
 800954e:	2300      	movs	r3, #0
 8009550:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009552:	27a3      	movs	r7, #163	; 0xa3
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	e793      	b.n	8009480 <__gethex+0x110>
 8009558:	3101      	adds	r1, #1
 800955a:	105b      	asrs	r3, r3, #1
 800955c:	e7b0      	b.n	80094c0 <__gethex+0x150>
 800955e:	1e73      	subs	r3, r6, #1
 8009560:	9305      	str	r3, [sp, #20]
 8009562:	9a07      	ldr	r2, [sp, #28]
 8009564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009568:	4293      	cmp	r3, r2
 800956a:	d018      	beq.n	800959e <__gethex+0x22e>
 800956c:	f1bb 0f20 	cmp.w	fp, #32
 8009570:	d107      	bne.n	8009582 <__gethex+0x212>
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	f8c3 a000 	str.w	sl, [r3]
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	46d3      	mov	fp, sl
 800957e:	3304      	adds	r3, #4
 8009580:	9304      	str	r3, [sp, #16]
 8009582:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009586:	f7ff fede 	bl	8009346 <__hexdig_fun>
 800958a:	f000 000f 	and.w	r0, r0, #15
 800958e:	fa00 f00b 	lsl.w	r0, r0, fp
 8009592:	ea4a 0a00 	orr.w	sl, sl, r0
 8009596:	f10b 0b04 	add.w	fp, fp, #4
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	e00d      	b.n	80095ba <__gethex+0x24a>
 800959e:	9b05      	ldr	r3, [sp, #20]
 80095a0:	9a08      	ldr	r2, [sp, #32]
 80095a2:	4413      	add	r3, r2
 80095a4:	42bb      	cmp	r3, r7
 80095a6:	d3e1      	bcc.n	800956c <__gethex+0x1fc>
 80095a8:	4618      	mov	r0, r3
 80095aa:	9a01      	ldr	r2, [sp, #4]
 80095ac:	9903      	ldr	r1, [sp, #12]
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	f001 f808 	bl	800a5c4 <strncmp>
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	2800      	cmp	r0, #0
 80095b8:	d1d8      	bne.n	800956c <__gethex+0x1fc>
 80095ba:	461e      	mov	r6, r3
 80095bc:	e791      	b.n	80094e2 <__gethex+0x172>
 80095be:	1eb9      	subs	r1, r7, #2
 80095c0:	4628      	mov	r0, r5
 80095c2:	f000 fdc8 	bl	800a156 <__any_on>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d0b2      	beq.n	8009530 <__gethex+0x1c0>
 80095ca:	f04f 0a03 	mov.w	sl, #3
 80095ce:	e7b1      	b.n	8009534 <__gethex+0x1c4>
 80095d0:	da09      	bge.n	80095e6 <__gethex+0x276>
 80095d2:	1bf7      	subs	r7, r6, r7
 80095d4:	4629      	mov	r1, r5
 80095d6:	463a      	mov	r2, r7
 80095d8:	9802      	ldr	r0, [sp, #8]
 80095da:	f000 fbe3 	bl	8009da4 <__lshift>
 80095de:	4605      	mov	r5, r0
 80095e0:	1be4      	subs	r4, r4, r7
 80095e2:	f100 0914 	add.w	r9, r0, #20
 80095e6:	f04f 0a00 	mov.w	sl, #0
 80095ea:	e7a8      	b.n	800953e <__gethex+0x1ce>
 80095ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80095f0:	42a0      	cmp	r0, r4
 80095f2:	dd6b      	ble.n	80096cc <__gethex+0x35c>
 80095f4:	1b04      	subs	r4, r0, r4
 80095f6:	42a6      	cmp	r6, r4
 80095f8:	dc2e      	bgt.n	8009658 <__gethex+0x2e8>
 80095fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d022      	beq.n	8009648 <__gethex+0x2d8>
 8009602:	2b03      	cmp	r3, #3
 8009604:	d024      	beq.n	8009650 <__gethex+0x2e0>
 8009606:	2b01      	cmp	r3, #1
 8009608:	d115      	bne.n	8009636 <__gethex+0x2c6>
 800960a:	42a6      	cmp	r6, r4
 800960c:	d113      	bne.n	8009636 <__gethex+0x2c6>
 800960e:	2e01      	cmp	r6, #1
 8009610:	dc0b      	bgt.n	800962a <__gethex+0x2ba>
 8009612:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009616:	9a06      	ldr	r2, [sp, #24]
 8009618:	2762      	movs	r7, #98	; 0x62
 800961a:	6013      	str	r3, [r2, #0]
 800961c:	2301      	movs	r3, #1
 800961e:	612b      	str	r3, [r5, #16]
 8009620:	f8c9 3000 	str.w	r3, [r9]
 8009624:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009626:	601d      	str	r5, [r3, #0]
 8009628:	e72a      	b.n	8009480 <__gethex+0x110>
 800962a:	1e71      	subs	r1, r6, #1
 800962c:	4628      	mov	r0, r5
 800962e:	f000 fd92 	bl	800a156 <__any_on>
 8009632:	2800      	cmp	r0, #0
 8009634:	d1ed      	bne.n	8009612 <__gethex+0x2a2>
 8009636:	4629      	mov	r1, r5
 8009638:	9802      	ldr	r0, [sp, #8]
 800963a:	f000 f9e8 	bl	8009a0e <_Bfree>
 800963e:	2300      	movs	r3, #0
 8009640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009642:	2750      	movs	r7, #80	; 0x50
 8009644:	6013      	str	r3, [r2, #0]
 8009646:	e71b      	b.n	8009480 <__gethex+0x110>
 8009648:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0e1      	beq.n	8009612 <__gethex+0x2a2>
 800964e:	e7f2      	b.n	8009636 <__gethex+0x2c6>
 8009650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1dd      	bne.n	8009612 <__gethex+0x2a2>
 8009656:	e7ee      	b.n	8009636 <__gethex+0x2c6>
 8009658:	1e67      	subs	r7, r4, #1
 800965a:	f1ba 0f00 	cmp.w	sl, #0
 800965e:	d132      	bne.n	80096c6 <__gethex+0x356>
 8009660:	b127      	cbz	r7, 800966c <__gethex+0x2fc>
 8009662:	4639      	mov	r1, r7
 8009664:	4628      	mov	r0, r5
 8009666:	f000 fd76 	bl	800a156 <__any_on>
 800966a:	4682      	mov	sl, r0
 800966c:	2301      	movs	r3, #1
 800966e:	117a      	asrs	r2, r7, #5
 8009670:	f007 071f 	and.w	r7, r7, #31
 8009674:	fa03 f707 	lsl.w	r7, r3, r7
 8009678:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800967c:	4621      	mov	r1, r4
 800967e:	421f      	tst	r7, r3
 8009680:	f04f 0702 	mov.w	r7, #2
 8009684:	4628      	mov	r0, r5
 8009686:	bf18      	it	ne
 8009688:	f04a 0a02 	orrne.w	sl, sl, #2
 800968c:	1b36      	subs	r6, r6, r4
 800968e:	f7ff fe1f 	bl	80092d0 <rshift>
 8009692:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009696:	f1ba 0f00 	cmp.w	sl, #0
 800969a:	d048      	beq.n	800972e <__gethex+0x3be>
 800969c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80096a0:	2b02      	cmp	r3, #2
 80096a2:	d015      	beq.n	80096d0 <__gethex+0x360>
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d017      	beq.n	80096d8 <__gethex+0x368>
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d109      	bne.n	80096c0 <__gethex+0x350>
 80096ac:	f01a 0f02 	tst.w	sl, #2
 80096b0:	d006      	beq.n	80096c0 <__gethex+0x350>
 80096b2:	f8d9 3000 	ldr.w	r3, [r9]
 80096b6:	ea4a 0a03 	orr.w	sl, sl, r3
 80096ba:	f01a 0f01 	tst.w	sl, #1
 80096be:	d10e      	bne.n	80096de <__gethex+0x36e>
 80096c0:	f047 0710 	orr.w	r7, r7, #16
 80096c4:	e033      	b.n	800972e <__gethex+0x3be>
 80096c6:	f04f 0a01 	mov.w	sl, #1
 80096ca:	e7cf      	b.n	800966c <__gethex+0x2fc>
 80096cc:	2701      	movs	r7, #1
 80096ce:	e7e2      	b.n	8009696 <__gethex+0x326>
 80096d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096d2:	f1c3 0301 	rsb	r3, r3, #1
 80096d6:	9315      	str	r3, [sp, #84]	; 0x54
 80096d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <__gethex+0x350>
 80096de:	f04f 0c00 	mov.w	ip, #0
 80096e2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80096e6:	f105 0314 	add.w	r3, r5, #20
 80096ea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80096ee:	eb03 010a 	add.w	r1, r3, sl
 80096f2:	4618      	mov	r0, r3
 80096f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096fc:	d01c      	beq.n	8009738 <__gethex+0x3c8>
 80096fe:	3201      	adds	r2, #1
 8009700:	6002      	str	r2, [r0, #0]
 8009702:	2f02      	cmp	r7, #2
 8009704:	f105 0314 	add.w	r3, r5, #20
 8009708:	d138      	bne.n	800977c <__gethex+0x40c>
 800970a:	f8d8 2000 	ldr.w	r2, [r8]
 800970e:	3a01      	subs	r2, #1
 8009710:	42b2      	cmp	r2, r6
 8009712:	d10a      	bne.n	800972a <__gethex+0x3ba>
 8009714:	2201      	movs	r2, #1
 8009716:	1171      	asrs	r1, r6, #5
 8009718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800971c:	f006 061f 	and.w	r6, r6, #31
 8009720:	fa02 f606 	lsl.w	r6, r2, r6
 8009724:	421e      	tst	r6, r3
 8009726:	bf18      	it	ne
 8009728:	4617      	movne	r7, r2
 800972a:	f047 0720 	orr.w	r7, r7, #32
 800972e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009730:	601d      	str	r5, [r3, #0]
 8009732:	9b06      	ldr	r3, [sp, #24]
 8009734:	601c      	str	r4, [r3, #0]
 8009736:	e6a3      	b.n	8009480 <__gethex+0x110>
 8009738:	4299      	cmp	r1, r3
 800973a:	f843 cc04 	str.w	ip, [r3, #-4]
 800973e:	d8d8      	bhi.n	80096f2 <__gethex+0x382>
 8009740:	68ab      	ldr	r3, [r5, #8]
 8009742:	4599      	cmp	r9, r3
 8009744:	db12      	blt.n	800976c <__gethex+0x3fc>
 8009746:	6869      	ldr	r1, [r5, #4]
 8009748:	9802      	ldr	r0, [sp, #8]
 800974a:	3101      	adds	r1, #1
 800974c:	f000 f92b 	bl	80099a6 <_Balloc>
 8009750:	4683      	mov	fp, r0
 8009752:	692a      	ldr	r2, [r5, #16]
 8009754:	f105 010c 	add.w	r1, r5, #12
 8009758:	3202      	adds	r2, #2
 800975a:	0092      	lsls	r2, r2, #2
 800975c:	300c      	adds	r0, #12
 800975e:	f000 f917 	bl	8009990 <memcpy>
 8009762:	4629      	mov	r1, r5
 8009764:	9802      	ldr	r0, [sp, #8]
 8009766:	f000 f952 	bl	8009a0e <_Bfree>
 800976a:	465d      	mov	r5, fp
 800976c:	692b      	ldr	r3, [r5, #16]
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	612a      	str	r2, [r5, #16]
 8009772:	2201      	movs	r2, #1
 8009774:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009778:	615a      	str	r2, [r3, #20]
 800977a:	e7c2      	b.n	8009702 <__gethex+0x392>
 800977c:	692a      	ldr	r2, [r5, #16]
 800977e:	454a      	cmp	r2, r9
 8009780:	dd0b      	ble.n	800979a <__gethex+0x42a>
 8009782:	2101      	movs	r1, #1
 8009784:	4628      	mov	r0, r5
 8009786:	f7ff fda3 	bl	80092d0 <rshift>
 800978a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800978e:	3401      	adds	r4, #1
 8009790:	42a3      	cmp	r3, r4
 8009792:	f6ff aed8 	blt.w	8009546 <__gethex+0x1d6>
 8009796:	2701      	movs	r7, #1
 8009798:	e7c7      	b.n	800972a <__gethex+0x3ba>
 800979a:	f016 061f 	ands.w	r6, r6, #31
 800979e:	d0fa      	beq.n	8009796 <__gethex+0x426>
 80097a0:	449a      	add	sl, r3
 80097a2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80097a6:	f000 f9c2 	bl	8009b2e <__hi0bits>
 80097aa:	f1c6 0620 	rsb	r6, r6, #32
 80097ae:	42b0      	cmp	r0, r6
 80097b0:	dbe7      	blt.n	8009782 <__gethex+0x412>
 80097b2:	e7f0      	b.n	8009796 <__gethex+0x426>

080097b4 <L_shift>:
 80097b4:	f1c2 0208 	rsb	r2, r2, #8
 80097b8:	0092      	lsls	r2, r2, #2
 80097ba:	b570      	push	{r4, r5, r6, lr}
 80097bc:	f1c2 0620 	rsb	r6, r2, #32
 80097c0:	6843      	ldr	r3, [r0, #4]
 80097c2:	6804      	ldr	r4, [r0, #0]
 80097c4:	fa03 f506 	lsl.w	r5, r3, r6
 80097c8:	432c      	orrs	r4, r5
 80097ca:	40d3      	lsrs	r3, r2
 80097cc:	6004      	str	r4, [r0, #0]
 80097ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80097d2:	4288      	cmp	r0, r1
 80097d4:	d3f4      	bcc.n	80097c0 <L_shift+0xc>
 80097d6:	bd70      	pop	{r4, r5, r6, pc}

080097d8 <__match>:
 80097d8:	b530      	push	{r4, r5, lr}
 80097da:	6803      	ldr	r3, [r0, #0]
 80097dc:	3301      	adds	r3, #1
 80097de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e2:	b914      	cbnz	r4, 80097ea <__match+0x12>
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	2001      	movs	r0, #1
 80097e8:	bd30      	pop	{r4, r5, pc}
 80097ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097f2:	2d19      	cmp	r5, #25
 80097f4:	bf98      	it	ls
 80097f6:	3220      	addls	r2, #32
 80097f8:	42a2      	cmp	r2, r4
 80097fa:	d0f0      	beq.n	80097de <__match+0x6>
 80097fc:	2000      	movs	r0, #0
 80097fe:	e7f3      	b.n	80097e8 <__match+0x10>

08009800 <__hexnan>:
 8009800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009804:	2500      	movs	r5, #0
 8009806:	680b      	ldr	r3, [r1, #0]
 8009808:	4682      	mov	sl, r0
 800980a:	115f      	asrs	r7, r3, #5
 800980c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009810:	f013 031f 	ands.w	r3, r3, #31
 8009814:	bf18      	it	ne
 8009816:	3704      	addne	r7, #4
 8009818:	1f3e      	subs	r6, r7, #4
 800981a:	4690      	mov	r8, r2
 800981c:	46b1      	mov	r9, r6
 800981e:	4634      	mov	r4, r6
 8009820:	46ab      	mov	fp, r5
 8009822:	b087      	sub	sp, #28
 8009824:	6801      	ldr	r1, [r0, #0]
 8009826:	9301      	str	r3, [sp, #4]
 8009828:	f847 5c04 	str.w	r5, [r7, #-4]
 800982c:	9502      	str	r5, [sp, #8]
 800982e:	784a      	ldrb	r2, [r1, #1]
 8009830:	1c4b      	adds	r3, r1, #1
 8009832:	9303      	str	r3, [sp, #12]
 8009834:	b342      	cbz	r2, 8009888 <__hexnan+0x88>
 8009836:	4610      	mov	r0, r2
 8009838:	9105      	str	r1, [sp, #20]
 800983a:	9204      	str	r2, [sp, #16]
 800983c:	f7ff fd83 	bl	8009346 <__hexdig_fun>
 8009840:	2800      	cmp	r0, #0
 8009842:	d143      	bne.n	80098cc <__hexnan+0xcc>
 8009844:	9a04      	ldr	r2, [sp, #16]
 8009846:	9905      	ldr	r1, [sp, #20]
 8009848:	2a20      	cmp	r2, #32
 800984a:	d818      	bhi.n	800987e <__hexnan+0x7e>
 800984c:	9b02      	ldr	r3, [sp, #8]
 800984e:	459b      	cmp	fp, r3
 8009850:	dd13      	ble.n	800987a <__hexnan+0x7a>
 8009852:	454c      	cmp	r4, r9
 8009854:	d206      	bcs.n	8009864 <__hexnan+0x64>
 8009856:	2d07      	cmp	r5, #7
 8009858:	dc04      	bgt.n	8009864 <__hexnan+0x64>
 800985a:	462a      	mov	r2, r5
 800985c:	4649      	mov	r1, r9
 800985e:	4620      	mov	r0, r4
 8009860:	f7ff ffa8 	bl	80097b4 <L_shift>
 8009864:	4544      	cmp	r4, r8
 8009866:	d944      	bls.n	80098f2 <__hexnan+0xf2>
 8009868:	2300      	movs	r3, #0
 800986a:	f1a4 0904 	sub.w	r9, r4, #4
 800986e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009872:	461d      	mov	r5, r3
 8009874:	464c      	mov	r4, r9
 8009876:	f8cd b008 	str.w	fp, [sp, #8]
 800987a:	9903      	ldr	r1, [sp, #12]
 800987c:	e7d7      	b.n	800982e <__hexnan+0x2e>
 800987e:	2a29      	cmp	r2, #41	; 0x29
 8009880:	d14a      	bne.n	8009918 <__hexnan+0x118>
 8009882:	3102      	adds	r1, #2
 8009884:	f8ca 1000 	str.w	r1, [sl]
 8009888:	f1bb 0f00 	cmp.w	fp, #0
 800988c:	d044      	beq.n	8009918 <__hexnan+0x118>
 800988e:	454c      	cmp	r4, r9
 8009890:	d206      	bcs.n	80098a0 <__hexnan+0xa0>
 8009892:	2d07      	cmp	r5, #7
 8009894:	dc04      	bgt.n	80098a0 <__hexnan+0xa0>
 8009896:	462a      	mov	r2, r5
 8009898:	4649      	mov	r1, r9
 800989a:	4620      	mov	r0, r4
 800989c:	f7ff ff8a 	bl	80097b4 <L_shift>
 80098a0:	4544      	cmp	r4, r8
 80098a2:	d928      	bls.n	80098f6 <__hexnan+0xf6>
 80098a4:	4643      	mov	r3, r8
 80098a6:	f854 2b04 	ldr.w	r2, [r4], #4
 80098aa:	42a6      	cmp	r6, r4
 80098ac:	f843 2b04 	str.w	r2, [r3], #4
 80098b0:	d2f9      	bcs.n	80098a6 <__hexnan+0xa6>
 80098b2:	2200      	movs	r2, #0
 80098b4:	f843 2b04 	str.w	r2, [r3], #4
 80098b8:	429e      	cmp	r6, r3
 80098ba:	d2fb      	bcs.n	80098b4 <__hexnan+0xb4>
 80098bc:	6833      	ldr	r3, [r6, #0]
 80098be:	b91b      	cbnz	r3, 80098c8 <__hexnan+0xc8>
 80098c0:	4546      	cmp	r6, r8
 80098c2:	d127      	bne.n	8009914 <__hexnan+0x114>
 80098c4:	2301      	movs	r3, #1
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	2005      	movs	r0, #5
 80098ca:	e026      	b.n	800991a <__hexnan+0x11a>
 80098cc:	3501      	adds	r5, #1
 80098ce:	2d08      	cmp	r5, #8
 80098d0:	f10b 0b01 	add.w	fp, fp, #1
 80098d4:	dd06      	ble.n	80098e4 <__hexnan+0xe4>
 80098d6:	4544      	cmp	r4, r8
 80098d8:	d9cf      	bls.n	800987a <__hexnan+0x7a>
 80098da:	2300      	movs	r3, #0
 80098dc:	2501      	movs	r5, #1
 80098de:	f844 3c04 	str.w	r3, [r4, #-4]
 80098e2:	3c04      	subs	r4, #4
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	f000 000f 	and.w	r0, r0, #15
 80098ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	e7c3      	b.n	800987a <__hexnan+0x7a>
 80098f2:	2508      	movs	r5, #8
 80098f4:	e7c1      	b.n	800987a <__hexnan+0x7a>
 80098f6:	9b01      	ldr	r3, [sp, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d0df      	beq.n	80098bc <__hexnan+0xbc>
 80098fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009900:	f1c3 0320 	rsb	r3, r3, #32
 8009904:	fa22 f303 	lsr.w	r3, r2, r3
 8009908:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800990c:	401a      	ands	r2, r3
 800990e:	f847 2c04 	str.w	r2, [r7, #-4]
 8009912:	e7d3      	b.n	80098bc <__hexnan+0xbc>
 8009914:	3e04      	subs	r6, #4
 8009916:	e7d1      	b.n	80098bc <__hexnan+0xbc>
 8009918:	2004      	movs	r0, #4
 800991a:	b007      	add	sp, #28
 800991c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009920 <__localeconv_l>:
 8009920:	30f0      	adds	r0, #240	; 0xf0
 8009922:	4770      	bx	lr

08009924 <_localeconv_r>:
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <_localeconv_r+0x14>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6a18      	ldr	r0, [r3, #32]
 800992a:	4b04      	ldr	r3, [pc, #16]	; (800993c <_localeconv_r+0x18>)
 800992c:	2800      	cmp	r0, #0
 800992e:	bf08      	it	eq
 8009930:	4618      	moveq	r0, r3
 8009932:	30f0      	adds	r0, #240	; 0xf0
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	2000002c 	.word	0x2000002c
 800993c:	20000090 	.word	0x20000090

08009940 <malloc>:
 8009940:	4b02      	ldr	r3, [pc, #8]	; (800994c <malloc+0xc>)
 8009942:	4601      	mov	r1, r0
 8009944:	6818      	ldr	r0, [r3, #0]
 8009946:	f000 bc81 	b.w	800a24c <_malloc_r>
 800994a:	bf00      	nop
 800994c:	2000002c 	.word	0x2000002c

08009950 <__ascii_mbtowc>:
 8009950:	b082      	sub	sp, #8
 8009952:	b901      	cbnz	r1, 8009956 <__ascii_mbtowc+0x6>
 8009954:	a901      	add	r1, sp, #4
 8009956:	b142      	cbz	r2, 800996a <__ascii_mbtowc+0x1a>
 8009958:	b14b      	cbz	r3, 800996e <__ascii_mbtowc+0x1e>
 800995a:	7813      	ldrb	r3, [r2, #0]
 800995c:	600b      	str	r3, [r1, #0]
 800995e:	7812      	ldrb	r2, [r2, #0]
 8009960:	1c10      	adds	r0, r2, #0
 8009962:	bf18      	it	ne
 8009964:	2001      	movne	r0, #1
 8009966:	b002      	add	sp, #8
 8009968:	4770      	bx	lr
 800996a:	4610      	mov	r0, r2
 800996c:	e7fb      	b.n	8009966 <__ascii_mbtowc+0x16>
 800996e:	f06f 0001 	mvn.w	r0, #1
 8009972:	e7f8      	b.n	8009966 <__ascii_mbtowc+0x16>

08009974 <memchr>:
 8009974:	b510      	push	{r4, lr}
 8009976:	b2c9      	uxtb	r1, r1
 8009978:	4402      	add	r2, r0
 800997a:	4290      	cmp	r0, r2
 800997c:	4603      	mov	r3, r0
 800997e:	d101      	bne.n	8009984 <memchr+0x10>
 8009980:	2300      	movs	r3, #0
 8009982:	e003      	b.n	800998c <memchr+0x18>
 8009984:	781c      	ldrb	r4, [r3, #0]
 8009986:	3001      	adds	r0, #1
 8009988:	428c      	cmp	r4, r1
 800998a:	d1f6      	bne.n	800997a <memchr+0x6>
 800998c:	4618      	mov	r0, r3
 800998e:	bd10      	pop	{r4, pc}

08009990 <memcpy>:
 8009990:	b510      	push	{r4, lr}
 8009992:	1e43      	subs	r3, r0, #1
 8009994:	440a      	add	r2, r1
 8009996:	4291      	cmp	r1, r2
 8009998:	d100      	bne.n	800999c <memcpy+0xc>
 800999a:	bd10      	pop	{r4, pc}
 800999c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099a4:	e7f7      	b.n	8009996 <memcpy+0x6>

080099a6 <_Balloc>:
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099aa:	4604      	mov	r4, r0
 80099ac:	460e      	mov	r6, r1
 80099ae:	b93d      	cbnz	r5, 80099c0 <_Balloc+0x1a>
 80099b0:	2010      	movs	r0, #16
 80099b2:	f7ff ffc5 	bl	8009940 <malloc>
 80099b6:	6260      	str	r0, [r4, #36]	; 0x24
 80099b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099bc:	6005      	str	r5, [r0, #0]
 80099be:	60c5      	str	r5, [r0, #12]
 80099c0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80099c2:	68eb      	ldr	r3, [r5, #12]
 80099c4:	b183      	cbz	r3, 80099e8 <_Balloc+0x42>
 80099c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80099ce:	b9b8      	cbnz	r0, 8009a00 <_Balloc+0x5a>
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f506 	lsl.w	r5, r1, r6
 80099d6:	1d6a      	adds	r2, r5, #5
 80099d8:	0092      	lsls	r2, r2, #2
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 fbdc 	bl	800a198 <_calloc_r>
 80099e0:	b160      	cbz	r0, 80099fc <_Balloc+0x56>
 80099e2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80099e6:	e00e      	b.n	8009a06 <_Balloc+0x60>
 80099e8:	2221      	movs	r2, #33	; 0x21
 80099ea:	2104      	movs	r1, #4
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fbd3 	bl	800a198 <_calloc_r>
 80099f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099f4:	60e8      	str	r0, [r5, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e4      	bne.n	80099c6 <_Balloc+0x20>
 80099fc:	2000      	movs	r0, #0
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
 8009a00:	6802      	ldr	r2, [r0, #0]
 8009a02:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009a06:	2300      	movs	r3, #0
 8009a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a0c:	e7f7      	b.n	80099fe <_Balloc+0x58>

08009a0e <_Bfree>:
 8009a0e:	b570      	push	{r4, r5, r6, lr}
 8009a10:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a12:	4606      	mov	r6, r0
 8009a14:	460d      	mov	r5, r1
 8009a16:	b93c      	cbnz	r4, 8009a28 <_Bfree+0x1a>
 8009a18:	2010      	movs	r0, #16
 8009a1a:	f7ff ff91 	bl	8009940 <malloc>
 8009a1e:	6270      	str	r0, [r6, #36]	; 0x24
 8009a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a24:	6004      	str	r4, [r0, #0]
 8009a26:	60c4      	str	r4, [r0, #12]
 8009a28:	b13d      	cbz	r5, 8009a3a <_Bfree+0x2c>
 8009a2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009a2c:	686a      	ldr	r2, [r5, #4]
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a34:	6029      	str	r1, [r5, #0]
 8009a36:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009a3a:	bd70      	pop	{r4, r5, r6, pc}

08009a3c <__multadd>:
 8009a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a40:	461f      	mov	r7, r3
 8009a42:	4606      	mov	r6, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	2300      	movs	r3, #0
 8009a48:	690d      	ldr	r5, [r1, #16]
 8009a4a:	f101 0c14 	add.w	ip, r1, #20
 8009a4e:	f8dc 0000 	ldr.w	r0, [ip]
 8009a52:	3301      	adds	r3, #1
 8009a54:	b281      	uxth	r1, r0
 8009a56:	fb02 7101 	mla	r1, r2, r1, r7
 8009a5a:	0c00      	lsrs	r0, r0, #16
 8009a5c:	0c0f      	lsrs	r7, r1, #16
 8009a5e:	fb02 7000 	mla	r0, r2, r0, r7
 8009a62:	b289      	uxth	r1, r1
 8009a64:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009a68:	429d      	cmp	r5, r3
 8009a6a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009a6e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a72:	dcec      	bgt.n	8009a4e <__multadd+0x12>
 8009a74:	b1d7      	cbz	r7, 8009aac <__multadd+0x70>
 8009a76:	68a3      	ldr	r3, [r4, #8]
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc12      	bgt.n	8009aa2 <__multadd+0x66>
 8009a7c:	6861      	ldr	r1, [r4, #4]
 8009a7e:	4630      	mov	r0, r6
 8009a80:	3101      	adds	r1, #1
 8009a82:	f7ff ff90 	bl	80099a6 <_Balloc>
 8009a86:	4680      	mov	r8, r0
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	f104 010c 	add.w	r1, r4, #12
 8009a8e:	3202      	adds	r2, #2
 8009a90:	0092      	lsls	r2, r2, #2
 8009a92:	300c      	adds	r0, #12
 8009a94:	f7ff ff7c 	bl	8009990 <memcpy>
 8009a98:	4621      	mov	r1, r4
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f7ff ffb7 	bl	8009a0e <_Bfree>
 8009aa0:	4644      	mov	r4, r8
 8009aa2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	615f      	str	r7, [r3, #20]
 8009aaa:	6125      	str	r5, [r4, #16]
 8009aac:	4620      	mov	r0, r4
 8009aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009ab2 <__s2b>:
 8009ab2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab6:	4615      	mov	r5, r2
 8009ab8:	2209      	movs	r2, #9
 8009aba:	461f      	mov	r7, r3
 8009abc:	3308      	adds	r3, #8
 8009abe:	460c      	mov	r4, r1
 8009ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2100      	movs	r1, #0
 8009aca:	429a      	cmp	r2, r3
 8009acc:	db20      	blt.n	8009b10 <__s2b+0x5e>
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff69 	bl	80099a6 <_Balloc>
 8009ad4:	9b08      	ldr	r3, [sp, #32]
 8009ad6:	2d09      	cmp	r5, #9
 8009ad8:	6143      	str	r3, [r0, #20]
 8009ada:	f04f 0301 	mov.w	r3, #1
 8009ade:	6103      	str	r3, [r0, #16]
 8009ae0:	dd19      	ble.n	8009b16 <__s2b+0x64>
 8009ae2:	f104 0809 	add.w	r8, r4, #9
 8009ae6:	46c1      	mov	r9, r8
 8009ae8:	442c      	add	r4, r5
 8009aea:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009aee:	4601      	mov	r1, r0
 8009af0:	3b30      	subs	r3, #48	; 0x30
 8009af2:	220a      	movs	r2, #10
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffa1 	bl	8009a3c <__multadd>
 8009afa:	45a1      	cmp	r9, r4
 8009afc:	d1f5      	bne.n	8009aea <__s2b+0x38>
 8009afe:	eb08 0405 	add.w	r4, r8, r5
 8009b02:	3c08      	subs	r4, #8
 8009b04:	1b2d      	subs	r5, r5, r4
 8009b06:	1963      	adds	r3, r4, r5
 8009b08:	42bb      	cmp	r3, r7
 8009b0a:	db07      	blt.n	8009b1c <__s2b+0x6a>
 8009b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b10:	0052      	lsls	r2, r2, #1
 8009b12:	3101      	adds	r1, #1
 8009b14:	e7d9      	b.n	8009aca <__s2b+0x18>
 8009b16:	340a      	adds	r4, #10
 8009b18:	2509      	movs	r5, #9
 8009b1a:	e7f3      	b.n	8009b04 <__s2b+0x52>
 8009b1c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b20:	4601      	mov	r1, r0
 8009b22:	3b30      	subs	r3, #48	; 0x30
 8009b24:	220a      	movs	r2, #10
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ff88 	bl	8009a3c <__multadd>
 8009b2c:	e7eb      	b.n	8009b06 <__s2b+0x54>

08009b2e <__hi0bits>:
 8009b2e:	0c02      	lsrs	r2, r0, #16
 8009b30:	0412      	lsls	r2, r2, #16
 8009b32:	4603      	mov	r3, r0
 8009b34:	b9b2      	cbnz	r2, 8009b64 <__hi0bits+0x36>
 8009b36:	0403      	lsls	r3, r0, #16
 8009b38:	2010      	movs	r0, #16
 8009b3a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b3e:	bf04      	itt	eq
 8009b40:	021b      	lsleq	r3, r3, #8
 8009b42:	3008      	addeq	r0, #8
 8009b44:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b48:	bf04      	itt	eq
 8009b4a:	011b      	lsleq	r3, r3, #4
 8009b4c:	3004      	addeq	r0, #4
 8009b4e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b52:	bf04      	itt	eq
 8009b54:	009b      	lsleq	r3, r3, #2
 8009b56:	3002      	addeq	r0, #2
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	db06      	blt.n	8009b6a <__hi0bits+0x3c>
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	d503      	bpl.n	8009b68 <__hi0bits+0x3a>
 8009b60:	3001      	adds	r0, #1
 8009b62:	4770      	bx	lr
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7e8      	b.n	8009b3a <__hi0bits+0xc>
 8009b68:	2020      	movs	r0, #32
 8009b6a:	4770      	bx	lr

08009b6c <__lo0bits>:
 8009b6c:	6803      	ldr	r3, [r0, #0]
 8009b6e:	4601      	mov	r1, r0
 8009b70:	f013 0207 	ands.w	r2, r3, #7
 8009b74:	d00b      	beq.n	8009b8e <__lo0bits+0x22>
 8009b76:	07da      	lsls	r2, r3, #31
 8009b78:	d423      	bmi.n	8009bc2 <__lo0bits+0x56>
 8009b7a:	0798      	lsls	r0, r3, #30
 8009b7c:	bf49      	itett	mi
 8009b7e:	085b      	lsrmi	r3, r3, #1
 8009b80:	089b      	lsrpl	r3, r3, #2
 8009b82:	2001      	movmi	r0, #1
 8009b84:	600b      	strmi	r3, [r1, #0]
 8009b86:	bf5c      	itt	pl
 8009b88:	600b      	strpl	r3, [r1, #0]
 8009b8a:	2002      	movpl	r0, #2
 8009b8c:	4770      	bx	lr
 8009b8e:	b298      	uxth	r0, r3
 8009b90:	b9a8      	cbnz	r0, 8009bbe <__lo0bits+0x52>
 8009b92:	2010      	movs	r0, #16
 8009b94:	0c1b      	lsrs	r3, r3, #16
 8009b96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009b9a:	bf04      	itt	eq
 8009b9c:	0a1b      	lsreq	r3, r3, #8
 8009b9e:	3008      	addeq	r0, #8
 8009ba0:	071a      	lsls	r2, r3, #28
 8009ba2:	bf04      	itt	eq
 8009ba4:	091b      	lsreq	r3, r3, #4
 8009ba6:	3004      	addeq	r0, #4
 8009ba8:	079a      	lsls	r2, r3, #30
 8009baa:	bf04      	itt	eq
 8009bac:	089b      	lsreq	r3, r3, #2
 8009bae:	3002      	addeq	r0, #2
 8009bb0:	07da      	lsls	r2, r3, #31
 8009bb2:	d402      	bmi.n	8009bba <__lo0bits+0x4e>
 8009bb4:	085b      	lsrs	r3, r3, #1
 8009bb6:	d006      	beq.n	8009bc6 <__lo0bits+0x5a>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	600b      	str	r3, [r1, #0]
 8009bbc:	4770      	bx	lr
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	e7e9      	b.n	8009b96 <__lo0bits+0x2a>
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr
 8009bc6:	2020      	movs	r0, #32
 8009bc8:	4770      	bx	lr

08009bca <__i2b>:
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	2101      	movs	r1, #1
 8009bd0:	f7ff fee9 	bl	80099a6 <_Balloc>
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	6144      	str	r4, [r0, #20]
 8009bd8:	6102      	str	r2, [r0, #16]
 8009bda:	bd10      	pop	{r4, pc}

08009bdc <__multiply>:
 8009bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	4614      	mov	r4, r2
 8009be2:	690a      	ldr	r2, [r1, #16]
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	4688      	mov	r8, r1
 8009be8:	429a      	cmp	r2, r3
 8009bea:	bfbe      	ittt	lt
 8009bec:	460b      	movlt	r3, r1
 8009bee:	46a0      	movlt	r8, r4
 8009bf0:	461c      	movlt	r4, r3
 8009bf2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bf6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009bfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009bfe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c02:	eb07 0609 	add.w	r6, r7, r9
 8009c06:	42b3      	cmp	r3, r6
 8009c08:	bfb8      	it	lt
 8009c0a:	3101      	addlt	r1, #1
 8009c0c:	f7ff fecb 	bl	80099a6 <_Balloc>
 8009c10:	f100 0514 	add.w	r5, r0, #20
 8009c14:	462b      	mov	r3, r5
 8009c16:	2200      	movs	r2, #0
 8009c18:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009c1c:	4573      	cmp	r3, lr
 8009c1e:	d316      	bcc.n	8009c4e <__multiply+0x72>
 8009c20:	f104 0214 	add.w	r2, r4, #20
 8009c24:	f108 0114 	add.w	r1, r8, #20
 8009c28:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009c2c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009c30:	9300      	str	r3, [sp, #0]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d80c      	bhi.n	8009c54 <__multiply+0x78>
 8009c3a:	2e00      	cmp	r6, #0
 8009c3c:	dd03      	ble.n	8009c46 <__multiply+0x6a>
 8009c3e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d05d      	beq.n	8009d02 <__multiply+0x126>
 8009c46:	6106      	str	r6, [r0, #16]
 8009c48:	b003      	add	sp, #12
 8009c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4e:	f843 2b04 	str.w	r2, [r3], #4
 8009c52:	e7e3      	b.n	8009c1c <__multiply+0x40>
 8009c54:	f8b2 b000 	ldrh.w	fp, [r2]
 8009c58:	f1bb 0f00 	cmp.w	fp, #0
 8009c5c:	d023      	beq.n	8009ca6 <__multiply+0xca>
 8009c5e:	4689      	mov	r9, r1
 8009c60:	46ac      	mov	ip, r5
 8009c62:	f04f 0800 	mov.w	r8, #0
 8009c66:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c6a:	f8dc a000 	ldr.w	sl, [ip]
 8009c6e:	b2a3      	uxth	r3, r4
 8009c70:	fa1f fa8a 	uxth.w	sl, sl
 8009c74:	fb0b a303 	mla	r3, fp, r3, sl
 8009c78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c7c:	f8dc 4000 	ldr.w	r4, [ip]
 8009c80:	4443      	add	r3, r8
 8009c82:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c86:	fb0b 840a 	mla	r4, fp, sl, r8
 8009c8a:	46e2      	mov	sl, ip
 8009c8c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009c96:	454f      	cmp	r7, r9
 8009c98:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009c9c:	f84a 3b04 	str.w	r3, [sl], #4
 8009ca0:	d82b      	bhi.n	8009cfa <__multiply+0x11e>
 8009ca2:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ca6:	9b01      	ldr	r3, [sp, #4]
 8009ca8:	3204      	adds	r2, #4
 8009caa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009cae:	f1ba 0f00 	cmp.w	sl, #0
 8009cb2:	d020      	beq.n	8009cf6 <__multiply+0x11a>
 8009cb4:	4689      	mov	r9, r1
 8009cb6:	46a8      	mov	r8, r5
 8009cb8:	f04f 0b00 	mov.w	fp, #0
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	f8b9 c000 	ldrh.w	ip, [r9]
 8009cc2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	fb0a 440c 	mla	r4, sl, ip, r4
 8009ccc:	46c4      	mov	ip, r8
 8009cce:	445c      	add	r4, fp
 8009cd0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009cd4:	f84c 3b04 	str.w	r3, [ip], #4
 8009cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8009cdc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009ce0:	0c1b      	lsrs	r3, r3, #16
 8009ce2:	fb0a b303 	mla	r3, sl, r3, fp
 8009ce6:	454f      	cmp	r7, r9
 8009ce8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009cec:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009cf0:	d805      	bhi.n	8009cfe <__multiply+0x122>
 8009cf2:	f8c8 3004 	str.w	r3, [r8, #4]
 8009cf6:	3504      	adds	r5, #4
 8009cf8:	e79b      	b.n	8009c32 <__multiply+0x56>
 8009cfa:	46d4      	mov	ip, sl
 8009cfc:	e7b3      	b.n	8009c66 <__multiply+0x8a>
 8009cfe:	46e0      	mov	r8, ip
 8009d00:	e7dd      	b.n	8009cbe <__multiply+0xe2>
 8009d02:	3e01      	subs	r6, #1
 8009d04:	e799      	b.n	8009c3a <__multiply+0x5e>
	...

08009d08 <__pow5mult>:
 8009d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	f012 0203 	ands.w	r2, r2, #3
 8009d12:	4606      	mov	r6, r0
 8009d14:	460f      	mov	r7, r1
 8009d16:	d007      	beq.n	8009d28 <__pow5mult+0x20>
 8009d18:	4c21      	ldr	r4, [pc, #132]	; (8009da0 <__pow5mult+0x98>)
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d22:	f7ff fe8b 	bl	8009a3c <__multadd>
 8009d26:	4607      	mov	r7, r0
 8009d28:	10ad      	asrs	r5, r5, #2
 8009d2a:	d035      	beq.n	8009d98 <__pow5mult+0x90>
 8009d2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d2e:	b93c      	cbnz	r4, 8009d40 <__pow5mult+0x38>
 8009d30:	2010      	movs	r0, #16
 8009d32:	f7ff fe05 	bl	8009940 <malloc>
 8009d36:	6270      	str	r0, [r6, #36]	; 0x24
 8009d38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d3c:	6004      	str	r4, [r0, #0]
 8009d3e:	60c4      	str	r4, [r0, #12]
 8009d40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d48:	b94c      	cbnz	r4, 8009d5e <__pow5mult+0x56>
 8009d4a:	f240 2171 	movw	r1, #625	; 0x271
 8009d4e:	4630      	mov	r0, r6
 8009d50:	f7ff ff3b 	bl	8009bca <__i2b>
 8009d54:	2300      	movs	r3, #0
 8009d56:	4604      	mov	r4, r0
 8009d58:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	f04f 0800 	mov.w	r8, #0
 8009d62:	07eb      	lsls	r3, r5, #31
 8009d64:	d50a      	bpl.n	8009d7c <__pow5mult+0x74>
 8009d66:	4639      	mov	r1, r7
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	f7ff ff36 	bl	8009bdc <__multiply>
 8009d70:	4681      	mov	r9, r0
 8009d72:	4639      	mov	r1, r7
 8009d74:	4630      	mov	r0, r6
 8009d76:	f7ff fe4a 	bl	8009a0e <_Bfree>
 8009d7a:	464f      	mov	r7, r9
 8009d7c:	106d      	asrs	r5, r5, #1
 8009d7e:	d00b      	beq.n	8009d98 <__pow5mult+0x90>
 8009d80:	6820      	ldr	r0, [r4, #0]
 8009d82:	b938      	cbnz	r0, 8009d94 <__pow5mult+0x8c>
 8009d84:	4622      	mov	r2, r4
 8009d86:	4621      	mov	r1, r4
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7ff ff27 	bl	8009bdc <__multiply>
 8009d8e:	6020      	str	r0, [r4, #0]
 8009d90:	f8c0 8000 	str.w	r8, [r0]
 8009d94:	4604      	mov	r4, r0
 8009d96:	e7e4      	b.n	8009d62 <__pow5mult+0x5a>
 8009d98:	4638      	mov	r0, r7
 8009d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	bf00      	nop
 8009da0:	0800c240 	.word	0x0800c240

08009da4 <__lshift>:
 8009da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009da8:	460c      	mov	r4, r1
 8009daa:	4607      	mov	r7, r0
 8009dac:	4616      	mov	r6, r2
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009db4:	eb0a 0903 	add.w	r9, sl, r3
 8009db8:	6849      	ldr	r1, [r1, #4]
 8009dba:	68a3      	ldr	r3, [r4, #8]
 8009dbc:	f109 0501 	add.w	r5, r9, #1
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	db32      	blt.n	8009e2a <__lshift+0x86>
 8009dc4:	4638      	mov	r0, r7
 8009dc6:	f7ff fdee 	bl	80099a6 <_Balloc>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	4680      	mov	r8, r0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f100 0114 	add.w	r1, r0, #20
 8009dd4:	4553      	cmp	r3, sl
 8009dd6:	db2b      	blt.n	8009e30 <__lshift+0x8c>
 8009dd8:	6920      	ldr	r0, [r4, #16]
 8009dda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dde:	f104 0314 	add.w	r3, r4, #20
 8009de2:	f016 021f 	ands.w	r2, r6, #31
 8009de6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dee:	d025      	beq.n	8009e3c <__lshift+0x98>
 8009df0:	2000      	movs	r0, #0
 8009df2:	f1c2 0e20 	rsb	lr, r2, #32
 8009df6:	468a      	mov	sl, r1
 8009df8:	681e      	ldr	r6, [r3, #0]
 8009dfa:	4096      	lsls	r6, r2
 8009dfc:	4330      	orrs	r0, r6
 8009dfe:	f84a 0b04 	str.w	r0, [sl], #4
 8009e02:	f853 0b04 	ldr.w	r0, [r3], #4
 8009e06:	459c      	cmp	ip, r3
 8009e08:	fa20 f00e 	lsr.w	r0, r0, lr
 8009e0c:	d814      	bhi.n	8009e38 <__lshift+0x94>
 8009e0e:	6048      	str	r0, [r1, #4]
 8009e10:	b108      	cbz	r0, 8009e16 <__lshift+0x72>
 8009e12:	f109 0502 	add.w	r5, r9, #2
 8009e16:	3d01      	subs	r5, #1
 8009e18:	4638      	mov	r0, r7
 8009e1a:	f8c8 5010 	str.w	r5, [r8, #16]
 8009e1e:	4621      	mov	r1, r4
 8009e20:	f7ff fdf5 	bl	8009a0e <_Bfree>
 8009e24:	4640      	mov	r0, r8
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	3101      	adds	r1, #1
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	e7c7      	b.n	8009dc0 <__lshift+0x1c>
 8009e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009e34:	3301      	adds	r3, #1
 8009e36:	e7cd      	b.n	8009dd4 <__lshift+0x30>
 8009e38:	4651      	mov	r1, sl
 8009e3a:	e7dc      	b.n	8009df6 <__lshift+0x52>
 8009e3c:	3904      	subs	r1, #4
 8009e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e42:	459c      	cmp	ip, r3
 8009e44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e48:	d8f9      	bhi.n	8009e3e <__lshift+0x9a>
 8009e4a:	e7e4      	b.n	8009e16 <__lshift+0x72>

08009e4c <__mcmp>:
 8009e4c:	6903      	ldr	r3, [r0, #16]
 8009e4e:	690a      	ldr	r2, [r1, #16]
 8009e50:	b530      	push	{r4, r5, lr}
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	d10c      	bne.n	8009e70 <__mcmp+0x24>
 8009e56:	0092      	lsls	r2, r2, #2
 8009e58:	3014      	adds	r0, #20
 8009e5a:	3114      	adds	r1, #20
 8009e5c:	1884      	adds	r4, r0, r2
 8009e5e:	4411      	add	r1, r2
 8009e60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e68:	4295      	cmp	r5, r2
 8009e6a:	d003      	beq.n	8009e74 <__mcmp+0x28>
 8009e6c:	d305      	bcc.n	8009e7a <__mcmp+0x2e>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4618      	mov	r0, r3
 8009e72:	bd30      	pop	{r4, r5, pc}
 8009e74:	42a0      	cmp	r0, r4
 8009e76:	d3f3      	bcc.n	8009e60 <__mcmp+0x14>
 8009e78:	e7fa      	b.n	8009e70 <__mcmp+0x24>
 8009e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e7e:	e7f7      	b.n	8009e70 <__mcmp+0x24>

08009e80 <__mdiff>:
 8009e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e84:	460d      	mov	r5, r1
 8009e86:	4607      	mov	r7, r0
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	4614      	mov	r4, r2
 8009e8e:	f7ff ffdd 	bl	8009e4c <__mcmp>
 8009e92:	1e06      	subs	r6, r0, #0
 8009e94:	d108      	bne.n	8009ea8 <__mdiff+0x28>
 8009e96:	4631      	mov	r1, r6
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7ff fd84 	bl	80099a6 <_Balloc>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea8:	bfa4      	itt	ge
 8009eaa:	4623      	movge	r3, r4
 8009eac:	462c      	movge	r4, r5
 8009eae:	4638      	mov	r0, r7
 8009eb0:	6861      	ldr	r1, [r4, #4]
 8009eb2:	bfa6      	itte	ge
 8009eb4:	461d      	movge	r5, r3
 8009eb6:	2600      	movge	r6, #0
 8009eb8:	2601      	movlt	r6, #1
 8009eba:	f7ff fd74 	bl	80099a6 <_Balloc>
 8009ebe:	f04f 0e00 	mov.w	lr, #0
 8009ec2:	60c6      	str	r6, [r0, #12]
 8009ec4:	692b      	ldr	r3, [r5, #16]
 8009ec6:	6926      	ldr	r6, [r4, #16]
 8009ec8:	f104 0214 	add.w	r2, r4, #20
 8009ecc:	f105 0914 	add.w	r9, r5, #20
 8009ed0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009ed4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ed8:	f100 0114 	add.w	r1, r0, #20
 8009edc:	f852 ab04 	ldr.w	sl, [r2], #4
 8009ee0:	f859 5b04 	ldr.w	r5, [r9], #4
 8009ee4:	fa1f f38a 	uxth.w	r3, sl
 8009ee8:	4473      	add	r3, lr
 8009eea:	b2ac      	uxth	r4, r5
 8009eec:	1b1b      	subs	r3, r3, r4
 8009eee:	0c2c      	lsrs	r4, r5, #16
 8009ef0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009ef4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009efe:	45c8      	cmp	r8, r9
 8009f00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009f04:	4694      	mov	ip, r2
 8009f06:	f841 4b04 	str.w	r4, [r1], #4
 8009f0a:	d8e7      	bhi.n	8009edc <__mdiff+0x5c>
 8009f0c:	45bc      	cmp	ip, r7
 8009f0e:	d304      	bcc.n	8009f1a <__mdiff+0x9a>
 8009f10:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009f14:	b183      	cbz	r3, 8009f38 <__mdiff+0xb8>
 8009f16:	6106      	str	r6, [r0, #16]
 8009f18:	e7c4      	b.n	8009ea4 <__mdiff+0x24>
 8009f1a:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009f1e:	b2a2      	uxth	r2, r4
 8009f20:	4472      	add	r2, lr
 8009f22:	1413      	asrs	r3, r2, #16
 8009f24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009f2e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009f32:	f841 2b04 	str.w	r2, [r1], #4
 8009f36:	e7e9      	b.n	8009f0c <__mdiff+0x8c>
 8009f38:	3e01      	subs	r6, #1
 8009f3a:	e7e9      	b.n	8009f10 <__mdiff+0x90>

08009f3c <__ulp>:
 8009f3c:	4b10      	ldr	r3, [pc, #64]	; (8009f80 <__ulp+0x44>)
 8009f3e:	400b      	ands	r3, r1
 8009f40:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd02      	ble.n	8009f4e <__ulp+0x12>
 8009f48:	2000      	movs	r0, #0
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4770      	bx	lr
 8009f4e:	425b      	negs	r3, r3
 8009f50:	151b      	asrs	r3, r3, #20
 8009f52:	2b13      	cmp	r3, #19
 8009f54:	f04f 0000 	mov.w	r0, #0
 8009f58:	f04f 0100 	mov.w	r1, #0
 8009f5c:	dc04      	bgt.n	8009f68 <__ulp+0x2c>
 8009f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009f62:	fa42 f103 	asr.w	r1, r2, r3
 8009f66:	4770      	bx	lr
 8009f68:	2201      	movs	r2, #1
 8009f6a:	3b14      	subs	r3, #20
 8009f6c:	2b1e      	cmp	r3, #30
 8009f6e:	bfce      	itee	gt
 8009f70:	4613      	movgt	r3, r2
 8009f72:	f1c3 031f 	rsble	r3, r3, #31
 8009f76:	fa02 f303 	lslle.w	r3, r2, r3
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	7ff00000 	.word	0x7ff00000

08009f84 <__b2d>:
 8009f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f88:	6907      	ldr	r7, [r0, #16]
 8009f8a:	f100 0914 	add.w	r9, r0, #20
 8009f8e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009f92:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009f96:	f1a7 0804 	sub.w	r8, r7, #4
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7ff fdc7 	bl	8009b2e <__hi0bits>
 8009fa0:	f1c0 0320 	rsb	r3, r0, #32
 8009fa4:	280a      	cmp	r0, #10
 8009fa6:	600b      	str	r3, [r1, #0]
 8009fa8:	491e      	ldr	r1, [pc, #120]	; (800a024 <__b2d+0xa0>)
 8009faa:	dc17      	bgt.n	8009fdc <__b2d+0x58>
 8009fac:	45c1      	cmp	r9, r8
 8009fae:	bf28      	it	cs
 8009fb0:	2200      	movcs	r2, #0
 8009fb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8009fb6:	fa26 f30c 	lsr.w	r3, r6, ip
 8009fba:	bf38      	it	cc
 8009fbc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009fc0:	ea43 0501 	orr.w	r5, r3, r1
 8009fc4:	f100 0315 	add.w	r3, r0, #21
 8009fc8:	fa06 f303 	lsl.w	r3, r6, r3
 8009fcc:	fa22 f20c 	lsr.w	r2, r2, ip
 8009fd0:	ea43 0402 	orr.w	r4, r3, r2
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fdc:	45c1      	cmp	r9, r8
 8009fde:	bf3a      	itte	cc
 8009fe0:	f1a7 0808 	subcc.w	r8, r7, #8
 8009fe4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009fe8:	2200      	movcs	r2, #0
 8009fea:	f1b0 030b 	subs.w	r3, r0, #11
 8009fee:	d015      	beq.n	800a01c <__b2d+0x98>
 8009ff0:	409e      	lsls	r6, r3
 8009ff2:	f1c3 0720 	rsb	r7, r3, #32
 8009ff6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8009ffa:	fa22 f107 	lsr.w	r1, r2, r7
 8009ffe:	45c8      	cmp	r8, r9
 800a000:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800a004:	ea46 0501 	orr.w	r5, r6, r1
 800a008:	bf94      	ite	ls
 800a00a:	2100      	movls	r1, #0
 800a00c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a010:	fa02 f003 	lsl.w	r0, r2, r3
 800a014:	40f9      	lsrs	r1, r7
 800a016:	ea40 0401 	orr.w	r4, r0, r1
 800a01a:	e7db      	b.n	8009fd4 <__b2d+0x50>
 800a01c:	ea46 0501 	orr.w	r5, r6, r1
 800a020:	4614      	mov	r4, r2
 800a022:	e7d7      	b.n	8009fd4 <__b2d+0x50>
 800a024:	3ff00000 	.word	0x3ff00000

0800a028 <__d2b>:
 800a028:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a02c:	461c      	mov	r4, r3
 800a02e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800a032:	2101      	movs	r1, #1
 800a034:	4690      	mov	r8, r2
 800a036:	f7ff fcb6 	bl	80099a6 <_Balloc>
 800a03a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800a03e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a042:	4607      	mov	r7, r0
 800a044:	bb34      	cbnz	r4, 800a094 <__d2b+0x6c>
 800a046:	9201      	str	r2, [sp, #4]
 800a048:	f1b8 0200 	subs.w	r2, r8, #0
 800a04c:	d027      	beq.n	800a09e <__d2b+0x76>
 800a04e:	a802      	add	r0, sp, #8
 800a050:	f840 2d08 	str.w	r2, [r0, #-8]!
 800a054:	f7ff fd8a 	bl	8009b6c <__lo0bits>
 800a058:	9900      	ldr	r1, [sp, #0]
 800a05a:	b1f0      	cbz	r0, 800a09a <__d2b+0x72>
 800a05c:	9a01      	ldr	r2, [sp, #4]
 800a05e:	f1c0 0320 	rsb	r3, r0, #32
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	430b      	orrs	r3, r1
 800a068:	40c2      	lsrs	r2, r0
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	9201      	str	r2, [sp, #4]
 800a06e:	9b01      	ldr	r3, [sp, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	bf14      	ite	ne
 800a074:	2102      	movne	r1, #2
 800a076:	2101      	moveq	r1, #1
 800a078:	61bb      	str	r3, [r7, #24]
 800a07a:	6139      	str	r1, [r7, #16]
 800a07c:	b1c4      	cbz	r4, 800a0b0 <__d2b+0x88>
 800a07e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a082:	4404      	add	r4, r0
 800a084:	6034      	str	r4, [r6, #0]
 800a086:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a08a:	6028      	str	r0, [r5, #0]
 800a08c:	4638      	mov	r0, r7
 800a08e:	b002      	add	sp, #8
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a098:	e7d5      	b.n	800a046 <__d2b+0x1e>
 800a09a:	6179      	str	r1, [r7, #20]
 800a09c:	e7e7      	b.n	800a06e <__d2b+0x46>
 800a09e:	a801      	add	r0, sp, #4
 800a0a0:	f7ff fd64 	bl	8009b6c <__lo0bits>
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	9b01      	ldr	r3, [sp, #4]
 800a0a8:	6139      	str	r1, [r7, #16]
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	3020      	adds	r0, #32
 800a0ae:	e7e5      	b.n	800a07c <__d2b+0x54>
 800a0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0b4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a0b8:	6030      	str	r0, [r6, #0]
 800a0ba:	6918      	ldr	r0, [r3, #16]
 800a0bc:	f7ff fd37 	bl	8009b2e <__hi0bits>
 800a0c0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a0c4:	e7e1      	b.n	800a08a <__d2b+0x62>

0800a0c6 <__ratio>:
 800a0c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ca:	4688      	mov	r8, r1
 800a0cc:	4669      	mov	r1, sp
 800a0ce:	4681      	mov	r9, r0
 800a0d0:	f7ff ff58 	bl	8009f84 <__b2d>
 800a0d4:	468b      	mov	fp, r1
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	4640      	mov	r0, r8
 800a0dc:	a901      	add	r1, sp, #4
 800a0de:	f7ff ff51 	bl	8009f84 <__b2d>
 800a0e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a0e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a0ea:	460d      	mov	r5, r1
 800a0ec:	eba3 0c02 	sub.w	ip, r3, r2
 800a0f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0f4:	1a9b      	subs	r3, r3, r2
 800a0f6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	bfd5      	itete	le
 800a0fe:	460a      	movle	r2, r1
 800a100:	463a      	movgt	r2, r7
 800a102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a106:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a10a:	bfd8      	it	le
 800a10c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800a110:	462b      	mov	r3, r5
 800a112:	4602      	mov	r2, r0
 800a114:	4659      	mov	r1, fp
 800a116:	4630      	mov	r0, r6
 800a118:	f7f6 fb08 	bl	800072c <__aeabi_ddiv>
 800a11c:	b003      	add	sp, #12
 800a11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a122 <__copybits>:
 800a122:	3901      	subs	r1, #1
 800a124:	b510      	push	{r4, lr}
 800a126:	1149      	asrs	r1, r1, #5
 800a128:	6914      	ldr	r4, [r2, #16]
 800a12a:	3101      	adds	r1, #1
 800a12c:	f102 0314 	add.w	r3, r2, #20
 800a130:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a134:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a138:	42a3      	cmp	r3, r4
 800a13a:	4602      	mov	r2, r0
 800a13c:	d303      	bcc.n	800a146 <__copybits+0x24>
 800a13e:	2300      	movs	r3, #0
 800a140:	428a      	cmp	r2, r1
 800a142:	d305      	bcc.n	800a150 <__copybits+0x2e>
 800a144:	bd10      	pop	{r4, pc}
 800a146:	f853 2b04 	ldr.w	r2, [r3], #4
 800a14a:	f840 2b04 	str.w	r2, [r0], #4
 800a14e:	e7f3      	b.n	800a138 <__copybits+0x16>
 800a150:	f842 3b04 	str.w	r3, [r2], #4
 800a154:	e7f4      	b.n	800a140 <__copybits+0x1e>

0800a156 <__any_on>:
 800a156:	f100 0214 	add.w	r2, r0, #20
 800a15a:	6900      	ldr	r0, [r0, #16]
 800a15c:	114b      	asrs	r3, r1, #5
 800a15e:	4298      	cmp	r0, r3
 800a160:	b510      	push	{r4, lr}
 800a162:	db11      	blt.n	800a188 <__any_on+0x32>
 800a164:	dd0a      	ble.n	800a17c <__any_on+0x26>
 800a166:	f011 011f 	ands.w	r1, r1, #31
 800a16a:	d007      	beq.n	800a17c <__any_on+0x26>
 800a16c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a170:	fa24 f001 	lsr.w	r0, r4, r1
 800a174:	fa00 f101 	lsl.w	r1, r0, r1
 800a178:	428c      	cmp	r4, r1
 800a17a:	d10b      	bne.n	800a194 <__any_on+0x3e>
 800a17c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a180:	4293      	cmp	r3, r2
 800a182:	d803      	bhi.n	800a18c <__any_on+0x36>
 800a184:	2000      	movs	r0, #0
 800a186:	bd10      	pop	{r4, pc}
 800a188:	4603      	mov	r3, r0
 800a18a:	e7f7      	b.n	800a17c <__any_on+0x26>
 800a18c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a190:	2900      	cmp	r1, #0
 800a192:	d0f5      	beq.n	800a180 <__any_on+0x2a>
 800a194:	2001      	movs	r0, #1
 800a196:	e7f6      	b.n	800a186 <__any_on+0x30>

0800a198 <_calloc_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	fb02 f401 	mul.w	r4, r2, r1
 800a19e:	4621      	mov	r1, r4
 800a1a0:	f000 f854 	bl	800a24c <_malloc_r>
 800a1a4:	4605      	mov	r5, r0
 800a1a6:	b118      	cbz	r0, 800a1b0 <_calloc_r+0x18>
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	f7fc ffa2 	bl	80070f4 <memset>
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}

0800a1b4 <_free_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d043      	beq.n	800a244 <_free_r+0x90>
 800a1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c0:	1f0c      	subs	r4, r1, #4
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bfb8      	it	lt
 800a1c6:	18e4      	addlt	r4, r4, r3
 800a1c8:	f000 fa34 	bl	800a634 <__malloc_lock>
 800a1cc:	4a1e      	ldr	r2, [pc, #120]	; (800a248 <_free_r+0x94>)
 800a1ce:	6813      	ldr	r3, [r2, #0]
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	b933      	cbnz	r3, 800a1e2 <_free_r+0x2e>
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	6014      	str	r4, [r2, #0]
 800a1d8:	4628      	mov	r0, r5
 800a1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1de:	f000 ba2a 	b.w	800a636 <__malloc_unlock>
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	d90b      	bls.n	800a1fe <_free_r+0x4a>
 800a1e6:	6821      	ldr	r1, [r4, #0]
 800a1e8:	1862      	adds	r2, r4, r1
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	bf01      	itttt	eq
 800a1ee:	681a      	ldreq	r2, [r3, #0]
 800a1f0:	685b      	ldreq	r3, [r3, #4]
 800a1f2:	1852      	addeq	r2, r2, r1
 800a1f4:	6022      	streq	r2, [r4, #0]
 800a1f6:	6063      	str	r3, [r4, #4]
 800a1f8:	6004      	str	r4, [r0, #0]
 800a1fa:	e7ed      	b.n	800a1d8 <_free_r+0x24>
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	b10a      	cbz	r2, 800a206 <_free_r+0x52>
 800a202:	42a2      	cmp	r2, r4
 800a204:	d9fa      	bls.n	800a1fc <_free_r+0x48>
 800a206:	6819      	ldr	r1, [r3, #0]
 800a208:	1858      	adds	r0, r3, r1
 800a20a:	42a0      	cmp	r0, r4
 800a20c:	d10b      	bne.n	800a226 <_free_r+0x72>
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	4401      	add	r1, r0
 800a212:	1858      	adds	r0, r3, r1
 800a214:	4282      	cmp	r2, r0
 800a216:	6019      	str	r1, [r3, #0]
 800a218:	d1de      	bne.n	800a1d8 <_free_r+0x24>
 800a21a:	6810      	ldr	r0, [r2, #0]
 800a21c:	6852      	ldr	r2, [r2, #4]
 800a21e:	4401      	add	r1, r0
 800a220:	6019      	str	r1, [r3, #0]
 800a222:	605a      	str	r2, [r3, #4]
 800a224:	e7d8      	b.n	800a1d8 <_free_r+0x24>
 800a226:	d902      	bls.n	800a22e <_free_r+0x7a>
 800a228:	230c      	movs	r3, #12
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	e7d4      	b.n	800a1d8 <_free_r+0x24>
 800a22e:	6820      	ldr	r0, [r4, #0]
 800a230:	1821      	adds	r1, r4, r0
 800a232:	428a      	cmp	r2, r1
 800a234:	bf01      	itttt	eq
 800a236:	6811      	ldreq	r1, [r2, #0]
 800a238:	6852      	ldreq	r2, [r2, #4]
 800a23a:	1809      	addeq	r1, r1, r0
 800a23c:	6021      	streq	r1, [r4, #0]
 800a23e:	6062      	str	r2, [r4, #4]
 800a240:	605c      	str	r4, [r3, #4]
 800a242:	e7c9      	b.n	800a1d8 <_free_r+0x24>
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	200003f4 	.word	0x200003f4

0800a24c <_malloc_r>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	1ccd      	adds	r5, r1, #3
 800a250:	f025 0503 	bic.w	r5, r5, #3
 800a254:	3508      	adds	r5, #8
 800a256:	2d0c      	cmp	r5, #12
 800a258:	bf38      	it	cc
 800a25a:	250c      	movcc	r5, #12
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	4606      	mov	r6, r0
 800a260:	db01      	blt.n	800a266 <_malloc_r+0x1a>
 800a262:	42a9      	cmp	r1, r5
 800a264:	d903      	bls.n	800a26e <_malloc_r+0x22>
 800a266:	230c      	movs	r3, #12
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	2000      	movs	r0, #0
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	f000 f9e1 	bl	800a634 <__malloc_lock>
 800a272:	4a21      	ldr	r2, [pc, #132]	; (800a2f8 <_malloc_r+0xac>)
 800a274:	6814      	ldr	r4, [r2, #0]
 800a276:	4621      	mov	r1, r4
 800a278:	b991      	cbnz	r1, 800a2a0 <_malloc_r+0x54>
 800a27a:	4c20      	ldr	r4, [pc, #128]	; (800a2fc <_malloc_r+0xb0>)
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	b91b      	cbnz	r3, 800a288 <_malloc_r+0x3c>
 800a280:	4630      	mov	r0, r6
 800a282:	f000 f98f 	bl	800a5a4 <_sbrk_r>
 800a286:	6020      	str	r0, [r4, #0]
 800a288:	4629      	mov	r1, r5
 800a28a:	4630      	mov	r0, r6
 800a28c:	f000 f98a 	bl	800a5a4 <_sbrk_r>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d124      	bne.n	800a2de <_malloc_r+0x92>
 800a294:	230c      	movs	r3, #12
 800a296:	4630      	mov	r0, r6
 800a298:	6033      	str	r3, [r6, #0]
 800a29a:	f000 f9cc 	bl	800a636 <__malloc_unlock>
 800a29e:	e7e4      	b.n	800a26a <_malloc_r+0x1e>
 800a2a0:	680b      	ldr	r3, [r1, #0]
 800a2a2:	1b5b      	subs	r3, r3, r5
 800a2a4:	d418      	bmi.n	800a2d8 <_malloc_r+0x8c>
 800a2a6:	2b0b      	cmp	r3, #11
 800a2a8:	d90f      	bls.n	800a2ca <_malloc_r+0x7e>
 800a2aa:	600b      	str	r3, [r1, #0]
 800a2ac:	18cc      	adds	r4, r1, r3
 800a2ae:	50cd      	str	r5, [r1, r3]
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 f9c0 	bl	800a636 <__malloc_unlock>
 800a2b6:	f104 000b 	add.w	r0, r4, #11
 800a2ba:	1d23      	adds	r3, r4, #4
 800a2bc:	f020 0007 	bic.w	r0, r0, #7
 800a2c0:	1ac3      	subs	r3, r0, r3
 800a2c2:	d0d3      	beq.n	800a26c <_malloc_r+0x20>
 800a2c4:	425a      	negs	r2, r3
 800a2c6:	50e2      	str	r2, [r4, r3]
 800a2c8:	e7d0      	b.n	800a26c <_malloc_r+0x20>
 800a2ca:	684b      	ldr	r3, [r1, #4]
 800a2cc:	428c      	cmp	r4, r1
 800a2ce:	bf16      	itet	ne
 800a2d0:	6063      	strne	r3, [r4, #4]
 800a2d2:	6013      	streq	r3, [r2, #0]
 800a2d4:	460c      	movne	r4, r1
 800a2d6:	e7eb      	b.n	800a2b0 <_malloc_r+0x64>
 800a2d8:	460c      	mov	r4, r1
 800a2da:	6849      	ldr	r1, [r1, #4]
 800a2dc:	e7cc      	b.n	800a278 <_malloc_r+0x2c>
 800a2de:	1cc4      	adds	r4, r0, #3
 800a2e0:	f024 0403 	bic.w	r4, r4, #3
 800a2e4:	42a0      	cmp	r0, r4
 800a2e6:	d005      	beq.n	800a2f4 <_malloc_r+0xa8>
 800a2e8:	1a21      	subs	r1, r4, r0
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f000 f95a 	bl	800a5a4 <_sbrk_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d0cf      	beq.n	800a294 <_malloc_r+0x48>
 800a2f4:	6025      	str	r5, [r4, #0]
 800a2f6:	e7db      	b.n	800a2b0 <_malloc_r+0x64>
 800a2f8:	200003f4 	.word	0x200003f4
 800a2fc:	200003f8 	.word	0x200003f8

0800a300 <__ssputs_r>:
 800a300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a304:	688e      	ldr	r6, [r1, #8]
 800a306:	4682      	mov	sl, r0
 800a308:	429e      	cmp	r6, r3
 800a30a:	460c      	mov	r4, r1
 800a30c:	4690      	mov	r8, r2
 800a30e:	4699      	mov	r9, r3
 800a310:	d837      	bhi.n	800a382 <__ssputs_r+0x82>
 800a312:	898a      	ldrh	r2, [r1, #12]
 800a314:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a318:	d031      	beq.n	800a37e <__ssputs_r+0x7e>
 800a31a:	2302      	movs	r3, #2
 800a31c:	6825      	ldr	r5, [r4, #0]
 800a31e:	6909      	ldr	r1, [r1, #16]
 800a320:	1a6f      	subs	r7, r5, r1
 800a322:	6965      	ldr	r5, [r4, #20]
 800a324:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a328:	fb95 f5f3 	sdiv	r5, r5, r3
 800a32c:	f109 0301 	add.w	r3, r9, #1
 800a330:	443b      	add	r3, r7
 800a332:	429d      	cmp	r5, r3
 800a334:	bf38      	it	cc
 800a336:	461d      	movcc	r5, r3
 800a338:	0553      	lsls	r3, r2, #21
 800a33a:	d530      	bpl.n	800a39e <__ssputs_r+0x9e>
 800a33c:	4629      	mov	r1, r5
 800a33e:	f7ff ff85 	bl	800a24c <_malloc_r>
 800a342:	4606      	mov	r6, r0
 800a344:	b950      	cbnz	r0, 800a35c <__ssputs_r+0x5c>
 800a346:	230c      	movs	r3, #12
 800a348:	f04f 30ff 	mov.w	r0, #4294967295
 800a34c:	f8ca 3000 	str.w	r3, [sl]
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a356:	81a3      	strh	r3, [r4, #12]
 800a358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a35c:	463a      	mov	r2, r7
 800a35e:	6921      	ldr	r1, [r4, #16]
 800a360:	f7ff fb16 	bl	8009990 <memcpy>
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a36a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a36e:	81a3      	strh	r3, [r4, #12]
 800a370:	6126      	str	r6, [r4, #16]
 800a372:	443e      	add	r6, r7
 800a374:	6026      	str	r6, [r4, #0]
 800a376:	464e      	mov	r6, r9
 800a378:	6165      	str	r5, [r4, #20]
 800a37a:	1bed      	subs	r5, r5, r7
 800a37c:	60a5      	str	r5, [r4, #8]
 800a37e:	454e      	cmp	r6, r9
 800a380:	d900      	bls.n	800a384 <__ssputs_r+0x84>
 800a382:	464e      	mov	r6, r9
 800a384:	4632      	mov	r2, r6
 800a386:	4641      	mov	r1, r8
 800a388:	6820      	ldr	r0, [r4, #0]
 800a38a:	f000 f93a 	bl	800a602 <memmove>
 800a38e:	68a3      	ldr	r3, [r4, #8]
 800a390:	2000      	movs	r0, #0
 800a392:	1b9b      	subs	r3, r3, r6
 800a394:	60a3      	str	r3, [r4, #8]
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	441e      	add	r6, r3
 800a39a:	6026      	str	r6, [r4, #0]
 800a39c:	e7dc      	b.n	800a358 <__ssputs_r+0x58>
 800a39e:	462a      	mov	r2, r5
 800a3a0:	f000 f94a 	bl	800a638 <_realloc_r>
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	d1e2      	bne.n	800a370 <__ssputs_r+0x70>
 800a3aa:	6921      	ldr	r1, [r4, #16]
 800a3ac:	4650      	mov	r0, sl
 800a3ae:	f7ff ff01 	bl	800a1b4 <_free_r>
 800a3b2:	e7c8      	b.n	800a346 <__ssputs_r+0x46>

0800a3b4 <_svfiprintf_r>:
 800a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b8:	461d      	mov	r5, r3
 800a3ba:	898b      	ldrh	r3, [r1, #12]
 800a3bc:	b09d      	sub	sp, #116	; 0x74
 800a3be:	061f      	lsls	r7, r3, #24
 800a3c0:	4680      	mov	r8, r0
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	d50f      	bpl.n	800a3e8 <_svfiprintf_r+0x34>
 800a3c8:	690b      	ldr	r3, [r1, #16]
 800a3ca:	b96b      	cbnz	r3, 800a3e8 <_svfiprintf_r+0x34>
 800a3cc:	2140      	movs	r1, #64	; 0x40
 800a3ce:	f7ff ff3d 	bl	800a24c <_malloc_r>
 800a3d2:	6020      	str	r0, [r4, #0]
 800a3d4:	6120      	str	r0, [r4, #16]
 800a3d6:	b928      	cbnz	r0, 800a3e4 <_svfiprintf_r+0x30>
 800a3d8:	230c      	movs	r3, #12
 800a3da:	f8c8 3000 	str.w	r3, [r8]
 800a3de:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e2:	e0c8      	b.n	800a576 <_svfiprintf_r+0x1c2>
 800a3e4:	2340      	movs	r3, #64	; 0x40
 800a3e6:	6163      	str	r3, [r4, #20]
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f2:	2330      	movs	r3, #48	; 0x30
 800a3f4:	f04f 0b01 	mov.w	fp, #1
 800a3f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3fc:	9503      	str	r5, [sp, #12]
 800a3fe:	4637      	mov	r7, r6
 800a400:	463d      	mov	r5, r7
 800a402:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a406:	b10b      	cbz	r3, 800a40c <_svfiprintf_r+0x58>
 800a408:	2b25      	cmp	r3, #37	; 0x25
 800a40a:	d13e      	bne.n	800a48a <_svfiprintf_r+0xd6>
 800a40c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a410:	d00b      	beq.n	800a42a <_svfiprintf_r+0x76>
 800a412:	4653      	mov	r3, sl
 800a414:	4632      	mov	r2, r6
 800a416:	4621      	mov	r1, r4
 800a418:	4640      	mov	r0, r8
 800a41a:	f7ff ff71 	bl	800a300 <__ssputs_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	f000 80a4 	beq.w	800a56c <_svfiprintf_r+0x1b8>
 800a424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a426:	4453      	add	r3, sl
 800a428:	9309      	str	r3, [sp, #36]	; 0x24
 800a42a:	783b      	ldrb	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 809d 	beq.w	800a56c <_svfiprintf_r+0x1b8>
 800a432:	2300      	movs	r3, #0
 800a434:	f04f 32ff 	mov.w	r2, #4294967295
 800a438:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a444:	931a      	str	r3, [sp, #104]	; 0x68
 800a446:	462f      	mov	r7, r5
 800a448:	2205      	movs	r2, #5
 800a44a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a44e:	4850      	ldr	r0, [pc, #320]	; (800a590 <_svfiprintf_r+0x1dc>)
 800a450:	f7ff fa90 	bl	8009974 <memchr>
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	b9d0      	cbnz	r0, 800a48e <_svfiprintf_r+0xda>
 800a458:	06d9      	lsls	r1, r3, #27
 800a45a:	bf44      	itt	mi
 800a45c:	2220      	movmi	r2, #32
 800a45e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a462:	071a      	lsls	r2, r3, #28
 800a464:	bf44      	itt	mi
 800a466:	222b      	movmi	r2, #43	; 0x2b
 800a468:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a46c:	782a      	ldrb	r2, [r5, #0]
 800a46e:	2a2a      	cmp	r2, #42	; 0x2a
 800a470:	d015      	beq.n	800a49e <_svfiprintf_r+0xea>
 800a472:	462f      	mov	r7, r5
 800a474:	2000      	movs	r0, #0
 800a476:	250a      	movs	r5, #10
 800a478:	9a07      	ldr	r2, [sp, #28]
 800a47a:	4639      	mov	r1, r7
 800a47c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a480:	3b30      	subs	r3, #48	; 0x30
 800a482:	2b09      	cmp	r3, #9
 800a484:	d94d      	bls.n	800a522 <_svfiprintf_r+0x16e>
 800a486:	b1b8      	cbz	r0, 800a4b8 <_svfiprintf_r+0x104>
 800a488:	e00f      	b.n	800a4aa <_svfiprintf_r+0xf6>
 800a48a:	462f      	mov	r7, r5
 800a48c:	e7b8      	b.n	800a400 <_svfiprintf_r+0x4c>
 800a48e:	4a40      	ldr	r2, [pc, #256]	; (800a590 <_svfiprintf_r+0x1dc>)
 800a490:	463d      	mov	r5, r7
 800a492:	1a80      	subs	r0, r0, r2
 800a494:	fa0b f000 	lsl.w	r0, fp, r0
 800a498:	4318      	orrs	r0, r3
 800a49a:	9004      	str	r0, [sp, #16]
 800a49c:	e7d3      	b.n	800a446 <_svfiprintf_r+0x92>
 800a49e:	9a03      	ldr	r2, [sp, #12]
 800a4a0:	1d11      	adds	r1, r2, #4
 800a4a2:	6812      	ldr	r2, [r2, #0]
 800a4a4:	9103      	str	r1, [sp, #12]
 800a4a6:	2a00      	cmp	r2, #0
 800a4a8:	db01      	blt.n	800a4ae <_svfiprintf_r+0xfa>
 800a4aa:	9207      	str	r2, [sp, #28]
 800a4ac:	e004      	b.n	800a4b8 <_svfiprintf_r+0x104>
 800a4ae:	4252      	negs	r2, r2
 800a4b0:	f043 0302 	orr.w	r3, r3, #2
 800a4b4:	9207      	str	r2, [sp, #28]
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	783b      	ldrb	r3, [r7, #0]
 800a4ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a4bc:	d10c      	bne.n	800a4d8 <_svfiprintf_r+0x124>
 800a4be:	787b      	ldrb	r3, [r7, #1]
 800a4c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c2:	d133      	bne.n	800a52c <_svfiprintf_r+0x178>
 800a4c4:	9b03      	ldr	r3, [sp, #12]
 800a4c6:	3702      	adds	r7, #2
 800a4c8:	1d1a      	adds	r2, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9203      	str	r2, [sp, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfb8      	it	lt
 800a4d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	4d2e      	ldr	r5, [pc, #184]	; (800a594 <_svfiprintf_r+0x1e0>)
 800a4da:	2203      	movs	r2, #3
 800a4dc:	7839      	ldrb	r1, [r7, #0]
 800a4de:	4628      	mov	r0, r5
 800a4e0:	f7ff fa48 	bl	8009974 <memchr>
 800a4e4:	b138      	cbz	r0, 800a4f6 <_svfiprintf_r+0x142>
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	1b40      	subs	r0, r0, r5
 800a4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	3701      	adds	r7, #1
 800a4f2:	4303      	orrs	r3, r0
 800a4f4:	9304      	str	r3, [sp, #16]
 800a4f6:	7839      	ldrb	r1, [r7, #0]
 800a4f8:	2206      	movs	r2, #6
 800a4fa:	4827      	ldr	r0, [pc, #156]	; (800a598 <_svfiprintf_r+0x1e4>)
 800a4fc:	1c7e      	adds	r6, r7, #1
 800a4fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a502:	f7ff fa37 	bl	8009974 <memchr>
 800a506:	2800      	cmp	r0, #0
 800a508:	d038      	beq.n	800a57c <_svfiprintf_r+0x1c8>
 800a50a:	4b24      	ldr	r3, [pc, #144]	; (800a59c <_svfiprintf_r+0x1e8>)
 800a50c:	bb13      	cbnz	r3, 800a554 <_svfiprintf_r+0x1a0>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	3307      	adds	r3, #7
 800a512:	f023 0307 	bic.w	r3, r3, #7
 800a516:	3308      	adds	r3, #8
 800a518:	9303      	str	r3, [sp, #12]
 800a51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51c:	444b      	add	r3, r9
 800a51e:	9309      	str	r3, [sp, #36]	; 0x24
 800a520:	e76d      	b.n	800a3fe <_svfiprintf_r+0x4a>
 800a522:	fb05 3202 	mla	r2, r5, r2, r3
 800a526:	2001      	movs	r0, #1
 800a528:	460f      	mov	r7, r1
 800a52a:	e7a6      	b.n	800a47a <_svfiprintf_r+0xc6>
 800a52c:	2300      	movs	r3, #0
 800a52e:	250a      	movs	r5, #10
 800a530:	4619      	mov	r1, r3
 800a532:	3701      	adds	r7, #1
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	4638      	mov	r0, r7
 800a538:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a53c:	3a30      	subs	r2, #48	; 0x30
 800a53e:	2a09      	cmp	r2, #9
 800a540:	d903      	bls.n	800a54a <_svfiprintf_r+0x196>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0c8      	beq.n	800a4d8 <_svfiprintf_r+0x124>
 800a546:	9105      	str	r1, [sp, #20]
 800a548:	e7c6      	b.n	800a4d8 <_svfiprintf_r+0x124>
 800a54a:	fb05 2101 	mla	r1, r5, r1, r2
 800a54e:	2301      	movs	r3, #1
 800a550:	4607      	mov	r7, r0
 800a552:	e7f0      	b.n	800a536 <_svfiprintf_r+0x182>
 800a554:	ab03      	add	r3, sp, #12
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4622      	mov	r2, r4
 800a55a:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <_svfiprintf_r+0x1ec>)
 800a55c:	a904      	add	r1, sp, #16
 800a55e:	4640      	mov	r0, r8
 800a560:	f7fc fe62 	bl	8007228 <_printf_float>
 800a564:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a568:	4681      	mov	r9, r0
 800a56a:	d1d6      	bne.n	800a51a <_svfiprintf_r+0x166>
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	065b      	lsls	r3, r3, #25
 800a570:	f53f af35 	bmi.w	800a3de <_svfiprintf_r+0x2a>
 800a574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a576:	b01d      	add	sp, #116	; 0x74
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	ab03      	add	r3, sp, #12
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	4622      	mov	r2, r4
 800a582:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <_svfiprintf_r+0x1ec>)
 800a584:	a904      	add	r1, sp, #16
 800a586:	4640      	mov	r0, r8
 800a588:	f7fd f8fa 	bl	8007780 <_printf_i>
 800a58c:	e7ea      	b.n	800a564 <_svfiprintf_r+0x1b0>
 800a58e:	bf00      	nop
 800a590:	0800c24c 	.word	0x0800c24c
 800a594:	0800c252 	.word	0x0800c252
 800a598:	0800c256 	.word	0x0800c256
 800a59c:	08007229 	.word	0x08007229
 800a5a0:	0800a301 	.word	0x0800a301

0800a5a4 <_sbrk_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	4c05      	ldr	r4, [pc, #20]	; (800a5c0 <_sbrk_r+0x1c>)
 800a5aa:	4605      	mov	r5, r0
 800a5ac:	4608      	mov	r0, r1
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	f7f9 f82a 	bl	8003608 <_sbrk>
 800a5b4:	1c43      	adds	r3, r0, #1
 800a5b6:	d102      	bne.n	800a5be <_sbrk_r+0x1a>
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	b103      	cbz	r3, 800a5be <_sbrk_r+0x1a>
 800a5bc:	602b      	str	r3, [r5, #0]
 800a5be:	bd38      	pop	{r3, r4, r5, pc}
 800a5c0:	20000694 	.word	0x20000694

0800a5c4 <strncmp>:
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	b16a      	cbz	r2, 800a5e4 <strncmp+0x20>
 800a5c8:	3901      	subs	r1, #1
 800a5ca:	1884      	adds	r4, r0, r2
 800a5cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a5d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d103      	bne.n	800a5e0 <strncmp+0x1c>
 800a5d8:	42a0      	cmp	r0, r4
 800a5da:	d001      	beq.n	800a5e0 <strncmp+0x1c>
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1f5      	bne.n	800a5cc <strncmp+0x8>
 800a5e0:	1a98      	subs	r0, r3, r2
 800a5e2:	bd10      	pop	{r4, pc}
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	e7fc      	b.n	800a5e2 <strncmp+0x1e>

0800a5e8 <__ascii_wctomb>:
 800a5e8:	b149      	cbz	r1, 800a5fe <__ascii_wctomb+0x16>
 800a5ea:	2aff      	cmp	r2, #255	; 0xff
 800a5ec:	bf8b      	itete	hi
 800a5ee:	238a      	movhi	r3, #138	; 0x8a
 800a5f0:	700a      	strbls	r2, [r1, #0]
 800a5f2:	6003      	strhi	r3, [r0, #0]
 800a5f4:	2001      	movls	r0, #1
 800a5f6:	bf88      	it	hi
 800a5f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5fc:	4770      	bx	lr
 800a5fe:	4608      	mov	r0, r1
 800a600:	4770      	bx	lr

0800a602 <memmove>:
 800a602:	4288      	cmp	r0, r1
 800a604:	b510      	push	{r4, lr}
 800a606:	eb01 0302 	add.w	r3, r1, r2
 800a60a:	d807      	bhi.n	800a61c <memmove+0x1a>
 800a60c:	1e42      	subs	r2, r0, #1
 800a60e:	4299      	cmp	r1, r3
 800a610:	d00a      	beq.n	800a628 <memmove+0x26>
 800a612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a616:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a61a:	e7f8      	b.n	800a60e <memmove+0xc>
 800a61c:	4283      	cmp	r3, r0
 800a61e:	d9f5      	bls.n	800a60c <memmove+0xa>
 800a620:	1881      	adds	r1, r0, r2
 800a622:	1ad2      	subs	r2, r2, r3
 800a624:	42d3      	cmn	r3, r2
 800a626:	d100      	bne.n	800a62a <memmove+0x28>
 800a628:	bd10      	pop	{r4, pc}
 800a62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a62e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a632:	e7f7      	b.n	800a624 <memmove+0x22>

0800a634 <__malloc_lock>:
 800a634:	4770      	bx	lr

0800a636 <__malloc_unlock>:
 800a636:	4770      	bx	lr

0800a638 <_realloc_r>:
 800a638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63a:	4607      	mov	r7, r0
 800a63c:	4614      	mov	r4, r2
 800a63e:	460e      	mov	r6, r1
 800a640:	b921      	cbnz	r1, 800a64c <_realloc_r+0x14>
 800a642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a646:	4611      	mov	r1, r2
 800a648:	f7ff be00 	b.w	800a24c <_malloc_r>
 800a64c:	b922      	cbnz	r2, 800a658 <_realloc_r+0x20>
 800a64e:	f7ff fdb1 	bl	800a1b4 <_free_r>
 800a652:	4625      	mov	r5, r4
 800a654:	4628      	mov	r0, r5
 800a656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a658:	f000 f814 	bl	800a684 <_malloc_usable_size_r>
 800a65c:	42a0      	cmp	r0, r4
 800a65e:	d20f      	bcs.n	800a680 <_realloc_r+0x48>
 800a660:	4621      	mov	r1, r4
 800a662:	4638      	mov	r0, r7
 800a664:	f7ff fdf2 	bl	800a24c <_malloc_r>
 800a668:	4605      	mov	r5, r0
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0f2      	beq.n	800a654 <_realloc_r+0x1c>
 800a66e:	4631      	mov	r1, r6
 800a670:	4622      	mov	r2, r4
 800a672:	f7ff f98d 	bl	8009990 <memcpy>
 800a676:	4631      	mov	r1, r6
 800a678:	4638      	mov	r0, r7
 800a67a:	f7ff fd9b 	bl	800a1b4 <_free_r>
 800a67e:	e7e9      	b.n	800a654 <_realloc_r+0x1c>
 800a680:	4635      	mov	r5, r6
 800a682:	e7e7      	b.n	800a654 <_realloc_r+0x1c>

0800a684 <_malloc_usable_size_r>:
 800a684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a688:	1f18      	subs	r0, r3, #4
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	bfbc      	itt	lt
 800a68e:	580b      	ldrlt	r3, [r1, r0]
 800a690:	18c0      	addlt	r0, r0, r3
 800a692:	4770      	bx	lr

0800a694 <cos>:
 800a694:	b530      	push	{r4, r5, lr}
 800a696:	4a18      	ldr	r2, [pc, #96]	; (800a6f8 <cos+0x64>)
 800a698:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a69c:	4293      	cmp	r3, r2
 800a69e:	b087      	sub	sp, #28
 800a6a0:	dc04      	bgt.n	800a6ac <cos+0x18>
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f000 fc37 	bl	800af18 <__kernel_cos>
 800a6aa:	e006      	b.n	800a6ba <cos+0x26>
 800a6ac:	4a13      	ldr	r2, [pc, #76]	; (800a6fc <cos+0x68>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	dd05      	ble.n	800a6be <cos+0x2a>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	f7f5 fd57 	bl	8000168 <__aeabi_dsub>
 800a6ba:	b007      	add	sp, #28
 800a6bc:	bd30      	pop	{r4, r5, pc}
 800a6be:	aa02      	add	r2, sp, #8
 800a6c0:	f000 f98e 	bl	800a9e0 <__ieee754_rem_pio2>
 800a6c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c8:	f000 0403 	and.w	r4, r0, #3
 800a6cc:	2c01      	cmp	r4, #1
 800a6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d2:	d008      	beq.n	800a6e6 <cos+0x52>
 800a6d4:	2c02      	cmp	r4, #2
 800a6d6:	d00c      	beq.n	800a6f2 <cos+0x5e>
 800a6d8:	2c00      	cmp	r4, #0
 800a6da:	d0e4      	beq.n	800a6a6 <cos+0x12>
 800a6dc:	2401      	movs	r4, #1
 800a6de:	9400      	str	r4, [sp, #0]
 800a6e0:	f001 f822 	bl	800b728 <__kernel_sin>
 800a6e4:	e7e9      	b.n	800a6ba <cos+0x26>
 800a6e6:	9400      	str	r4, [sp, #0]
 800a6e8:	f001 f81e 	bl	800b728 <__kernel_sin>
 800a6ec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a6f0:	e7e3      	b.n	800a6ba <cos+0x26>
 800a6f2:	f000 fc11 	bl	800af18 <__kernel_cos>
 800a6f6:	e7f9      	b.n	800a6ec <cos+0x58>
 800a6f8:	3fe921fb 	.word	0x3fe921fb
 800a6fc:	7fefffff 	.word	0x7fefffff

0800a700 <sin>:
 800a700:	b530      	push	{r4, r5, lr}
 800a702:	4a1a      	ldr	r2, [pc, #104]	; (800a76c <sin+0x6c>)
 800a704:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a708:	4293      	cmp	r3, r2
 800a70a:	b087      	sub	sp, #28
 800a70c:	dc06      	bgt.n	800a71c <sin+0x1c>
 800a70e:	2300      	movs	r3, #0
 800a710:	2200      	movs	r2, #0
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	2300      	movs	r3, #0
 800a716:	f001 f807 	bl	800b728 <__kernel_sin>
 800a71a:	e006      	b.n	800a72a <sin+0x2a>
 800a71c:	4a14      	ldr	r2, [pc, #80]	; (800a770 <sin+0x70>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	dd05      	ble.n	800a72e <sin+0x2e>
 800a722:	4602      	mov	r2, r0
 800a724:	460b      	mov	r3, r1
 800a726:	f7f5 fd1f 	bl	8000168 <__aeabi_dsub>
 800a72a:	b007      	add	sp, #28
 800a72c:	bd30      	pop	{r4, r5, pc}
 800a72e:	aa02      	add	r2, sp, #8
 800a730:	f000 f956 	bl	800a9e0 <__ieee754_rem_pio2>
 800a734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a738:	f000 0403 	and.w	r4, r0, #3
 800a73c:	2c01      	cmp	r4, #1
 800a73e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a742:	d005      	beq.n	800a750 <sin+0x50>
 800a744:	2c02      	cmp	r4, #2
 800a746:	d006      	beq.n	800a756 <sin+0x56>
 800a748:	b964      	cbnz	r4, 800a764 <sin+0x64>
 800a74a:	2401      	movs	r4, #1
 800a74c:	9400      	str	r4, [sp, #0]
 800a74e:	e7e2      	b.n	800a716 <sin+0x16>
 800a750:	f000 fbe2 	bl	800af18 <__kernel_cos>
 800a754:	e7e9      	b.n	800a72a <sin+0x2a>
 800a756:	2401      	movs	r4, #1
 800a758:	9400      	str	r4, [sp, #0]
 800a75a:	f000 ffe5 	bl	800b728 <__kernel_sin>
 800a75e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a762:	e7e2      	b.n	800a72a <sin+0x2a>
 800a764:	f000 fbd8 	bl	800af18 <__kernel_cos>
 800a768:	e7f9      	b.n	800a75e <sin+0x5e>
 800a76a:	bf00      	nop
 800a76c:	3fe921fb 	.word	0x3fe921fb
 800a770:	7fefffff 	.word	0x7fefffff

0800a774 <atan2>:
 800a774:	f000 b854 	b.w	800a820 <__ieee754_atan2>

0800a778 <sqrt>:
 800a778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77c:	b08b      	sub	sp, #44	; 0x2c
 800a77e:	4604      	mov	r4, r0
 800a780:	460d      	mov	r5, r1
 800a782:	f000 fb1d 	bl	800adc0 <__ieee754_sqrt>
 800a786:	4b24      	ldr	r3, [pc, #144]	; (800a818 <sqrt+0xa0>)
 800a788:	4680      	mov	r8, r0
 800a78a:	f993 a000 	ldrsb.w	sl, [r3]
 800a78e:	4689      	mov	r9, r1
 800a790:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a794:	d02b      	beq.n	800a7ee <sqrt+0x76>
 800a796:	4622      	mov	r2, r4
 800a798:	462b      	mov	r3, r5
 800a79a:	4620      	mov	r0, r4
 800a79c:	4629      	mov	r1, r5
 800a79e:	f7f6 f935 	bl	8000a0c <__aeabi_dcmpun>
 800a7a2:	4683      	mov	fp, r0
 800a7a4:	bb18      	cbnz	r0, 800a7ee <sqrt+0x76>
 800a7a6:	2600      	movs	r6, #0
 800a7a8:	2700      	movs	r7, #0
 800a7aa:	4632      	mov	r2, r6
 800a7ac:	463b      	mov	r3, r7
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	f7f6 f903 	bl	80009bc <__aeabi_dcmplt>
 800a7b6:	b1d0      	cbz	r0, 800a7ee <sqrt+0x76>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	4b17      	ldr	r3, [pc, #92]	; (800a81c <sqrt+0xa4>)
 800a7be:	f8cd b020 	str.w	fp, [sp, #32]
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a7c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a7cc:	f1ba 0f00 	cmp.w	sl, #0
 800a7d0:	d112      	bne.n	800a7f8 <sqrt+0x80>
 800a7d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7d6:	4668      	mov	r0, sp
 800a7d8:	f001 fa72 	bl	800bcc0 <matherr>
 800a7dc:	b1b8      	cbz	r0, 800a80e <sqrt+0x96>
 800a7de:	9b08      	ldr	r3, [sp, #32]
 800a7e0:	b11b      	cbz	r3, 800a7ea <sqrt+0x72>
 800a7e2:	f7fc fc5d 	bl	80070a0 <__errno>
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	4649      	mov	r1, r9
 800a7f2:	b00b      	add	sp, #44	; 0x2c
 800a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	4630      	mov	r0, r6
 800a7fe:	4639      	mov	r1, r7
 800a800:	f7f5 ff94 	bl	800072c <__aeabi_ddiv>
 800a804:	f1ba 0f02 	cmp.w	sl, #2
 800a808:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a80c:	d1e3      	bne.n	800a7d6 <sqrt+0x5e>
 800a80e:	f7fc fc47 	bl	80070a0 <__errno>
 800a812:	2321      	movs	r3, #33	; 0x21
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	e7e2      	b.n	800a7de <sqrt+0x66>
 800a818:	200001fc 	.word	0x200001fc
 800a81c:	0800c35e 	.word	0x0800c35e

0800a820 <__ieee754_atan2>:
 800a820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	4256      	negs	r6, r2
 800a826:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800a82a:	4316      	orrs	r6, r2
 800a82c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800a9d8 <__ieee754_atan2+0x1b8>
 800a830:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800a834:	454e      	cmp	r6, r9
 800a836:	4604      	mov	r4, r0
 800a838:	460d      	mov	r5, r1
 800a83a:	469e      	mov	lr, r3
 800a83c:	d808      	bhi.n	800a850 <__ieee754_atan2+0x30>
 800a83e:	4246      	negs	r6, r0
 800a840:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800a844:	4306      	orrs	r6, r0
 800a846:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800a84a:	454e      	cmp	r6, r9
 800a84c:	4688      	mov	r8, r1
 800a84e:	d906      	bls.n	800a85e <__ieee754_atan2+0x3e>
 800a850:	4620      	mov	r0, r4
 800a852:	4629      	mov	r1, r5
 800a854:	f7f5 fc8a 	bl	800016c <__adddf3>
 800a858:	4604      	mov	r4, r0
 800a85a:	460d      	mov	r5, r1
 800a85c:	e030      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a85e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800a862:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800a866:	4316      	orrs	r6, r2
 800a868:	d103      	bne.n	800a872 <__ieee754_atan2+0x52>
 800a86a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86e:	f001 b813 	b.w	800b898 <atan>
 800a872:	179e      	asrs	r6, r3, #30
 800a874:	f006 0602 	and.w	r6, r6, #2
 800a878:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800a87c:	ea57 0100 	orrs.w	r1, r7, r0
 800a880:	d107      	bne.n	800a892 <__ieee754_atan2+0x72>
 800a882:	2e02      	cmp	r6, #2
 800a884:	d079      	beq.n	800a97a <__ieee754_atan2+0x15a>
 800a886:	2e03      	cmp	r6, #3
 800a888:	d11a      	bne.n	800a8c0 <__ieee754_atan2+0xa0>
 800a88a:	a541      	add	r5, pc, #260	; (adr r5, 800a990 <__ieee754_atan2+0x170>)
 800a88c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a890:	e016      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a892:	ea5c 0102 	orrs.w	r1, ip, r2
 800a896:	d106      	bne.n	800a8a6 <__ieee754_atan2+0x86>
 800a898:	f1b8 0f00 	cmp.w	r8, #0
 800a89c:	da71      	bge.n	800a982 <__ieee754_atan2+0x162>
 800a89e:	a53e      	add	r5, pc, #248	; (adr r5, 800a998 <__ieee754_atan2+0x178>)
 800a8a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8a4:	e00c      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a8a6:	45cc      	cmp	ip, r9
 800a8a8:	d123      	bne.n	800a8f2 <__ieee754_atan2+0xd2>
 800a8aa:	4567      	cmp	r7, ip
 800a8ac:	d114      	bne.n	800a8d8 <__ieee754_atan2+0xb8>
 800a8ae:	2e02      	cmp	r6, #2
 800a8b0:	d00a      	beq.n	800a8c8 <__ieee754_atan2+0xa8>
 800a8b2:	2e03      	cmp	r6, #3
 800a8b4:	d00c      	beq.n	800a8d0 <__ieee754_atan2+0xb0>
 800a8b6:	2e01      	cmp	r6, #1
 800a8b8:	d15b      	bne.n	800a972 <__ieee754_atan2+0x152>
 800a8ba:	a539      	add	r5, pc, #228	; (adr r5, 800a9a0 <__ieee754_atan2+0x180>)
 800a8bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	4629      	mov	r1, r5
 800a8c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	a537      	add	r5, pc, #220	; (adr r5, 800a9a8 <__ieee754_atan2+0x188>)
 800a8ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8ce:	e7f7      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a8d0:	a537      	add	r5, pc, #220	; (adr r5, 800a9b0 <__ieee754_atan2+0x190>)
 800a8d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a8d6:	e7f3      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a8d8:	2e02      	cmp	r6, #2
 800a8da:	d04e      	beq.n	800a97a <__ieee754_atan2+0x15a>
 800a8dc:	2e03      	cmp	r6, #3
 800a8de:	d0d4      	beq.n	800a88a <__ieee754_atan2+0x6a>
 800a8e0:	2e01      	cmp	r6, #1
 800a8e2:	f04f 0400 	mov.w	r4, #0
 800a8e6:	d102      	bne.n	800a8ee <__ieee754_atan2+0xce>
 800a8e8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800a8ec:	e7e8      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a8ee:	2500      	movs	r5, #0
 800a8f0:	e7e6      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a8f2:	454f      	cmp	r7, r9
 800a8f4:	d0d0      	beq.n	800a898 <__ieee754_atan2+0x78>
 800a8f6:	eba7 070c 	sub.w	r7, r7, ip
 800a8fa:	153f      	asrs	r7, r7, #20
 800a8fc:	2f3c      	cmp	r7, #60	; 0x3c
 800a8fe:	dc1e      	bgt.n	800a93e <__ieee754_atan2+0x11e>
 800a900:	2b00      	cmp	r3, #0
 800a902:	da01      	bge.n	800a908 <__ieee754_atan2+0xe8>
 800a904:	373c      	adds	r7, #60	; 0x3c
 800a906:	db1e      	blt.n	800a946 <__ieee754_atan2+0x126>
 800a908:	4620      	mov	r0, r4
 800a90a:	4629      	mov	r1, r5
 800a90c:	f7f5 ff0e 	bl	800072c <__aeabi_ddiv>
 800a910:	f001 f94c 	bl	800bbac <fabs>
 800a914:	f000 ffc0 	bl	800b898 <atan>
 800a918:	4604      	mov	r4, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	2e01      	cmp	r6, #1
 800a91e:	d015      	beq.n	800a94c <__ieee754_atan2+0x12c>
 800a920:	2e02      	cmp	r6, #2
 800a922:	d017      	beq.n	800a954 <__ieee754_atan2+0x134>
 800a924:	2e00      	cmp	r6, #0
 800a926:	d0cb      	beq.n	800a8c0 <__ieee754_atan2+0xa0>
 800a928:	a323      	add	r3, pc, #140	; (adr r3, 800a9b8 <__ieee754_atan2+0x198>)
 800a92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fc19 	bl	8000168 <__aeabi_dsub>
 800a936:	a322      	add	r3, pc, #136	; (adr r3, 800a9c0 <__ieee754_atan2+0x1a0>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	e016      	b.n	800a96c <__ieee754_atan2+0x14c>
 800a93e:	a522      	add	r5, pc, #136	; (adr r5, 800a9c8 <__ieee754_atan2+0x1a8>)
 800a940:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a944:	e7ea      	b.n	800a91c <__ieee754_atan2+0xfc>
 800a946:	2400      	movs	r4, #0
 800a948:	2500      	movs	r5, #0
 800a94a:	e7e7      	b.n	800a91c <__ieee754_atan2+0xfc>
 800a94c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a950:	461d      	mov	r5, r3
 800a952:	e7b5      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a954:	a318      	add	r3, pc, #96	; (adr r3, 800a9b8 <__ieee754_atan2+0x198>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	4620      	mov	r0, r4
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f5 fc03 	bl	8000168 <__aeabi_dsub>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	a116      	add	r1, pc, #88	; (adr r1, 800a9c0 <__ieee754_atan2+0x1a0>)
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	f7f5 fbfc 	bl	8000168 <__aeabi_dsub>
 800a970:	e772      	b.n	800a858 <__ieee754_atan2+0x38>
 800a972:	a517      	add	r5, pc, #92	; (adr r5, 800a9d0 <__ieee754_atan2+0x1b0>)
 800a974:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a978:	e7a2      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a97a:	a511      	add	r5, pc, #68	; (adr r5, 800a9c0 <__ieee754_atan2+0x1a0>)
 800a97c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a980:	e79e      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a982:	a511      	add	r5, pc, #68	; (adr r5, 800a9c8 <__ieee754_atan2+0x1a8>)
 800a984:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a988:	e79a      	b.n	800a8c0 <__ieee754_atan2+0xa0>
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w
 800a990:	54442d18 	.word	0x54442d18
 800a994:	c00921fb 	.word	0xc00921fb
 800a998:	54442d18 	.word	0x54442d18
 800a99c:	bff921fb 	.word	0xbff921fb
 800a9a0:	54442d18 	.word	0x54442d18
 800a9a4:	bfe921fb 	.word	0xbfe921fb
 800a9a8:	7f3321d2 	.word	0x7f3321d2
 800a9ac:	4002d97c 	.word	0x4002d97c
 800a9b0:	7f3321d2 	.word	0x7f3321d2
 800a9b4:	c002d97c 	.word	0xc002d97c
 800a9b8:	33145c07 	.word	0x33145c07
 800a9bc:	3ca1a626 	.word	0x3ca1a626
 800a9c0:	54442d18 	.word	0x54442d18
 800a9c4:	400921fb 	.word	0x400921fb
 800a9c8:	54442d18 	.word	0x54442d18
 800a9cc:	3ff921fb 	.word	0x3ff921fb
 800a9d0:	54442d18 	.word	0x54442d18
 800a9d4:	3fe921fb 	.word	0x3fe921fb
 800a9d8:	7ff00000 	.word	0x7ff00000
 800a9dc:	00000000 	.word	0x00000000

0800a9e0 <__ieee754_rem_pio2>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	4ac2      	ldr	r2, [pc, #776]	; (800acf0 <__ieee754_rem_pio2+0x310>)
 800a9e8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800a9ec:	4592      	cmp	sl, r2
 800a9ee:	b08d      	sub	sp, #52	; 0x34
 800a9f0:	468b      	mov	fp, r1
 800a9f2:	dc07      	bgt.n	800aa04 <__ieee754_rem_pio2+0x24>
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a9fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800aa00:	2500      	movs	r5, #0
 800aa02:	e023      	b.n	800aa4c <__ieee754_rem_pio2+0x6c>
 800aa04:	4abb      	ldr	r2, [pc, #748]	; (800acf4 <__ieee754_rem_pio2+0x314>)
 800aa06:	4592      	cmp	sl, r2
 800aa08:	dc71      	bgt.n	800aaee <__ieee754_rem_pio2+0x10e>
 800aa0a:	a3ab      	add	r3, pc, #684	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2d8>)
 800aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa10:	2900      	cmp	r1, #0
 800aa12:	4db9      	ldr	r5, [pc, #740]	; (800acf8 <__ieee754_rem_pio2+0x318>)
 800aa14:	dd36      	ble.n	800aa84 <__ieee754_rem_pio2+0xa4>
 800aa16:	f7f5 fba7 	bl	8000168 <__aeabi_dsub>
 800aa1a:	45aa      	cmp	sl, r5
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	d018      	beq.n	800aa54 <__ieee754_rem_pio2+0x74>
 800aa22:	a3a7      	add	r3, pc, #668	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2e0>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fb9e 	bl	8000168 <__aeabi_dsub>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4630      	mov	r0, r6
 800aa32:	e9c4 2300 	strd	r2, r3, [r4]
 800aa36:	4639      	mov	r1, r7
 800aa38:	f7f5 fb96 	bl	8000168 <__aeabi_dsub>
 800aa3c:	a3a0      	add	r3, pc, #640	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2e0>)
 800aa3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa42:	f7f5 fb91 	bl	8000168 <__aeabi_dsub>
 800aa46:	2501      	movs	r5, #1
 800aa48:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	b00d      	add	sp, #52	; 0x34
 800aa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa54:	a39c      	add	r3, pc, #624	; (adr r3, 800acc8 <__ieee754_rem_pio2+0x2e8>)
 800aa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5a:	f7f5 fb85 	bl	8000168 <__aeabi_dsub>
 800aa5e:	a39c      	add	r3, pc, #624	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2f0>)
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	4606      	mov	r6, r0
 800aa66:	460f      	mov	r7, r1
 800aa68:	f7f5 fb7e 	bl	8000168 <__aeabi_dsub>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	460b      	mov	r3, r1
 800aa70:	4630      	mov	r0, r6
 800aa72:	e9c4 2300 	strd	r2, r3, [r4]
 800aa76:	4639      	mov	r1, r7
 800aa78:	f7f5 fb76 	bl	8000168 <__aeabi_dsub>
 800aa7c:	a394      	add	r3, pc, #592	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2f0>)
 800aa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa82:	e7de      	b.n	800aa42 <__ieee754_rem_pio2+0x62>
 800aa84:	f7f5 fb72 	bl	800016c <__adddf3>
 800aa88:	45aa      	cmp	sl, r5
 800aa8a:	4606      	mov	r6, r0
 800aa8c:	460f      	mov	r7, r1
 800aa8e:	d016      	beq.n	800aabe <__ieee754_rem_pio2+0xde>
 800aa90:	a38b      	add	r3, pc, #556	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2e0>)
 800aa92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa96:	f7f5 fb69 	bl	800016c <__adddf3>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	e9c4 2300 	strd	r2, r3, [r4]
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	f7f5 fb5f 	bl	8000168 <__aeabi_dsub>
 800aaaa:	a385      	add	r3, pc, #532	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2e0>)
 800aaac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab0:	f7f5 fb5c 	bl	800016c <__adddf3>
 800aab4:	f04f 35ff 	mov.w	r5, #4294967295
 800aab8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aabc:	e7c6      	b.n	800aa4c <__ieee754_rem_pio2+0x6c>
 800aabe:	a382      	add	r3, pc, #520	; (adr r3, 800acc8 <__ieee754_rem_pio2+0x2e8>)
 800aac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac4:	f7f5 fb52 	bl	800016c <__adddf3>
 800aac8:	a381      	add	r3, pc, #516	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2f0>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	f7f5 fb4b 	bl	800016c <__adddf3>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4630      	mov	r0, r6
 800aadc:	e9c4 2300 	strd	r2, r3, [r4]
 800aae0:	4639      	mov	r1, r7
 800aae2:	f7f5 fb41 	bl	8000168 <__aeabi_dsub>
 800aae6:	a37a      	add	r3, pc, #488	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2f0>)
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	e7e0      	b.n	800aab0 <__ieee754_rem_pio2+0xd0>
 800aaee:	4a83      	ldr	r2, [pc, #524]	; (800acfc <__ieee754_rem_pio2+0x31c>)
 800aaf0:	4592      	cmp	sl, r2
 800aaf2:	f300 80d2 	bgt.w	800ac9a <__ieee754_rem_pio2+0x2ba>
 800aaf6:	f001 f859 	bl	800bbac <fabs>
 800aafa:	a377      	add	r3, pc, #476	; (adr r3, 800acd8 <__ieee754_rem_pio2+0x2f8>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	4606      	mov	r6, r0
 800ab02:	460f      	mov	r7, r1
 800ab04:	f7f5 fce8 	bl	80004d8 <__aeabi_dmul>
 800ab08:	2200      	movs	r2, #0
 800ab0a:	4b7d      	ldr	r3, [pc, #500]	; (800ad00 <__ieee754_rem_pio2+0x320>)
 800ab0c:	f7f5 fb2e 	bl	800016c <__adddf3>
 800ab10:	f7f5 ff92 	bl	8000a38 <__aeabi_d2iz>
 800ab14:	4605      	mov	r5, r0
 800ab16:	f7f5 fc75 	bl	8000404 <__aeabi_i2d>
 800ab1a:	a367      	add	r3, pc, #412	; (adr r3, 800acb8 <__ieee754_rem_pio2+0x2d8>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab24:	f7f5 fcd8 	bl	80004d8 <__aeabi_dmul>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	4639      	mov	r1, r7
 800ab30:	f7f5 fb1a 	bl	8000168 <__aeabi_dsub>
 800ab34:	a362      	add	r3, pc, #392	; (adr r3, 800acc0 <__ieee754_rem_pio2+0x2e0>)
 800ab36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3a:	4606      	mov	r6, r0
 800ab3c:	460f      	mov	r7, r1
 800ab3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab42:	f7f5 fcc9 	bl	80004d8 <__aeabi_dmul>
 800ab46:	2d1f      	cmp	r5, #31
 800ab48:	4680      	mov	r8, r0
 800ab4a:	4689      	mov	r9, r1
 800ab4c:	dc0e      	bgt.n	800ab6c <__ieee754_rem_pio2+0x18c>
 800ab4e:	4b6d      	ldr	r3, [pc, #436]	; (800ad04 <__ieee754_rem_pio2+0x324>)
 800ab50:	1e6a      	subs	r2, r5, #1
 800ab52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab56:	4553      	cmp	r3, sl
 800ab58:	d008      	beq.n	800ab6c <__ieee754_rem_pio2+0x18c>
 800ab5a:	4642      	mov	r2, r8
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	4630      	mov	r0, r6
 800ab60:	4639      	mov	r1, r7
 800ab62:	f7f5 fb01 	bl	8000168 <__aeabi_dsub>
 800ab66:	e9c4 0100 	strd	r0, r1, [r4]
 800ab6a:	e011      	b.n	800ab90 <__ieee754_rem_pio2+0x1b0>
 800ab6c:	464b      	mov	r3, r9
 800ab6e:	4642      	mov	r2, r8
 800ab70:	4630      	mov	r0, r6
 800ab72:	4639      	mov	r1, r7
 800ab74:	f7f5 faf8 	bl	8000168 <__aeabi_dsub>
 800ab78:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ab7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ab80:	ebaa 0303 	sub.w	r3, sl, r3
 800ab84:	2b10      	cmp	r3, #16
 800ab86:	dc1f      	bgt.n	800abc8 <__ieee754_rem_pio2+0x1e8>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	e9c4 2300 	strd	r2, r3, [r4]
 800ab90:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800ab94:	4630      	mov	r0, r6
 800ab96:	4653      	mov	r3, sl
 800ab98:	4639      	mov	r1, r7
 800ab9a:	f7f5 fae5 	bl	8000168 <__aeabi_dsub>
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	f7f5 fae1 	bl	8000168 <__aeabi_dsub>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	f1bb 0f00 	cmp.w	fp, #0
 800abae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800abb2:	f6bf af4b 	bge.w	800aa4c <__ieee754_rem_pio2+0x6c>
 800abb6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800abba:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800abbe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800abc2:	60e1      	str	r1, [r4, #12]
 800abc4:	426d      	negs	r5, r5
 800abc6:	e741      	b.n	800aa4c <__ieee754_rem_pio2+0x6c>
 800abc8:	a33f      	add	r3, pc, #252	; (adr r3, 800acc8 <__ieee754_rem_pio2+0x2e8>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd2:	f7f5 fc81 	bl	80004d8 <__aeabi_dmul>
 800abd6:	4680      	mov	r8, r0
 800abd8:	4689      	mov	r9, r1
 800abda:	4602      	mov	r2, r0
 800abdc:	460b      	mov	r3, r1
 800abde:	4630      	mov	r0, r6
 800abe0:	4639      	mov	r1, r7
 800abe2:	f7f5 fac1 	bl	8000168 <__aeabi_dsub>
 800abe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	4630      	mov	r0, r6
 800abf0:	4639      	mov	r1, r7
 800abf2:	f7f5 fab9 	bl	8000168 <__aeabi_dsub>
 800abf6:	4642      	mov	r2, r8
 800abf8:	464b      	mov	r3, r9
 800abfa:	f7f5 fab5 	bl	8000168 <__aeabi_dsub>
 800abfe:	a334      	add	r3, pc, #208	; (adr r3, 800acd0 <__ieee754_rem_pio2+0x2f0>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac0c:	f7f5 fc64 	bl	80004d8 <__aeabi_dmul>
 800ac10:	4632      	mov	r2, r6
 800ac12:	463b      	mov	r3, r7
 800ac14:	f7f5 faa8 	bl	8000168 <__aeabi_dsub>
 800ac18:	460b      	mov	r3, r1
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	4680      	mov	r8, r0
 800ac1e:	4689      	mov	r9, r1
 800ac20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac24:	f7f5 faa0 	bl	8000168 <__aeabi_dsub>
 800ac28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ac2c:	ebaa 0a03 	sub.w	sl, sl, r3
 800ac30:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800ac34:	dc06      	bgt.n	800ac44 <__ieee754_rem_pio2+0x264>
 800ac36:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9c4 2300 	strd	r2, r3, [r4]
 800ac42:	e7a5      	b.n	800ab90 <__ieee754_rem_pio2+0x1b0>
 800ac44:	a326      	add	r3, pc, #152	; (adr r3, 800ace0 <__ieee754_rem_pio2+0x300>)
 800ac46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4e:	f7f5 fc43 	bl	80004d8 <__aeabi_dmul>
 800ac52:	4680      	mov	r8, r0
 800ac54:	4689      	mov	r9, r1
 800ac56:	4602      	mov	r2, r0
 800ac58:	460b      	mov	r3, r1
 800ac5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac5e:	f7f5 fa83 	bl	8000168 <__aeabi_dsub>
 800ac62:	4602      	mov	r2, r0
 800ac64:	460b      	mov	r3, r1
 800ac66:	4606      	mov	r6, r0
 800ac68:	460f      	mov	r7, r1
 800ac6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac6e:	f7f5 fa7b 	bl	8000168 <__aeabi_dsub>
 800ac72:	4642      	mov	r2, r8
 800ac74:	464b      	mov	r3, r9
 800ac76:	f7f5 fa77 	bl	8000168 <__aeabi_dsub>
 800ac7a:	a31b      	add	r3, pc, #108	; (adr r3, 800ace8 <__ieee754_rem_pio2+0x308>)
 800ac7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac80:	4680      	mov	r8, r0
 800ac82:	4689      	mov	r9, r1
 800ac84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac88:	f7f5 fc26 	bl	80004d8 <__aeabi_dmul>
 800ac8c:	4642      	mov	r2, r8
 800ac8e:	464b      	mov	r3, r9
 800ac90:	f7f5 fa6a 	bl	8000168 <__aeabi_dsub>
 800ac94:	4680      	mov	r8, r0
 800ac96:	4689      	mov	r9, r1
 800ac98:	e75f      	b.n	800ab5a <__ieee754_rem_pio2+0x17a>
 800ac9a:	4a1b      	ldr	r2, [pc, #108]	; (800ad08 <__ieee754_rem_pio2+0x328>)
 800ac9c:	4592      	cmp	sl, r2
 800ac9e:	dd35      	ble.n	800ad0c <__ieee754_rem_pio2+0x32c>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	f7f5 fa60 	bl	8000168 <__aeabi_dsub>
 800aca8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800acac:	e9c4 0100 	strd	r0, r1, [r4]
 800acb0:	e6a6      	b.n	800aa00 <__ieee754_rem_pio2+0x20>
 800acb2:	bf00      	nop
 800acb4:	f3af 8000 	nop.w
 800acb8:	54400000 	.word	0x54400000
 800acbc:	3ff921fb 	.word	0x3ff921fb
 800acc0:	1a626331 	.word	0x1a626331
 800acc4:	3dd0b461 	.word	0x3dd0b461
 800acc8:	1a600000 	.word	0x1a600000
 800accc:	3dd0b461 	.word	0x3dd0b461
 800acd0:	2e037073 	.word	0x2e037073
 800acd4:	3ba3198a 	.word	0x3ba3198a
 800acd8:	6dc9c883 	.word	0x6dc9c883
 800acdc:	3fe45f30 	.word	0x3fe45f30
 800ace0:	2e000000 	.word	0x2e000000
 800ace4:	3ba3198a 	.word	0x3ba3198a
 800ace8:	252049c1 	.word	0x252049c1
 800acec:	397b839a 	.word	0x397b839a
 800acf0:	3fe921fb 	.word	0x3fe921fb
 800acf4:	4002d97b 	.word	0x4002d97b
 800acf8:	3ff921fb 	.word	0x3ff921fb
 800acfc:	413921fb 	.word	0x413921fb
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	0800c364 	.word	0x0800c364
 800ad08:	7fefffff 	.word	0x7fefffff
 800ad0c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800ad10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ad14:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800ad18:	460f      	mov	r7, r1
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	f7f5 fe8c 	bl	8000a38 <__aeabi_d2iz>
 800ad20:	f7f5 fb70 	bl	8000404 <__aeabi_i2d>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4630      	mov	r0, r6
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ad30:	f7f5 fa1a 	bl	8000168 <__aeabi_dsub>
 800ad34:	2200      	movs	r2, #0
 800ad36:	4b20      	ldr	r3, [pc, #128]	; (800adb8 <__ieee754_rem_pio2+0x3d8>)
 800ad38:	f7f5 fbce 	bl	80004d8 <__aeabi_dmul>
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	4606      	mov	r6, r0
 800ad40:	f7f5 fe7a 	bl	8000a38 <__aeabi_d2iz>
 800ad44:	f7f5 fb5e 	bl	8000404 <__aeabi_i2d>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	4639      	mov	r1, r7
 800ad50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ad54:	f7f5 fa08 	bl	8000168 <__aeabi_dsub>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <__ieee754_rem_pio2+0x3d8>)
 800ad5c:	f7f5 fbbc 	bl	80004d8 <__aeabi_dmul>
 800ad60:	f04f 0803 	mov.w	r8, #3
 800ad64:	2600      	movs	r6, #0
 800ad66:	2700      	movs	r7, #0
 800ad68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ad6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ad70:	4632      	mov	r2, r6
 800ad72:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ad76:	463b      	mov	r3, r7
 800ad78:	f108 3aff 	add.w	sl, r8, #4294967295
 800ad7c:	f7f5 fe14 	bl	80009a8 <__aeabi_dcmpeq>
 800ad80:	b9b8      	cbnz	r0, 800adb2 <__ieee754_rem_pio2+0x3d2>
 800ad82:	4b0e      	ldr	r3, [pc, #56]	; (800adbc <__ieee754_rem_pio2+0x3dc>)
 800ad84:	462a      	mov	r2, r5
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	2302      	movs	r3, #2
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	a806      	add	r0, sp, #24
 800ad90:	4643      	mov	r3, r8
 800ad92:	f000 f97f 	bl	800b094 <__kernel_rem_pio2>
 800ad96:	f1bb 0f00 	cmp.w	fp, #0
 800ad9a:	4605      	mov	r5, r0
 800ad9c:	f6bf ae56 	bge.w	800aa4c <__ieee754_rem_pio2+0x6c>
 800ada0:	6863      	ldr	r3, [r4, #4]
 800ada2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ada6:	6063      	str	r3, [r4, #4]
 800ada8:	68e3      	ldr	r3, [r4, #12]
 800adaa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800adae:	60e3      	str	r3, [r4, #12]
 800adb0:	e708      	b.n	800abc4 <__ieee754_rem_pio2+0x1e4>
 800adb2:	46d0      	mov	r8, sl
 800adb4:	e7dc      	b.n	800ad70 <__ieee754_rem_pio2+0x390>
 800adb6:	bf00      	nop
 800adb8:	41700000 	.word	0x41700000
 800adbc:	0800c3e4 	.word	0x0800c3e4

0800adc0 <__ieee754_sqrt>:
 800adc0:	4b54      	ldr	r3, [pc, #336]	; (800af14 <__ieee754_sqrt+0x154>)
 800adc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adc6:	438b      	bics	r3, r1
 800adc8:	4606      	mov	r6, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	460a      	mov	r2, r1
 800adce:	460c      	mov	r4, r1
 800add0:	d10f      	bne.n	800adf2 <__ieee754_sqrt+0x32>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	f7f5 fb7f 	bl	80004d8 <__aeabi_dmul>
 800adda:	4602      	mov	r2, r0
 800addc:	460b      	mov	r3, r1
 800adde:	4630      	mov	r0, r6
 800ade0:	4629      	mov	r1, r5
 800ade2:	f7f5 f9c3 	bl	800016c <__adddf3>
 800ade6:	4606      	mov	r6, r0
 800ade8:	460d      	mov	r5, r1
 800adea:	4630      	mov	r0, r6
 800adec:	4629      	mov	r1, r5
 800adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf2:	2900      	cmp	r1, #0
 800adf4:	4607      	mov	r7, r0
 800adf6:	4603      	mov	r3, r0
 800adf8:	dc0e      	bgt.n	800ae18 <__ieee754_sqrt+0x58>
 800adfa:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800adfe:	ea5c 0707 	orrs.w	r7, ip, r7
 800ae02:	d0f2      	beq.n	800adea <__ieee754_sqrt+0x2a>
 800ae04:	b141      	cbz	r1, 800ae18 <__ieee754_sqrt+0x58>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	f7f5 f9ad 	bl	8000168 <__aeabi_dsub>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	f7f5 fc8b 	bl	800072c <__aeabi_ddiv>
 800ae16:	e7e6      	b.n	800ade6 <__ieee754_sqrt+0x26>
 800ae18:	1512      	asrs	r2, r2, #20
 800ae1a:	d074      	beq.n	800af06 <__ieee754_sqrt+0x146>
 800ae1c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ae20:	07d5      	lsls	r5, r2, #31
 800ae22:	f04f 0500 	mov.w	r5, #0
 800ae26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ae2a:	bf48      	it	mi
 800ae2c:	0fd9      	lsrmi	r1, r3, #31
 800ae2e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ae32:	bf44      	itt	mi
 800ae34:	005b      	lslmi	r3, r3, #1
 800ae36:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ae3a:	1051      	asrs	r1, r2, #1
 800ae3c:	0fda      	lsrs	r2, r3, #31
 800ae3e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ae42:	4628      	mov	r0, r5
 800ae44:	2216      	movs	r2, #22
 800ae46:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	1987      	adds	r7, r0, r6
 800ae4e:	42a7      	cmp	r7, r4
 800ae50:	bfde      	ittt	le
 800ae52:	19b8      	addle	r0, r7, r6
 800ae54:	1be4      	suble	r4, r4, r7
 800ae56:	19ad      	addle	r5, r5, r6
 800ae58:	0fdf      	lsrs	r7, r3, #31
 800ae5a:	3a01      	subs	r2, #1
 800ae5c:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800ae60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ae64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ae68:	d1f0      	bne.n	800ae4c <__ieee754_sqrt+0x8c>
 800ae6a:	f04f 0c20 	mov.w	ip, #32
 800ae6e:	4696      	mov	lr, r2
 800ae70:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ae74:	4284      	cmp	r4, r0
 800ae76:	eb06 070e 	add.w	r7, r6, lr
 800ae7a:	dc02      	bgt.n	800ae82 <__ieee754_sqrt+0xc2>
 800ae7c:	d112      	bne.n	800aea4 <__ieee754_sqrt+0xe4>
 800ae7e:	429f      	cmp	r7, r3
 800ae80:	d810      	bhi.n	800aea4 <__ieee754_sqrt+0xe4>
 800ae82:	2f00      	cmp	r7, #0
 800ae84:	eb07 0e06 	add.w	lr, r7, r6
 800ae88:	da42      	bge.n	800af10 <__ieee754_sqrt+0x150>
 800ae8a:	f1be 0f00 	cmp.w	lr, #0
 800ae8e:	db3f      	blt.n	800af10 <__ieee754_sqrt+0x150>
 800ae90:	f100 0801 	add.w	r8, r0, #1
 800ae94:	1a24      	subs	r4, r4, r0
 800ae96:	4640      	mov	r0, r8
 800ae98:	429f      	cmp	r7, r3
 800ae9a:	bf88      	it	hi
 800ae9c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 800aea0:	1bdb      	subs	r3, r3, r7
 800aea2:	4432      	add	r2, r6
 800aea4:	0064      	lsls	r4, r4, #1
 800aea6:	f1bc 0c01 	subs.w	ip, ip, #1
 800aeaa:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800aeae:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aeb2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aeb6:	d1dd      	bne.n	800ae74 <__ieee754_sqrt+0xb4>
 800aeb8:	4323      	orrs	r3, r4
 800aeba:	d006      	beq.n	800aeca <__ieee754_sqrt+0x10a>
 800aebc:	1c54      	adds	r4, r2, #1
 800aebe:	bf0b      	itete	eq
 800aec0:	4662      	moveq	r2, ip
 800aec2:	3201      	addne	r2, #1
 800aec4:	3501      	addeq	r5, #1
 800aec6:	f022 0201 	bicne.w	r2, r2, #1
 800aeca:	106b      	asrs	r3, r5, #1
 800aecc:	0852      	lsrs	r2, r2, #1
 800aece:	07e8      	lsls	r0, r5, #31
 800aed0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aed4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aed8:	bf48      	it	mi
 800aeda:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800aede:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800aee2:	4616      	mov	r6, r2
 800aee4:	e781      	b.n	800adea <__ieee754_sqrt+0x2a>
 800aee6:	0adc      	lsrs	r4, r3, #11
 800aee8:	3915      	subs	r1, #21
 800aeea:	055b      	lsls	r3, r3, #21
 800aeec:	2c00      	cmp	r4, #0
 800aeee:	d0fa      	beq.n	800aee6 <__ieee754_sqrt+0x126>
 800aef0:	02e6      	lsls	r6, r4, #11
 800aef2:	d50a      	bpl.n	800af0a <__ieee754_sqrt+0x14a>
 800aef4:	f1c2 0020 	rsb	r0, r2, #32
 800aef8:	fa23 f000 	lsr.w	r0, r3, r0
 800aefc:	1e55      	subs	r5, r2, #1
 800aefe:	4093      	lsls	r3, r2
 800af00:	4304      	orrs	r4, r0
 800af02:	1b4a      	subs	r2, r1, r5
 800af04:	e78a      	b.n	800ae1c <__ieee754_sqrt+0x5c>
 800af06:	4611      	mov	r1, r2
 800af08:	e7f0      	b.n	800aeec <__ieee754_sqrt+0x12c>
 800af0a:	0064      	lsls	r4, r4, #1
 800af0c:	3201      	adds	r2, #1
 800af0e:	e7ef      	b.n	800aef0 <__ieee754_sqrt+0x130>
 800af10:	4680      	mov	r8, r0
 800af12:	e7bf      	b.n	800ae94 <__ieee754_sqrt+0xd4>
 800af14:	7ff00000 	.word	0x7ff00000

0800af18 <__kernel_cos>:
 800af18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800af20:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800af24:	4680      	mov	r8, r0
 800af26:	460f      	mov	r7, r1
 800af28:	e9cd 2300 	strd	r2, r3, [sp]
 800af2c:	da04      	bge.n	800af38 <__kernel_cos+0x20>
 800af2e:	f7f5 fd83 	bl	8000a38 <__aeabi_d2iz>
 800af32:	2800      	cmp	r0, #0
 800af34:	f000 8086 	beq.w	800b044 <__kernel_cos+0x12c>
 800af38:	4642      	mov	r2, r8
 800af3a:	463b      	mov	r3, r7
 800af3c:	4640      	mov	r0, r8
 800af3e:	4639      	mov	r1, r7
 800af40:	f7f5 faca 	bl	80004d8 <__aeabi_dmul>
 800af44:	2200      	movs	r2, #0
 800af46:	4b4e      	ldr	r3, [pc, #312]	; (800b080 <__kernel_cos+0x168>)
 800af48:	4604      	mov	r4, r0
 800af4a:	460d      	mov	r5, r1
 800af4c:	f7f5 fac4 	bl	80004d8 <__aeabi_dmul>
 800af50:	a33f      	add	r3, pc, #252	; (adr r3, 800b050 <__kernel_cos+0x138>)
 800af52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af56:	4682      	mov	sl, r0
 800af58:	468b      	mov	fp, r1
 800af5a:	4620      	mov	r0, r4
 800af5c:	4629      	mov	r1, r5
 800af5e:	f7f5 fabb 	bl	80004d8 <__aeabi_dmul>
 800af62:	a33d      	add	r3, pc, #244	; (adr r3, 800b058 <__kernel_cos+0x140>)
 800af64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af68:	f7f5 f900 	bl	800016c <__adddf3>
 800af6c:	4622      	mov	r2, r4
 800af6e:	462b      	mov	r3, r5
 800af70:	f7f5 fab2 	bl	80004d8 <__aeabi_dmul>
 800af74:	a33a      	add	r3, pc, #232	; (adr r3, 800b060 <__kernel_cos+0x148>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	f7f5 f8f5 	bl	8000168 <__aeabi_dsub>
 800af7e:	4622      	mov	r2, r4
 800af80:	462b      	mov	r3, r5
 800af82:	f7f5 faa9 	bl	80004d8 <__aeabi_dmul>
 800af86:	a338      	add	r3, pc, #224	; (adr r3, 800b068 <__kernel_cos+0x150>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 f8ee 	bl	800016c <__adddf3>
 800af90:	4622      	mov	r2, r4
 800af92:	462b      	mov	r3, r5
 800af94:	f7f5 faa0 	bl	80004d8 <__aeabi_dmul>
 800af98:	a335      	add	r3, pc, #212	; (adr r3, 800b070 <__kernel_cos+0x158>)
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	f7f5 f8e3 	bl	8000168 <__aeabi_dsub>
 800afa2:	4622      	mov	r2, r4
 800afa4:	462b      	mov	r3, r5
 800afa6:	f7f5 fa97 	bl	80004d8 <__aeabi_dmul>
 800afaa:	a333      	add	r3, pc, #204	; (adr r3, 800b078 <__kernel_cos+0x160>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f7f5 f8dc 	bl	800016c <__adddf3>
 800afb4:	4622      	mov	r2, r4
 800afb6:	462b      	mov	r3, r5
 800afb8:	f7f5 fa8e 	bl	80004d8 <__aeabi_dmul>
 800afbc:	4622      	mov	r2, r4
 800afbe:	462b      	mov	r3, r5
 800afc0:	f7f5 fa8a 	bl	80004d8 <__aeabi_dmul>
 800afc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	4640      	mov	r0, r8
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 fa82 	bl	80004d8 <__aeabi_dmul>
 800afd4:	460b      	mov	r3, r1
 800afd6:	4602      	mov	r2, r0
 800afd8:	4629      	mov	r1, r5
 800afda:	4620      	mov	r0, r4
 800afdc:	f7f5 f8c4 	bl	8000168 <__aeabi_dsub>
 800afe0:	4b28      	ldr	r3, [pc, #160]	; (800b084 <__kernel_cos+0x16c>)
 800afe2:	4680      	mov	r8, r0
 800afe4:	429e      	cmp	r6, r3
 800afe6:	4689      	mov	r9, r1
 800afe8:	dc0e      	bgt.n	800b008 <__kernel_cos+0xf0>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4650      	mov	r0, sl
 800aff0:	4659      	mov	r1, fp
 800aff2:	f7f5 f8b9 	bl	8000168 <__aeabi_dsub>
 800aff6:	4602      	mov	r2, r0
 800aff8:	2000      	movs	r0, #0
 800affa:	460b      	mov	r3, r1
 800affc:	4922      	ldr	r1, [pc, #136]	; (800b088 <__kernel_cos+0x170>)
 800affe:	f7f5 f8b3 	bl	8000168 <__aeabi_dsub>
 800b002:	b003      	add	sp, #12
 800b004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b008:	2400      	movs	r4, #0
 800b00a:	4b20      	ldr	r3, [pc, #128]	; (800b08c <__kernel_cos+0x174>)
 800b00c:	4622      	mov	r2, r4
 800b00e:	429e      	cmp	r6, r3
 800b010:	bfcc      	ite	gt
 800b012:	4d1f      	ldrgt	r5, [pc, #124]	; (800b090 <__kernel_cos+0x178>)
 800b014:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b018:	462b      	mov	r3, r5
 800b01a:	2000      	movs	r0, #0
 800b01c:	491a      	ldr	r1, [pc, #104]	; (800b088 <__kernel_cos+0x170>)
 800b01e:	f7f5 f8a3 	bl	8000168 <__aeabi_dsub>
 800b022:	4622      	mov	r2, r4
 800b024:	4606      	mov	r6, r0
 800b026:	460f      	mov	r7, r1
 800b028:	462b      	mov	r3, r5
 800b02a:	4650      	mov	r0, sl
 800b02c:	4659      	mov	r1, fp
 800b02e:	f7f5 f89b 	bl	8000168 <__aeabi_dsub>
 800b032:	4642      	mov	r2, r8
 800b034:	464b      	mov	r3, r9
 800b036:	f7f5 f897 	bl	8000168 <__aeabi_dsub>
 800b03a:	4602      	mov	r2, r0
 800b03c:	460b      	mov	r3, r1
 800b03e:	4630      	mov	r0, r6
 800b040:	4639      	mov	r1, r7
 800b042:	e7dc      	b.n	800affe <__kernel_cos+0xe6>
 800b044:	2000      	movs	r0, #0
 800b046:	4910      	ldr	r1, [pc, #64]	; (800b088 <__kernel_cos+0x170>)
 800b048:	e7db      	b.n	800b002 <__kernel_cos+0xea>
 800b04a:	bf00      	nop
 800b04c:	f3af 8000 	nop.w
 800b050:	be8838d4 	.word	0xbe8838d4
 800b054:	bda8fae9 	.word	0xbda8fae9
 800b058:	bdb4b1c4 	.word	0xbdb4b1c4
 800b05c:	3e21ee9e 	.word	0x3e21ee9e
 800b060:	809c52ad 	.word	0x809c52ad
 800b064:	3e927e4f 	.word	0x3e927e4f
 800b068:	19cb1590 	.word	0x19cb1590
 800b06c:	3efa01a0 	.word	0x3efa01a0
 800b070:	16c15177 	.word	0x16c15177
 800b074:	3f56c16c 	.word	0x3f56c16c
 800b078:	5555554c 	.word	0x5555554c
 800b07c:	3fa55555 	.word	0x3fa55555
 800b080:	3fe00000 	.word	0x3fe00000
 800b084:	3fd33332 	.word	0x3fd33332
 800b088:	3ff00000 	.word	0x3ff00000
 800b08c:	3fe90000 	.word	0x3fe90000
 800b090:	3fd20000 	.word	0x3fd20000

0800b094 <__kernel_rem_pio2>:
 800b094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b098:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b09c:	9307      	str	r3, [sp, #28]
 800b09e:	9104      	str	r1, [sp, #16]
 800b0a0:	4bbf      	ldr	r3, [pc, #764]	; (800b3a0 <__kernel_rem_pio2+0x30c>)
 800b0a2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b0a4:	1ed4      	subs	r4, r2, #3
 800b0a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0aa:	2500      	movs	r5, #0
 800b0ac:	9302      	str	r3, [sp, #8]
 800b0ae:	9b07      	ldr	r3, [sp, #28]
 800b0b0:	9008      	str	r0, [sp, #32]
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	9306      	str	r3, [sp, #24]
 800b0b6:	2318      	movs	r3, #24
 800b0b8:	fb94 f4f3 	sdiv	r4, r4, r3
 800b0bc:	f06f 0317 	mvn.w	r3, #23
 800b0c0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b0c4:	fb04 3303 	mla	r3, r4, r3, r3
 800b0c8:	eb03 0a02 	add.w	sl, r3, r2
 800b0cc:	9a06      	ldr	r2, [sp, #24]
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	1aa7      	subs	r7, r4, r2
 800b0d2:	eb03 0802 	add.w	r8, r3, r2
 800b0d6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b0d8:	2200      	movs	r2, #0
 800b0da:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b0de:	2300      	movs	r3, #0
 800b0e0:	ae1e      	add	r6, sp, #120	; 0x78
 800b0e2:	4545      	cmp	r5, r8
 800b0e4:	dd14      	ble.n	800b110 <__kernel_rem_pio2+0x7c>
 800b0e6:	2600      	movs	r6, #0
 800b0e8:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800b0ec:	9b02      	ldr	r3, [sp, #8]
 800b0ee:	429e      	cmp	r6, r3
 800b0f0:	dc39      	bgt.n	800b166 <__kernel_rem_pio2+0xd2>
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	f04f 0800 	mov.w	r8, #0
 800b0f8:	3b08      	subs	r3, #8
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	9b07      	ldr	r3, [sp, #28]
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	199d      	adds	r5, r3, r6
 800b104:	ab20      	add	r3, sp, #128	; 0x80
 800b106:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b10a:	9305      	str	r3, [sp, #20]
 800b10c:	2700      	movs	r7, #0
 800b10e:	e023      	b.n	800b158 <__kernel_rem_pio2+0xc4>
 800b110:	42ef      	cmn	r7, r5
 800b112:	d40b      	bmi.n	800b12c <__kernel_rem_pio2+0x98>
 800b114:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b118:	e9cd 2300 	strd	r2, r3, [sp]
 800b11c:	f7f5 f972 	bl	8000404 <__aeabi_i2d>
 800b120:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b124:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800b128:	3501      	adds	r5, #1
 800b12a:	e7da      	b.n	800b0e2 <__kernel_rem_pio2+0x4e>
 800b12c:	4610      	mov	r0, r2
 800b12e:	4619      	mov	r1, r3
 800b130:	e7f8      	b.n	800b124 <__kernel_rem_pio2+0x90>
 800b132:	9905      	ldr	r1, [sp, #20]
 800b134:	9d00      	ldr	r5, [sp, #0]
 800b136:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b13a:	9105      	str	r1, [sp, #20]
 800b13c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b140:	9500      	str	r5, [sp, #0]
 800b142:	f7f5 f9c9 	bl	80004d8 <__aeabi_dmul>
 800b146:	4602      	mov	r2, r0
 800b148:	460b      	mov	r3, r1
 800b14a:	4640      	mov	r0, r8
 800b14c:	4649      	mov	r1, r9
 800b14e:	f7f5 f80d 	bl	800016c <__adddf3>
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	3701      	adds	r7, #1
 800b158:	9b06      	ldr	r3, [sp, #24]
 800b15a:	429f      	cmp	r7, r3
 800b15c:	dde9      	ble.n	800b132 <__kernel_rem_pio2+0x9e>
 800b15e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b162:	3601      	adds	r6, #1
 800b164:	e7c2      	b.n	800b0ec <__kernel_rem_pio2+0x58>
 800b166:	9b02      	ldr	r3, [sp, #8]
 800b168:	aa0c      	add	r2, sp, #48	; 0x30
 800b16a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b16e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b170:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b172:	9f02      	ldr	r7, [sp, #8]
 800b174:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b178:	930a      	str	r3, [sp, #40]	; 0x28
 800b17a:	2600      	movs	r6, #0
 800b17c:	ab98      	add	r3, sp, #608	; 0x260
 800b17e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800b182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b186:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b18a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b18e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b192:	ab98      	add	r3, sp, #608	; 0x260
 800b194:	445b      	add	r3, fp
 800b196:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800b19a:	1bbb      	subs	r3, r7, r6
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	dc71      	bgt.n	800b284 <__kernel_rem_pio2+0x1f0>
 800b1a0:	4652      	mov	r2, sl
 800b1a2:	4640      	mov	r0, r8
 800b1a4:	4649      	mov	r1, r9
 800b1a6:	f000 fd8f 	bl	800bcc8 <scalbn>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	f7f5 f990 	bl	80004d8 <__aeabi_dmul>
 800b1b8:	f000 fcfe 	bl	800bbb8 <floor>
 800b1bc:	2200      	movs	r2, #0
 800b1be:	4b79      	ldr	r3, [pc, #484]	; (800b3a4 <__kernel_rem_pio2+0x310>)
 800b1c0:	f7f5 f98a 	bl	80004d8 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	f7f4 ffcc 	bl	8000168 <__aeabi_dsub>
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	f7f5 fc30 	bl	8000a38 <__aeabi_d2iz>
 800b1d8:	9005      	str	r0, [sp, #20]
 800b1da:	f7f5 f913 	bl	8000404 <__aeabi_i2d>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	f7f4 ffbf 	bl	8000168 <__aeabi_dsub>
 800b1ea:	f1ba 0f00 	cmp.w	sl, #0
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	4689      	mov	r9, r1
 800b1f2:	dd6c      	ble.n	800b2ce <__kernel_rem_pio2+0x23a>
 800b1f4:	1e7a      	subs	r2, r7, #1
 800b1f6:	ab0c      	add	r3, sp, #48	; 0x30
 800b1f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b1fc:	f1ca 0118 	rsb	r1, sl, #24
 800b200:	9c05      	ldr	r4, [sp, #20]
 800b202:	fa40 f301 	asr.w	r3, r0, r1
 800b206:	441c      	add	r4, r3
 800b208:	408b      	lsls	r3, r1
 800b20a:	1ac0      	subs	r0, r0, r3
 800b20c:	ab0c      	add	r3, sp, #48	; 0x30
 800b20e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b212:	f1ca 0317 	rsb	r3, sl, #23
 800b216:	9405      	str	r4, [sp, #20]
 800b218:	fa40 f303 	asr.w	r3, r0, r3
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	9b00      	ldr	r3, [sp, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	dd62      	ble.n	800b2ea <__kernel_rem_pio2+0x256>
 800b224:	2200      	movs	r2, #0
 800b226:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b22a:	4614      	mov	r4, r2
 800b22c:	9b05      	ldr	r3, [sp, #20]
 800b22e:	3301      	adds	r3, #1
 800b230:	9305      	str	r3, [sp, #20]
 800b232:	4297      	cmp	r7, r2
 800b234:	f300 809f 	bgt.w	800b376 <__kernel_rem_pio2+0x2e2>
 800b238:	f1ba 0f00 	cmp.w	sl, #0
 800b23c:	dd07      	ble.n	800b24e <__kernel_rem_pio2+0x1ba>
 800b23e:	f1ba 0f01 	cmp.w	sl, #1
 800b242:	f000 80bb 	beq.w	800b3bc <__kernel_rem_pio2+0x328>
 800b246:	f1ba 0f02 	cmp.w	sl, #2
 800b24a:	f000 80c1 	beq.w	800b3d0 <__kernel_rem_pio2+0x33c>
 800b24e:	9b00      	ldr	r3, [sp, #0]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d14a      	bne.n	800b2ea <__kernel_rem_pio2+0x256>
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	2000      	movs	r0, #0
 800b25a:	4953      	ldr	r1, [pc, #332]	; (800b3a8 <__kernel_rem_pio2+0x314>)
 800b25c:	f7f4 ff84 	bl	8000168 <__aeabi_dsub>
 800b260:	4680      	mov	r8, r0
 800b262:	4689      	mov	r9, r1
 800b264:	2c00      	cmp	r4, #0
 800b266:	d040      	beq.n	800b2ea <__kernel_rem_pio2+0x256>
 800b268:	4652      	mov	r2, sl
 800b26a:	2000      	movs	r0, #0
 800b26c:	494e      	ldr	r1, [pc, #312]	; (800b3a8 <__kernel_rem_pio2+0x314>)
 800b26e:	f000 fd2b 	bl	800bcc8 <scalbn>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	4640      	mov	r0, r8
 800b278:	4649      	mov	r1, r9
 800b27a:	f7f4 ff75 	bl	8000168 <__aeabi_dsub>
 800b27e:	4680      	mov	r8, r0
 800b280:	4689      	mov	r9, r1
 800b282:	e032      	b.n	800b2ea <__kernel_rem_pio2+0x256>
 800b284:	2200      	movs	r2, #0
 800b286:	4b49      	ldr	r3, [pc, #292]	; (800b3ac <__kernel_rem_pio2+0x318>)
 800b288:	4640      	mov	r0, r8
 800b28a:	4649      	mov	r1, r9
 800b28c:	f7f5 f924 	bl	80004d8 <__aeabi_dmul>
 800b290:	f7f5 fbd2 	bl	8000a38 <__aeabi_d2iz>
 800b294:	f7f5 f8b6 	bl	8000404 <__aeabi_i2d>
 800b298:	2200      	movs	r2, #0
 800b29a:	4b45      	ldr	r3, [pc, #276]	; (800b3b0 <__kernel_rem_pio2+0x31c>)
 800b29c:	e9cd 0100 	strd	r0, r1, [sp]
 800b2a0:	f7f5 f91a 	bl	80004d8 <__aeabi_dmul>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	4640      	mov	r0, r8
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f4 ff5c 	bl	8000168 <__aeabi_dsub>
 800b2b0:	f7f5 fbc2 	bl	8000a38 <__aeabi_d2iz>
 800b2b4:	ab0c      	add	r3, sp, #48	; 0x30
 800b2b6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800b2ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2c2:	f7f4 ff53 	bl	800016c <__adddf3>
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	4680      	mov	r8, r0
 800b2ca:	4689      	mov	r9, r1
 800b2cc:	e765      	b.n	800b19a <__kernel_rem_pio2+0x106>
 800b2ce:	d105      	bne.n	800b2dc <__kernel_rem_pio2+0x248>
 800b2d0:	1e7b      	subs	r3, r7, #1
 800b2d2:	aa0c      	add	r2, sp, #48	; 0x30
 800b2d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b2d8:	15c3      	asrs	r3, r0, #23
 800b2da:	e79f      	b.n	800b21c <__kernel_rem_pio2+0x188>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4b35      	ldr	r3, [pc, #212]	; (800b3b4 <__kernel_rem_pio2+0x320>)
 800b2e0:	f7f5 fb80 	bl	80009e4 <__aeabi_dcmpge>
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d143      	bne.n	800b370 <__kernel_rem_pio2+0x2dc>
 800b2e8:	9000      	str	r0, [sp, #0]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	4649      	mov	r1, r9
 800b2f2:	f7f5 fb59 	bl	80009a8 <__aeabi_dcmpeq>
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f000 80c3 	beq.w	800b482 <__kernel_rem_pio2+0x3ee>
 800b2fc:	1e7c      	subs	r4, r7, #1
 800b2fe:	4623      	mov	r3, r4
 800b300:	2200      	movs	r2, #0
 800b302:	9902      	ldr	r1, [sp, #8]
 800b304:	428b      	cmp	r3, r1
 800b306:	da6a      	bge.n	800b3de <__kernel_rem_pio2+0x34a>
 800b308:	2a00      	cmp	r2, #0
 800b30a:	f000 8084 	beq.w	800b416 <__kernel_rem_pio2+0x382>
 800b30e:	ab0c      	add	r3, sp, #48	; 0x30
 800b310:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b314:	f1aa 0a18 	sub.w	sl, sl, #24
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80b0 	beq.w	800b47e <__kernel_rem_pio2+0x3ea>
 800b31e:	4652      	mov	r2, sl
 800b320:	2000      	movs	r0, #0
 800b322:	4921      	ldr	r1, [pc, #132]	; (800b3a8 <__kernel_rem_pio2+0x314>)
 800b324:	f000 fcd0 	bl	800bcc8 <scalbn>
 800b328:	4625      	mov	r5, r4
 800b32a:	4606      	mov	r6, r0
 800b32c:	460f      	mov	r7, r1
 800b32e:	f04f 0a00 	mov.w	sl, #0
 800b332:	00e3      	lsls	r3, r4, #3
 800b334:	aa98      	add	r2, sp, #608	; 0x260
 800b336:	eb02 0803 	add.w	r8, r2, r3
 800b33a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800b3ac <__kernel_rem_pio2+0x318>
 800b33e:	9306      	str	r3, [sp, #24]
 800b340:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800b344:	2d00      	cmp	r5, #0
 800b346:	f280 80d2 	bge.w	800b4ee <__kernel_rem_pio2+0x45a>
 800b34a:	2500      	movs	r5, #0
 800b34c:	9a06      	ldr	r2, [sp, #24]
 800b34e:	ab98      	add	r3, sp, #608	; 0x260
 800b350:	189e      	adds	r6, r3, r2
 800b352:	3ea8      	subs	r6, #168	; 0xa8
 800b354:	1b63      	subs	r3, r4, r5
 800b356:	2b00      	cmp	r3, #0
 800b358:	f2c0 80f9 	blt.w	800b54e <__kernel_rem_pio2+0x4ba>
 800b35c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800b3b8 <__kernel_rem_pio2+0x324>
 800b360:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800b364:	f04f 0a00 	mov.w	sl, #0
 800b368:	f04f 0b00 	mov.w	fp, #0
 800b36c:	2700      	movs	r7, #0
 800b36e:	e0e2      	b.n	800b536 <__kernel_rem_pio2+0x4a2>
 800b370:	2302      	movs	r3, #2
 800b372:	9300      	str	r3, [sp, #0]
 800b374:	e756      	b.n	800b224 <__kernel_rem_pio2+0x190>
 800b376:	ab0c      	add	r3, sp, #48	; 0x30
 800b378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37c:	b94c      	cbnz	r4, 800b392 <__kernel_rem_pio2+0x2fe>
 800b37e:	b12b      	cbz	r3, 800b38c <__kernel_rem_pio2+0x2f8>
 800b380:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b384:	a80c      	add	r0, sp, #48	; 0x30
 800b386:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b38a:	2301      	movs	r3, #1
 800b38c:	3201      	adds	r2, #1
 800b38e:	461c      	mov	r4, r3
 800b390:	e74f      	b.n	800b232 <__kernel_rem_pio2+0x19e>
 800b392:	1acb      	subs	r3, r1, r3
 800b394:	a80c      	add	r0, sp, #48	; 0x30
 800b396:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b39a:	4623      	mov	r3, r4
 800b39c:	e7f6      	b.n	800b38c <__kernel_rem_pio2+0x2f8>
 800b39e:	bf00      	nop
 800b3a0:	0800c530 	.word	0x0800c530
 800b3a4:	40200000 	.word	0x40200000
 800b3a8:	3ff00000 	.word	0x3ff00000
 800b3ac:	3e700000 	.word	0x3e700000
 800b3b0:	41700000 	.word	0x41700000
 800b3b4:	3fe00000 	.word	0x3fe00000
 800b3b8:	0800c4e8 	.word	0x0800c4e8
 800b3bc:	1e7a      	subs	r2, r7, #1
 800b3be:	ab0c      	add	r3, sp, #48	; 0x30
 800b3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3c8:	a90c      	add	r1, sp, #48	; 0x30
 800b3ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3ce:	e73e      	b.n	800b24e <__kernel_rem_pio2+0x1ba>
 800b3d0:	1e7a      	subs	r2, r7, #1
 800b3d2:	ab0c      	add	r3, sp, #48	; 0x30
 800b3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b3dc:	e7f4      	b.n	800b3c8 <__kernel_rem_pio2+0x334>
 800b3de:	a90c      	add	r1, sp, #48	; 0x30
 800b3e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	430a      	orrs	r2, r1
 800b3e8:	e78b      	b.n	800b302 <__kernel_rem_pio2+0x26e>
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b3f0:	2a00      	cmp	r2, #0
 800b3f2:	d0fa      	beq.n	800b3ea <__kernel_rem_pio2+0x356>
 800b3f4:	ab98      	add	r3, sp, #608	; 0x260
 800b3f6:	449b      	add	fp, r3
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	1c7e      	adds	r6, r7, #1
 800b3fc:	19dd      	adds	r5, r3, r7
 800b3fe:	ab98      	add	r3, sp, #608	; 0x260
 800b400:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b404:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800b408:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800b40c:	443c      	add	r4, r7
 800b40e:	42b4      	cmp	r4, r6
 800b410:	da04      	bge.n	800b41c <__kernel_rem_pio2+0x388>
 800b412:	4627      	mov	r7, r4
 800b414:	e6b1      	b.n	800b17a <__kernel_rem_pio2+0xe6>
 800b416:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b418:	2401      	movs	r4, #1
 800b41a:	e7e7      	b.n	800b3ec <__kernel_rem_pio2+0x358>
 800b41c:	f105 0308 	add.w	r3, r5, #8
 800b420:	9309      	str	r3, [sp, #36]	; 0x24
 800b422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b424:	2700      	movs	r7, #0
 800b426:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b42a:	f7f4 ffeb 	bl	8000404 <__aeabi_i2d>
 800b42e:	f04f 0800 	mov.w	r8, #0
 800b432:	f04f 0900 	mov.w	r9, #0
 800b436:	9b08      	ldr	r3, [sp, #32]
 800b438:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b43c:	3b08      	subs	r3, #8
 800b43e:	9300      	str	r3, [sp, #0]
 800b440:	f105 0310 	add.w	r3, r5, #16
 800b444:	9305      	str	r3, [sp, #20]
 800b446:	9b06      	ldr	r3, [sp, #24]
 800b448:	429f      	cmp	r7, r3
 800b44a:	dd04      	ble.n	800b456 <__kernel_rem_pio2+0x3c2>
 800b44c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800b450:	3601      	adds	r6, #1
 800b452:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b454:	e7db      	b.n	800b40e <__kernel_rem_pio2+0x37a>
 800b456:	9905      	ldr	r1, [sp, #20]
 800b458:	9d00      	ldr	r5, [sp, #0]
 800b45a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b45e:	9105      	str	r1, [sp, #20]
 800b460:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800b464:	9500      	str	r5, [sp, #0]
 800b466:	f7f5 f837 	bl	80004d8 <__aeabi_dmul>
 800b46a:	4602      	mov	r2, r0
 800b46c:	460b      	mov	r3, r1
 800b46e:	4640      	mov	r0, r8
 800b470:	4649      	mov	r1, r9
 800b472:	f7f4 fe7b 	bl	800016c <__adddf3>
 800b476:	3701      	adds	r7, #1
 800b478:	4680      	mov	r8, r0
 800b47a:	4689      	mov	r9, r1
 800b47c:	e7e3      	b.n	800b446 <__kernel_rem_pio2+0x3b2>
 800b47e:	3c01      	subs	r4, #1
 800b480:	e745      	b.n	800b30e <__kernel_rem_pio2+0x27a>
 800b482:	f1ca 0200 	rsb	r2, sl, #0
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f000 fc1d 	bl	800bcc8 <scalbn>
 800b48e:	2200      	movs	r2, #0
 800b490:	4ba3      	ldr	r3, [pc, #652]	; (800b720 <__kernel_rem_pio2+0x68c>)
 800b492:	4604      	mov	r4, r0
 800b494:	460d      	mov	r5, r1
 800b496:	f7f5 faa5 	bl	80009e4 <__aeabi_dcmpge>
 800b49a:	b1f8      	cbz	r0, 800b4dc <__kernel_rem_pio2+0x448>
 800b49c:	2200      	movs	r2, #0
 800b49e:	4ba1      	ldr	r3, [pc, #644]	; (800b724 <__kernel_rem_pio2+0x690>)
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	f7f5 f818 	bl	80004d8 <__aeabi_dmul>
 800b4a8:	f7f5 fac6 	bl	8000a38 <__aeabi_d2iz>
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	f7f4 ffa9 	bl	8000404 <__aeabi_i2d>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	4b9a      	ldr	r3, [pc, #616]	; (800b720 <__kernel_rem_pio2+0x68c>)
 800b4b6:	f7f5 f80f 	bl	80004d8 <__aeabi_dmul>
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4602      	mov	r2, r0
 800b4be:	4629      	mov	r1, r5
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f7f4 fe51 	bl	8000168 <__aeabi_dsub>
 800b4c6:	f7f5 fab7 	bl	8000a38 <__aeabi_d2iz>
 800b4ca:	1c7c      	adds	r4, r7, #1
 800b4cc:	ab0c      	add	r3, sp, #48	; 0x30
 800b4ce:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b4d2:	f10a 0a18 	add.w	sl, sl, #24
 800b4d6:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800b4da:	e720      	b.n	800b31e <__kernel_rem_pio2+0x28a>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7f5 faaa 	bl	8000a38 <__aeabi_d2iz>
 800b4e4:	ab0c      	add	r3, sp, #48	; 0x30
 800b4e6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800b4ea:	463c      	mov	r4, r7
 800b4ec:	e717      	b.n	800b31e <__kernel_rem_pio2+0x28a>
 800b4ee:	ab0c      	add	r3, sp, #48	; 0x30
 800b4f0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b4f4:	f7f4 ff86 	bl	8000404 <__aeabi_i2d>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	f7f4 ffec 	bl	80004d8 <__aeabi_dmul>
 800b500:	4652      	mov	r2, sl
 800b502:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b506:	465b      	mov	r3, fp
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 ffe4 	bl	80004d8 <__aeabi_dmul>
 800b510:	3d01      	subs	r5, #1
 800b512:	4606      	mov	r6, r0
 800b514:	460f      	mov	r7, r1
 800b516:	e715      	b.n	800b344 <__kernel_rem_pio2+0x2b0>
 800b518:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800b51c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b520:	f7f4 ffda 	bl	80004d8 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4650      	mov	r0, sl
 800b52a:	4659      	mov	r1, fp
 800b52c:	f7f4 fe1e 	bl	800016c <__adddf3>
 800b530:	4682      	mov	sl, r0
 800b532:	468b      	mov	fp, r1
 800b534:	3701      	adds	r7, #1
 800b536:	9b02      	ldr	r3, [sp, #8]
 800b538:	429f      	cmp	r7, r3
 800b53a:	dc01      	bgt.n	800b540 <__kernel_rem_pio2+0x4ac>
 800b53c:	42bd      	cmp	r5, r7
 800b53e:	daeb      	bge.n	800b518 <__kernel_rem_pio2+0x484>
 800b540:	ab48      	add	r3, sp, #288	; 0x120
 800b542:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b546:	e9c3 ab00 	strd	sl, fp, [r3]
 800b54a:	3501      	adds	r5, #1
 800b54c:	e702      	b.n	800b354 <__kernel_rem_pio2+0x2c0>
 800b54e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800b550:	2b03      	cmp	r3, #3
 800b552:	d86c      	bhi.n	800b62e <__kernel_rem_pio2+0x59a>
 800b554:	e8df f003 	tbb	[pc, r3]
 800b558:	022f2f59 	.word	0x022f2f59
 800b55c:	9a06      	ldr	r2, [sp, #24]
 800b55e:	ab48      	add	r3, sp, #288	; 0x120
 800b560:	189d      	adds	r5, r3, r2
 800b562:	46aa      	mov	sl, r5
 800b564:	46a3      	mov	fp, r4
 800b566:	f1bb 0f00 	cmp.w	fp, #0
 800b56a:	f300 8087 	bgt.w	800b67c <__kernel_rem_pio2+0x5e8>
 800b56e:	46a2      	mov	sl, r4
 800b570:	f1ba 0f01 	cmp.w	sl, #1
 800b574:	f300 809f 	bgt.w	800b6b6 <__kernel_rem_pio2+0x622>
 800b578:	2700      	movs	r7, #0
 800b57a:	463e      	mov	r6, r7
 800b57c:	9d06      	ldr	r5, [sp, #24]
 800b57e:	ab48      	add	r3, sp, #288	; 0x120
 800b580:	3508      	adds	r5, #8
 800b582:	441d      	add	r5, r3
 800b584:	2c01      	cmp	r4, #1
 800b586:	f300 80b3 	bgt.w	800b6f0 <__kernel_rem_pio2+0x65c>
 800b58a:	9b00      	ldr	r3, [sp, #0]
 800b58c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800b58e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800b590:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800b592:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800b594:	2b00      	cmp	r3, #0
 800b596:	f040 80b5 	bne.w	800b704 <__kernel_rem_pio2+0x670>
 800b59a:	4603      	mov	r3, r0
 800b59c:	462a      	mov	r2, r5
 800b59e:	9804      	ldr	r0, [sp, #16]
 800b5a0:	e9c0 2300 	strd	r2, r3, [r0]
 800b5a4:	4622      	mov	r2, r4
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b5ac:	463a      	mov	r2, r7
 800b5ae:	4633      	mov	r3, r6
 800b5b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b5b4:	e03b      	b.n	800b62e <__kernel_rem_pio2+0x59a>
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	4626      	mov	r6, r4
 800b5bc:	4667      	mov	r7, ip
 800b5be:	9d06      	ldr	r5, [sp, #24]
 800b5c0:	ab48      	add	r3, sp, #288	; 0x120
 800b5c2:	3508      	adds	r5, #8
 800b5c4:	441d      	add	r5, r3
 800b5c6:	2e00      	cmp	r6, #0
 800b5c8:	da42      	bge.n	800b650 <__kernel_rem_pio2+0x5bc>
 800b5ca:	9b00      	ldr	r3, [sp, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d049      	beq.n	800b664 <__kernel_rem_pio2+0x5d0>
 800b5d0:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800b5d4:	4662      	mov	r2, ip
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	9904      	ldr	r1, [sp, #16]
 800b5da:	2601      	movs	r6, #1
 800b5dc:	e9c1 2300 	strd	r2, r3, [r1]
 800b5e0:	a948      	add	r1, sp, #288	; 0x120
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e8:	f7f4 fdbe 	bl	8000168 <__aeabi_dsub>
 800b5ec:	4684      	mov	ip, r0
 800b5ee:	460f      	mov	r7, r1
 800b5f0:	ad48      	add	r5, sp, #288	; 0x120
 800b5f2:	42b4      	cmp	r4, r6
 800b5f4:	da38      	bge.n	800b668 <__kernel_rem_pio2+0x5d4>
 800b5f6:	9b00      	ldr	r3, [sp, #0]
 800b5f8:	b10b      	cbz	r3, 800b5fe <__kernel_rem_pio2+0x56a>
 800b5fa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800b5fe:	4662      	mov	r2, ip
 800b600:	463b      	mov	r3, r7
 800b602:	9904      	ldr	r1, [sp, #16]
 800b604:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800b608:	e011      	b.n	800b62e <__kernel_rem_pio2+0x59a>
 800b60a:	2700      	movs	r7, #0
 800b60c:	463d      	mov	r5, r7
 800b60e:	9b06      	ldr	r3, [sp, #24]
 800b610:	aa98      	add	r2, sp, #608	; 0x260
 800b612:	4413      	add	r3, r2
 800b614:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800b618:	2c00      	cmp	r4, #0
 800b61a:	da0f      	bge.n	800b63c <__kernel_rem_pio2+0x5a8>
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	b10b      	cbz	r3, 800b624 <__kernel_rem_pio2+0x590>
 800b620:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b624:	463a      	mov	r2, r7
 800b626:	462b      	mov	r3, r5
 800b628:	9904      	ldr	r1, [sp, #16]
 800b62a:	e9c1 2300 	strd	r2, r3, [r1]
 800b62e:	9b05      	ldr	r3, [sp, #20]
 800b630:	f003 0007 	and.w	r0, r3, #7
 800b634:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	4638      	mov	r0, r7
 800b63e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b642:	4629      	mov	r1, r5
 800b644:	f7f4 fd92 	bl	800016c <__adddf3>
 800b648:	3c01      	subs	r4, #1
 800b64a:	4607      	mov	r7, r0
 800b64c:	460d      	mov	r5, r1
 800b64e:	e7e3      	b.n	800b618 <__kernel_rem_pio2+0x584>
 800b650:	4660      	mov	r0, ip
 800b652:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b656:	4639      	mov	r1, r7
 800b658:	f7f4 fd88 	bl	800016c <__adddf3>
 800b65c:	3e01      	subs	r6, #1
 800b65e:	4684      	mov	ip, r0
 800b660:	460f      	mov	r7, r1
 800b662:	e7b0      	b.n	800b5c6 <__kernel_rem_pio2+0x532>
 800b664:	4639      	mov	r1, r7
 800b666:	e7b5      	b.n	800b5d4 <__kernel_rem_pio2+0x540>
 800b668:	4660      	mov	r0, ip
 800b66a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f4 fd7c 	bl	800016c <__adddf3>
 800b674:	3601      	adds	r6, #1
 800b676:	4684      	mov	ip, r0
 800b678:	460f      	mov	r7, r1
 800b67a:	e7ba      	b.n	800b5f2 <__kernel_rem_pio2+0x55e>
 800b67c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800b680:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800b684:	4640      	mov	r0, r8
 800b686:	4649      	mov	r1, r9
 800b688:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b68c:	f7f4 fd6e 	bl	800016c <__adddf3>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	4640      	mov	r0, r8
 800b69a:	4649      	mov	r1, r9
 800b69c:	f7f4 fd64 	bl	8000168 <__aeabi_dsub>
 800b6a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6a4:	f7f4 fd62 	bl	800016c <__adddf3>
 800b6a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6b0:	e9ca 6700 	strd	r6, r7, [sl]
 800b6b4:	e757      	b.n	800b566 <__kernel_rem_pio2+0x4d2>
 800b6b6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800b6ba:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6c6:	f7f4 fd51 	bl	800016c <__adddf3>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4680      	mov	r8, r0
 800b6d0:	4689      	mov	r9, r1
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	4639      	mov	r1, r7
 800b6d6:	f7f4 fd47 	bl	8000168 <__aeabi_dsub>
 800b6da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6de:	f7f4 fd45 	bl	800016c <__adddf3>
 800b6e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b6ea:	e9c5 8900 	strd	r8, r9, [r5]
 800b6ee:	e73f      	b.n	800b570 <__kernel_rem_pio2+0x4dc>
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b6f6:	4631      	mov	r1, r6
 800b6f8:	f7f4 fd38 	bl	800016c <__adddf3>
 800b6fc:	3c01      	subs	r4, #1
 800b6fe:	4607      	mov	r7, r0
 800b700:	460e      	mov	r6, r1
 800b702:	e73f      	b.n	800b584 <__kernel_rem_pio2+0x4f0>
 800b704:	9b04      	ldr	r3, [sp, #16]
 800b706:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b70a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b70e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800b712:	601d      	str	r5, [r3, #0]
 800b714:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800b718:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800b71c:	615e      	str	r6, [r3, #20]
 800b71e:	e786      	b.n	800b62e <__kernel_rem_pio2+0x59a>
 800b720:	41700000 	.word	0x41700000
 800b724:	3e700000 	.word	0x3e700000

0800b728 <__kernel_sin>:
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	b086      	sub	sp, #24
 800b72e:	e9cd 2300 	strd	r2, r3, [sp]
 800b732:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b736:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b73a:	4682      	mov	sl, r0
 800b73c:	460c      	mov	r4, r1
 800b73e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800b740:	da03      	bge.n	800b74a <__kernel_sin+0x22>
 800b742:	f7f5 f979 	bl	8000a38 <__aeabi_d2iz>
 800b746:	2800      	cmp	r0, #0
 800b748:	d050      	beq.n	800b7ec <__kernel_sin+0xc4>
 800b74a:	4652      	mov	r2, sl
 800b74c:	4623      	mov	r3, r4
 800b74e:	4650      	mov	r0, sl
 800b750:	4621      	mov	r1, r4
 800b752:	f7f4 fec1 	bl	80004d8 <__aeabi_dmul>
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4650      	mov	r0, sl
 800b760:	4621      	mov	r1, r4
 800b762:	f7f4 feb9 	bl	80004d8 <__aeabi_dmul>
 800b766:	a33e      	add	r3, pc, #248	; (adr r3, 800b860 <__kernel_sin+0x138>)
 800b768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b76c:	4680      	mov	r8, r0
 800b76e:	4689      	mov	r9, r1
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f4 feb0 	bl	80004d8 <__aeabi_dmul>
 800b778:	a33b      	add	r3, pc, #236	; (adr r3, 800b868 <__kernel_sin+0x140>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	f7f4 fcf3 	bl	8000168 <__aeabi_dsub>
 800b782:	4632      	mov	r2, r6
 800b784:	463b      	mov	r3, r7
 800b786:	f7f4 fea7 	bl	80004d8 <__aeabi_dmul>
 800b78a:	a339      	add	r3, pc, #228	; (adr r3, 800b870 <__kernel_sin+0x148>)
 800b78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b790:	f7f4 fcec 	bl	800016c <__adddf3>
 800b794:	4632      	mov	r2, r6
 800b796:	463b      	mov	r3, r7
 800b798:	f7f4 fe9e 	bl	80004d8 <__aeabi_dmul>
 800b79c:	a336      	add	r3, pc, #216	; (adr r3, 800b878 <__kernel_sin+0x150>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	f7f4 fce1 	bl	8000168 <__aeabi_dsub>
 800b7a6:	4632      	mov	r2, r6
 800b7a8:	463b      	mov	r3, r7
 800b7aa:	f7f4 fe95 	bl	80004d8 <__aeabi_dmul>
 800b7ae:	a334      	add	r3, pc, #208	; (adr r3, 800b880 <__kernel_sin+0x158>)
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	f7f4 fcda 	bl	800016c <__adddf3>
 800b7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7bc:	b9dd      	cbnz	r5, 800b7f6 <__kernel_sin+0xce>
 800b7be:	4602      	mov	r2, r0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	4639      	mov	r1, r7
 800b7c6:	f7f4 fe87 	bl	80004d8 <__aeabi_dmul>
 800b7ca:	a32f      	add	r3, pc, #188	; (adr r3, 800b888 <__kernel_sin+0x160>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fcca 	bl	8000168 <__aeabi_dsub>
 800b7d4:	4642      	mov	r2, r8
 800b7d6:	464b      	mov	r3, r9
 800b7d8:	f7f4 fe7e 	bl	80004d8 <__aeabi_dmul>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	4621      	mov	r1, r4
 800b7e4:	f7f4 fcc2 	bl	800016c <__adddf3>
 800b7e8:	4682      	mov	sl, r0
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	4650      	mov	r0, sl
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	b006      	add	sp, #24
 800b7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7fc:	4b24      	ldr	r3, [pc, #144]	; (800b890 <__kernel_sin+0x168>)
 800b7fe:	f7f4 fe6b 	bl	80004d8 <__aeabi_dmul>
 800b802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b80a:	4640      	mov	r0, r8
 800b80c:	4649      	mov	r1, r9
 800b80e:	f7f4 fe63 	bl	80004d8 <__aeabi_dmul>
 800b812:	4602      	mov	r2, r0
 800b814:	460b      	mov	r3, r1
 800b816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b81a:	f7f4 fca5 	bl	8000168 <__aeabi_dsub>
 800b81e:	4632      	mov	r2, r6
 800b820:	463b      	mov	r3, r7
 800b822:	f7f4 fe59 	bl	80004d8 <__aeabi_dmul>
 800b826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b82a:	f7f4 fc9d 	bl	8000168 <__aeabi_dsub>
 800b82e:	a316      	add	r3, pc, #88	; (adr r3, 800b888 <__kernel_sin+0x160>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	4606      	mov	r6, r0
 800b836:	460f      	mov	r7, r1
 800b838:	4640      	mov	r0, r8
 800b83a:	4649      	mov	r1, r9
 800b83c:	f7f4 fe4c 	bl	80004d8 <__aeabi_dmul>
 800b840:	4602      	mov	r2, r0
 800b842:	460b      	mov	r3, r1
 800b844:	4630      	mov	r0, r6
 800b846:	4639      	mov	r1, r7
 800b848:	f7f4 fc90 	bl	800016c <__adddf3>
 800b84c:	4602      	mov	r2, r0
 800b84e:	460b      	mov	r3, r1
 800b850:	4650      	mov	r0, sl
 800b852:	4621      	mov	r1, r4
 800b854:	f7f4 fc88 	bl	8000168 <__aeabi_dsub>
 800b858:	e7c6      	b.n	800b7e8 <__kernel_sin+0xc0>
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w
 800b860:	5acfd57c 	.word	0x5acfd57c
 800b864:	3de5d93a 	.word	0x3de5d93a
 800b868:	8a2b9ceb 	.word	0x8a2b9ceb
 800b86c:	3e5ae5e6 	.word	0x3e5ae5e6
 800b870:	57b1fe7d 	.word	0x57b1fe7d
 800b874:	3ec71de3 	.word	0x3ec71de3
 800b878:	19c161d5 	.word	0x19c161d5
 800b87c:	3f2a01a0 	.word	0x3f2a01a0
 800b880:	1110f8a6 	.word	0x1110f8a6
 800b884:	3f811111 	.word	0x3f811111
 800b888:	55555549 	.word	0x55555549
 800b88c:	3fc55555 	.word	0x3fc55555
 800b890:	3fe00000 	.word	0x3fe00000
 800b894:	00000000 	.word	0x00000000

0800b898 <atan>:
 800b898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89c:	4bb6      	ldr	r3, [pc, #728]	; (800bb78 <atan+0x2e0>)
 800b89e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b8a2:	429e      	cmp	r6, r3
 800b8a4:	4604      	mov	r4, r0
 800b8a6:	460d      	mov	r5, r1
 800b8a8:	468b      	mov	fp, r1
 800b8aa:	dd17      	ble.n	800b8dc <atan+0x44>
 800b8ac:	4bb3      	ldr	r3, [pc, #716]	; (800bb7c <atan+0x2e4>)
 800b8ae:	429e      	cmp	r6, r3
 800b8b0:	dc01      	bgt.n	800b8b6 <atan+0x1e>
 800b8b2:	d109      	bne.n	800b8c8 <atan+0x30>
 800b8b4:	b140      	cbz	r0, 800b8c8 <atan+0x30>
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	4629      	mov	r1, r5
 800b8be:	f7f4 fc55 	bl	800016c <__adddf3>
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	460d      	mov	r5, r1
 800b8c6:	e005      	b.n	800b8d4 <atan+0x3c>
 800b8c8:	f1bb 0f00 	cmp.w	fp, #0
 800b8cc:	4cac      	ldr	r4, [pc, #688]	; (800bb80 <atan+0x2e8>)
 800b8ce:	f340 8121 	ble.w	800bb14 <atan+0x27c>
 800b8d2:	4dac      	ldr	r5, [pc, #688]	; (800bb84 <atan+0x2ec>)
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8dc:	4baa      	ldr	r3, [pc, #680]	; (800bb88 <atan+0x2f0>)
 800b8de:	429e      	cmp	r6, r3
 800b8e0:	dc11      	bgt.n	800b906 <atan+0x6e>
 800b8e2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b8e6:	429e      	cmp	r6, r3
 800b8e8:	dc0a      	bgt.n	800b900 <atan+0x68>
 800b8ea:	a38b      	add	r3, pc, #556	; (adr r3, 800bb18 <atan+0x280>)
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	f7f4 fc3c 	bl	800016c <__adddf3>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	4ba5      	ldr	r3, [pc, #660]	; (800bb8c <atan+0x2f4>)
 800b8f8:	f7f5 f87e 	bl	80009f8 <__aeabi_dcmpgt>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1e9      	bne.n	800b8d4 <atan+0x3c>
 800b900:	f04f 3aff 	mov.w	sl, #4294967295
 800b904:	e027      	b.n	800b956 <atan+0xbe>
 800b906:	f000 f951 	bl	800bbac <fabs>
 800b90a:	4ba1      	ldr	r3, [pc, #644]	; (800bb90 <atan+0x2f8>)
 800b90c:	4604      	mov	r4, r0
 800b90e:	429e      	cmp	r6, r3
 800b910:	460d      	mov	r5, r1
 800b912:	f300 80b8 	bgt.w	800ba86 <atan+0x1ee>
 800b916:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b91a:	429e      	cmp	r6, r3
 800b91c:	f300 809c 	bgt.w	800ba58 <atan+0x1c0>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	f7f4 fc22 	bl	800016c <__adddf3>
 800b928:	2200      	movs	r2, #0
 800b92a:	4b98      	ldr	r3, [pc, #608]	; (800bb8c <atan+0x2f4>)
 800b92c:	f7f4 fc1c 	bl	8000168 <__aeabi_dsub>
 800b930:	2200      	movs	r2, #0
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	f7f4 fc15 	bl	800016c <__adddf3>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4630      	mov	r0, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	f7f4 feef 	bl	800072c <__aeabi_ddiv>
 800b94e:	f04f 0a00 	mov.w	sl, #0
 800b952:	4604      	mov	r4, r0
 800b954:	460d      	mov	r5, r1
 800b956:	4622      	mov	r2, r4
 800b958:	462b      	mov	r3, r5
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	f7f4 fdbb 	bl	80004d8 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4680      	mov	r8, r0
 800b968:	4689      	mov	r9, r1
 800b96a:	f7f4 fdb5 	bl	80004d8 <__aeabi_dmul>
 800b96e:	a36c      	add	r3, pc, #432	; (adr r3, 800bb20 <atan+0x288>)
 800b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b974:	4606      	mov	r6, r0
 800b976:	460f      	mov	r7, r1
 800b978:	f7f4 fdae 	bl	80004d8 <__aeabi_dmul>
 800b97c:	a36a      	add	r3, pc, #424	; (adr r3, 800bb28 <atan+0x290>)
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f7f4 fbf3 	bl	800016c <__adddf3>
 800b986:	4632      	mov	r2, r6
 800b988:	463b      	mov	r3, r7
 800b98a:	f7f4 fda5 	bl	80004d8 <__aeabi_dmul>
 800b98e:	a368      	add	r3, pc, #416	; (adr r3, 800bb30 <atan+0x298>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 fbea 	bl	800016c <__adddf3>
 800b998:	4632      	mov	r2, r6
 800b99a:	463b      	mov	r3, r7
 800b99c:	f7f4 fd9c 	bl	80004d8 <__aeabi_dmul>
 800b9a0:	a365      	add	r3, pc, #404	; (adr r3, 800bb38 <atan+0x2a0>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fbe1 	bl	800016c <__adddf3>
 800b9aa:	4632      	mov	r2, r6
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	f7f4 fd93 	bl	80004d8 <__aeabi_dmul>
 800b9b2:	a363      	add	r3, pc, #396	; (adr r3, 800bb40 <atan+0x2a8>)
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fbd8 	bl	800016c <__adddf3>
 800b9bc:	4632      	mov	r2, r6
 800b9be:	463b      	mov	r3, r7
 800b9c0:	f7f4 fd8a 	bl	80004d8 <__aeabi_dmul>
 800b9c4:	a360      	add	r3, pc, #384	; (adr r3, 800bb48 <atan+0x2b0>)
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f7f4 fbcf 	bl	800016c <__adddf3>
 800b9ce:	4642      	mov	r2, r8
 800b9d0:	464b      	mov	r3, r9
 800b9d2:	f7f4 fd81 	bl	80004d8 <__aeabi_dmul>
 800b9d6:	a35e      	add	r3, pc, #376	; (adr r3, 800bb50 <atan+0x2b8>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	4680      	mov	r8, r0
 800b9de:	4689      	mov	r9, r1
 800b9e0:	4630      	mov	r0, r6
 800b9e2:	4639      	mov	r1, r7
 800b9e4:	f7f4 fd78 	bl	80004d8 <__aeabi_dmul>
 800b9e8:	a35b      	add	r3, pc, #364	; (adr r3, 800bb58 <atan+0x2c0>)
 800b9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ee:	f7f4 fbbb 	bl	8000168 <__aeabi_dsub>
 800b9f2:	4632      	mov	r2, r6
 800b9f4:	463b      	mov	r3, r7
 800b9f6:	f7f4 fd6f 	bl	80004d8 <__aeabi_dmul>
 800b9fa:	a359      	add	r3, pc, #356	; (adr r3, 800bb60 <atan+0x2c8>)
 800b9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba00:	f7f4 fbb2 	bl	8000168 <__aeabi_dsub>
 800ba04:	4632      	mov	r2, r6
 800ba06:	463b      	mov	r3, r7
 800ba08:	f7f4 fd66 	bl	80004d8 <__aeabi_dmul>
 800ba0c:	a356      	add	r3, pc, #344	; (adr r3, 800bb68 <atan+0x2d0>)
 800ba0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba12:	f7f4 fba9 	bl	8000168 <__aeabi_dsub>
 800ba16:	4632      	mov	r2, r6
 800ba18:	463b      	mov	r3, r7
 800ba1a:	f7f4 fd5d 	bl	80004d8 <__aeabi_dmul>
 800ba1e:	a354      	add	r3, pc, #336	; (adr r3, 800bb70 <atan+0x2d8>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fba0 	bl	8000168 <__aeabi_dsub>
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	f7f4 fd54 	bl	80004d8 <__aeabi_dmul>
 800ba30:	4602      	mov	r2, r0
 800ba32:	460b      	mov	r3, r1
 800ba34:	4640      	mov	r0, r8
 800ba36:	4649      	mov	r1, r9
 800ba38:	f7f4 fb98 	bl	800016c <__adddf3>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	462b      	mov	r3, r5
 800ba40:	f7f4 fd4a 	bl	80004d8 <__aeabi_dmul>
 800ba44:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	d144      	bne.n	800bad8 <atan+0x240>
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4629      	mov	r1, r5
 800ba52:	f7f4 fb89 	bl	8000168 <__aeabi_dsub>
 800ba56:	e734      	b.n	800b8c2 <atan+0x2a>
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4b4c      	ldr	r3, [pc, #304]	; (800bb8c <atan+0x2f4>)
 800ba5c:	f7f4 fb84 	bl	8000168 <__aeabi_dsub>
 800ba60:	2200      	movs	r2, #0
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	4b49      	ldr	r3, [pc, #292]	; (800bb8c <atan+0x2f4>)
 800ba68:	4620      	mov	r0, r4
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	f7f4 fb7e 	bl	800016c <__adddf3>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	4630      	mov	r0, r6
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fe58 	bl	800072c <__aeabi_ddiv>
 800ba7c:	f04f 0a01 	mov.w	sl, #1
 800ba80:	4604      	mov	r4, r0
 800ba82:	460d      	mov	r5, r1
 800ba84:	e767      	b.n	800b956 <atan+0xbe>
 800ba86:	4b43      	ldr	r3, [pc, #268]	; (800bb94 <atan+0x2fc>)
 800ba88:	429e      	cmp	r6, r3
 800ba8a:	dc1a      	bgt.n	800bac2 <atan+0x22a>
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	4b42      	ldr	r3, [pc, #264]	; (800bb98 <atan+0x300>)
 800ba90:	f7f4 fb6a 	bl	8000168 <__aeabi_dsub>
 800ba94:	2200      	movs	r2, #0
 800ba96:	4606      	mov	r6, r0
 800ba98:	460f      	mov	r7, r1
 800ba9a:	4b3f      	ldr	r3, [pc, #252]	; (800bb98 <atan+0x300>)
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fd1a 	bl	80004d8 <__aeabi_dmul>
 800baa4:	2200      	movs	r2, #0
 800baa6:	4b39      	ldr	r3, [pc, #228]	; (800bb8c <atan+0x2f4>)
 800baa8:	f7f4 fb60 	bl	800016c <__adddf3>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f4 fe3a 	bl	800072c <__aeabi_ddiv>
 800bab8:	f04f 0a02 	mov.w	sl, #2
 800babc:	4604      	mov	r4, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	e749      	b.n	800b956 <atan+0xbe>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	2000      	movs	r0, #0
 800bac8:	4934      	ldr	r1, [pc, #208]	; (800bb9c <atan+0x304>)
 800baca:	f7f4 fe2f 	bl	800072c <__aeabi_ddiv>
 800bace:	f04f 0a03 	mov.w	sl, #3
 800bad2:	4604      	mov	r4, r0
 800bad4:	460d      	mov	r5, r1
 800bad6:	e73e      	b.n	800b956 <atan+0xbe>
 800bad8:	4b31      	ldr	r3, [pc, #196]	; (800bba0 <atan+0x308>)
 800bada:	4e32      	ldr	r6, [pc, #200]	; (800bba4 <atan+0x30c>)
 800badc:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800bae0:	4456      	add	r6, sl
 800bae2:	449a      	add	sl, r3
 800bae4:	e9da 2300 	ldrd	r2, r3, [sl]
 800bae8:	f7f4 fb3e 	bl	8000168 <__aeabi_dsub>
 800baec:	4622      	mov	r2, r4
 800baee:	462b      	mov	r3, r5
 800baf0:	f7f4 fb3a 	bl	8000168 <__aeabi_dsub>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800bafc:	f7f4 fb34 	bl	8000168 <__aeabi_dsub>
 800bb00:	f1bb 0f00 	cmp.w	fp, #0
 800bb04:	4604      	mov	r4, r0
 800bb06:	460d      	mov	r5, r1
 800bb08:	f6bf aee4 	bge.w	800b8d4 <atan+0x3c>
 800bb0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb10:	461d      	mov	r5, r3
 800bb12:	e6df      	b.n	800b8d4 <atan+0x3c>
 800bb14:	4d24      	ldr	r5, [pc, #144]	; (800bba8 <atan+0x310>)
 800bb16:	e6dd      	b.n	800b8d4 <atan+0x3c>
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	e322da11 	.word	0xe322da11
 800bb24:	3f90ad3a 	.word	0x3f90ad3a
 800bb28:	24760deb 	.word	0x24760deb
 800bb2c:	3fa97b4b 	.word	0x3fa97b4b
 800bb30:	a0d03d51 	.word	0xa0d03d51
 800bb34:	3fb10d66 	.word	0x3fb10d66
 800bb38:	c54c206e 	.word	0xc54c206e
 800bb3c:	3fb745cd 	.word	0x3fb745cd
 800bb40:	920083ff 	.word	0x920083ff
 800bb44:	3fc24924 	.word	0x3fc24924
 800bb48:	5555550d 	.word	0x5555550d
 800bb4c:	3fd55555 	.word	0x3fd55555
 800bb50:	2c6a6c2f 	.word	0x2c6a6c2f
 800bb54:	bfa2b444 	.word	0xbfa2b444
 800bb58:	52defd9a 	.word	0x52defd9a
 800bb5c:	3fadde2d 	.word	0x3fadde2d
 800bb60:	af749a6d 	.word	0xaf749a6d
 800bb64:	3fb3b0f2 	.word	0x3fb3b0f2
 800bb68:	fe231671 	.word	0xfe231671
 800bb6c:	3fbc71c6 	.word	0x3fbc71c6
 800bb70:	9998ebc4 	.word	0x9998ebc4
 800bb74:	3fc99999 	.word	0x3fc99999
 800bb78:	440fffff 	.word	0x440fffff
 800bb7c:	7ff00000 	.word	0x7ff00000
 800bb80:	54442d18 	.word	0x54442d18
 800bb84:	3ff921fb 	.word	0x3ff921fb
 800bb88:	3fdbffff 	.word	0x3fdbffff
 800bb8c:	3ff00000 	.word	0x3ff00000
 800bb90:	3ff2ffff 	.word	0x3ff2ffff
 800bb94:	40037fff 	.word	0x40037fff
 800bb98:	3ff80000 	.word	0x3ff80000
 800bb9c:	bff00000 	.word	0xbff00000
 800bba0:	0800c560 	.word	0x0800c560
 800bba4:	0800c540 	.word	0x0800c540
 800bba8:	bff921fb 	.word	0xbff921fb

0800bbac <fabs>:
 800bbac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	4770      	bx	lr
 800bbb4:	0000      	movs	r0, r0
	...

0800bbb8 <floor>:
 800bbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bbc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bbc4:	2e13      	cmp	r6, #19
 800bbc6:	4607      	mov	r7, r0
 800bbc8:	460b      	mov	r3, r1
 800bbca:	460c      	mov	r4, r1
 800bbcc:	4605      	mov	r5, r0
 800bbce:	dc35      	bgt.n	800bc3c <floor+0x84>
 800bbd0:	2e00      	cmp	r6, #0
 800bbd2:	da16      	bge.n	800bc02 <floor+0x4a>
 800bbd4:	a336      	add	r3, pc, #216	; (adr r3, 800bcb0 <floor+0xf8>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	f7f4 fac7 	bl	800016c <__adddf3>
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f7f4 ff09 	bl	80009f8 <__aeabi_dcmpgt>
 800bbe6:	b148      	cbz	r0, 800bbfc <floor+0x44>
 800bbe8:	2c00      	cmp	r4, #0
 800bbea:	da5b      	bge.n	800bca4 <floor+0xec>
 800bbec:	2500      	movs	r5, #0
 800bbee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bbf2:	4a31      	ldr	r2, [pc, #196]	; (800bcb8 <floor+0x100>)
 800bbf4:	433b      	orrs	r3, r7
 800bbf6:	42ab      	cmp	r3, r5
 800bbf8:	bf18      	it	ne
 800bbfa:	4614      	movne	r4, r2
 800bbfc:	4623      	mov	r3, r4
 800bbfe:	462f      	mov	r7, r5
 800bc00:	e026      	b.n	800bc50 <floor+0x98>
 800bc02:	4a2e      	ldr	r2, [pc, #184]	; (800bcbc <floor+0x104>)
 800bc04:	fa42 f806 	asr.w	r8, r2, r6
 800bc08:	ea01 0208 	and.w	r2, r1, r8
 800bc0c:	4302      	orrs	r2, r0
 800bc0e:	d01f      	beq.n	800bc50 <floor+0x98>
 800bc10:	a327      	add	r3, pc, #156	; (adr r3, 800bcb0 <floor+0xf8>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	f7f4 faa9 	bl	800016c <__adddf3>
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	f7f4 feeb 	bl	80009f8 <__aeabi_dcmpgt>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0ea      	beq.n	800bbfc <floor+0x44>
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	bfbe      	ittt	lt
 800bc2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bc2e:	fa43 f606 	asrlt.w	r6, r3, r6
 800bc32:	19a4      	addlt	r4, r4, r6
 800bc34:	ea24 0408 	bic.w	r4, r4, r8
 800bc38:	2500      	movs	r5, #0
 800bc3a:	e7df      	b.n	800bbfc <floor+0x44>
 800bc3c:	2e33      	cmp	r6, #51	; 0x33
 800bc3e:	dd0b      	ble.n	800bc58 <floor+0xa0>
 800bc40:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bc44:	d104      	bne.n	800bc50 <floor+0x98>
 800bc46:	4602      	mov	r2, r0
 800bc48:	f7f4 fa90 	bl	800016c <__adddf3>
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4638      	mov	r0, r7
 800bc52:	4619      	mov	r1, r3
 800bc54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bc60:	fa22 f808 	lsr.w	r8, r2, r8
 800bc64:	ea18 0f00 	tst.w	r8, r0
 800bc68:	d0f2      	beq.n	800bc50 <floor+0x98>
 800bc6a:	a311      	add	r3, pc, #68	; (adr r3, 800bcb0 <floor+0xf8>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 fa7c 	bl	800016c <__adddf3>
 800bc74:	2200      	movs	r2, #0
 800bc76:	2300      	movs	r3, #0
 800bc78:	f7f4 febe 	bl	80009f8 <__aeabi_dcmpgt>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d0bd      	beq.n	800bbfc <floor+0x44>
 800bc80:	2c00      	cmp	r4, #0
 800bc82:	da02      	bge.n	800bc8a <floor+0xd2>
 800bc84:	2e14      	cmp	r6, #20
 800bc86:	d103      	bne.n	800bc90 <floor+0xd8>
 800bc88:	3401      	adds	r4, #1
 800bc8a:	ea25 0508 	bic.w	r5, r5, r8
 800bc8e:	e7b5      	b.n	800bbfc <floor+0x44>
 800bc90:	2301      	movs	r3, #1
 800bc92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc96:	fa03 f606 	lsl.w	r6, r3, r6
 800bc9a:	4435      	add	r5, r6
 800bc9c:	42bd      	cmp	r5, r7
 800bc9e:	bf38      	it	cc
 800bca0:	18e4      	addcc	r4, r4, r3
 800bca2:	e7f2      	b.n	800bc8a <floor+0xd2>
 800bca4:	2500      	movs	r5, #0
 800bca6:	462c      	mov	r4, r5
 800bca8:	e7a8      	b.n	800bbfc <floor+0x44>
 800bcaa:	bf00      	nop
 800bcac:	f3af 8000 	nop.w
 800bcb0:	8800759c 	.word	0x8800759c
 800bcb4:	7e37e43c 	.word	0x7e37e43c
 800bcb8:	bff00000 	.word	0xbff00000
 800bcbc:	000fffff 	.word	0x000fffff

0800bcc0 <matherr>:
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	4770      	bx	lr
 800bcc4:	0000      	movs	r0, r0
	...

0800bcc8 <scalbn>:
 800bcc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcca:	4616      	mov	r6, r2
 800bccc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	460d      	mov	r5, r1
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	b982      	cbnz	r2, 800bcfa <scalbn+0x32>
 800bcd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcdc:	4303      	orrs	r3, r0
 800bcde:	d034      	beq.n	800bd4a <scalbn+0x82>
 800bce0:	4b2d      	ldr	r3, [pc, #180]	; (800bd98 <scalbn+0xd0>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	f7f4 fbf8 	bl	80004d8 <__aeabi_dmul>
 800bce8:	4b2c      	ldr	r3, [pc, #176]	; (800bd9c <scalbn+0xd4>)
 800bcea:	4604      	mov	r4, r0
 800bcec:	429e      	cmp	r6, r3
 800bcee:	460d      	mov	r5, r1
 800bcf0:	da0d      	bge.n	800bd0e <scalbn+0x46>
 800bcf2:	a325      	add	r3, pc, #148	; (adr r3, 800bd88 <scalbn+0xc0>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	e01c      	b.n	800bd34 <scalbn+0x6c>
 800bcfa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800bcfe:	42ba      	cmp	r2, r7
 800bd00:	d109      	bne.n	800bd16 <scalbn+0x4e>
 800bd02:	4602      	mov	r2, r0
 800bd04:	f7f4 fa32 	bl	800016c <__adddf3>
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	e01d      	b.n	800bd4a <scalbn+0x82>
 800bd0e:	460b      	mov	r3, r1
 800bd10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800bd14:	3a36      	subs	r2, #54	; 0x36
 800bd16:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bd1a:	4432      	add	r2, r6
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	dd0c      	ble.n	800bd3a <scalbn+0x72>
 800bd20:	4622      	mov	r2, r4
 800bd22:	462b      	mov	r3, r5
 800bd24:	a11a      	add	r1, pc, #104	; (adr r1, 800bd90 <scalbn+0xc8>)
 800bd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd2a:	f000 f83b 	bl	800bda4 <copysign>
 800bd2e:	a318      	add	r3, pc, #96	; (adr r3, 800bd90 <scalbn+0xc8>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fbd0 	bl	80004d8 <__aeabi_dmul>
 800bd38:	e7e6      	b.n	800bd08 <scalbn+0x40>
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	dd08      	ble.n	800bd50 <scalbn+0x88>
 800bd3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd50:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bd54:	da0b      	bge.n	800bd6e <scalbn+0xa6>
 800bd56:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bd5a:	429e      	cmp	r6, r3
 800bd5c:	4622      	mov	r2, r4
 800bd5e:	462b      	mov	r3, r5
 800bd60:	dce0      	bgt.n	800bd24 <scalbn+0x5c>
 800bd62:	a109      	add	r1, pc, #36	; (adr r1, 800bd88 <scalbn+0xc0>)
 800bd64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd68:	f000 f81c 	bl	800bda4 <copysign>
 800bd6c:	e7c1      	b.n	800bcf2 <scalbn+0x2a>
 800bd6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bd72:	3236      	adds	r2, #54	; 0x36
 800bd74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bd78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	4629      	mov	r1, r5
 800bd80:	2200      	movs	r2, #0
 800bd82:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <scalbn+0xd8>)
 800bd84:	e7d6      	b.n	800bd34 <scalbn+0x6c>
 800bd86:	bf00      	nop
 800bd88:	c2f8f359 	.word	0xc2f8f359
 800bd8c:	01a56e1f 	.word	0x01a56e1f
 800bd90:	8800759c 	.word	0x8800759c
 800bd94:	7e37e43c 	.word	0x7e37e43c
 800bd98:	43500000 	.word	0x43500000
 800bd9c:	ffff3cb0 	.word	0xffff3cb0
 800bda0:	3c900000 	.word	0x3c900000

0800bda4 <copysign>:
 800bda4:	b530      	push	{r4, r5, lr}
 800bda6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800bdaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdae:	ea42 0503 	orr.w	r5, r2, r3
 800bdb2:	4629      	mov	r1, r5
 800bdb4:	bd30      	pop	{r4, r5, pc}
	...

0800bdb8 <_init>:
 800bdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdba:	bf00      	nop
 800bdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdbe:	bc08      	pop	{r3}
 800bdc0:	469e      	mov	lr, r3
 800bdc2:	4770      	bx	lr

0800bdc4 <_fini>:
 800bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc6:	bf00      	nop
 800bdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdca:	bc08      	pop	{r3}
 800bdcc:	469e      	mov	lr, r3
 800bdce:	4770      	bx	lr
